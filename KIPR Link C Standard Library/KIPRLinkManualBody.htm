<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"<html><head><!-- On-line user manual for the KIPR Link robotics controller, current as of 11/5/2013 --><!-- Should be paired with the KIPRLinkManualTable.htm file, which provides an index into this document --><link rel="icon" href="images/botball.ico" type="image/x-icon"/><link rel="shortcut icon" href="images/botball.ico" type="image/x-icon"/><style type="text/css">    @import "LinkCSS.css";</style><title>KISS User Manual for C</title><!-- 9-03-2009 --><!-- 1-05-2010- Modified content, added css sheet formating, split index into it's own html document, reformated and relocated content.-----------------></head><body><h1>KISS IDE User Manual for <b><font color=blue>C</font></b></h1><br><!--Introduction--><a name="Introduction"></a><h2>Introduction</h2><p>The KISS IDE is an Integrated Development Environment (IDE) for KIPR's Instructional Software System (KISS), providing an editor and compilers for software development in multiple programming languages, with special purpose function libraries and simulation support for the KIPR Link Robot Controller.  The KIPR Link is a complete Linux based system with color touch screen for user I/O.  Its hardware provides analog and digital I/O ports, DC motor ports, servo ports, USB ports, TTL serial communication, and an HDMI port, plus an integrated accelerometer, IR send/receive, and other program accessible hardware.</p><p>This is the on-line manual for the development of C programs using the KISS IDE. The KISS IDE implements the full ANSI C specification and can target the host system, the simulator, or an attached KIPR Link. For information about the C programing language, including history and basic syntax, see the Wikipedia article <a href="http://en.wikipedia.org/wiki/C_(programming_language)" target="_blank">C (programming language)</a>. For a more complete tutorial and guide for C Programming visit <a href="http://www.cprogramming.com/" target="_blank">CPrograming</a>. The landmark reference book on C, <a href="http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628">The C Programming Language (2nd Edition)</a> by Kernighan and Ritchie must also be mentioned, since its authors are among the original developers for Unix and C.  Their book is also the progenitor for much of the material in this documentation and other programming reference works.  The <a href="http://community.botball.org" target="_blank">Botball community website</a> also has several articles about programming and a user forum where questions can be posted to the botball community. The KIPR Link Manual and the KIPR Sensors and Motors Manual available through KIPR have system specific information not included in this manual.</p><p>The primary purpose of this manual is to describe the C functions provided for the KIPR Link and their use with the KIPR Link simulator. This manual also includes a basic introduction to programming in C for those who already have experience with some other programming language or for those who need a refresher for C. To learn more about programming in C, consult one of the many books or websites that provide C references and tutorials such as the one suggested above. </p><!--KISS Interface--><a name="KISS_Interface"></a><h2>KISS IDE Interface</h2><p>The KISS IDE is used to manage software developed for the KIPR Link, in particular for constructing new (unsaved) program files or editing old ones. The KISS IDE organizes files opened for editing along a row of tabs. Clicking a file's tab activates it for editing by bringing it forward into an editing panel.</p><p>The File menu has standard entries for New, Open, Save, Save As, Print, Close and Quit.  Each file is associated with a target system, although "no target" can always be selected to use the IDE for basic text editing.  Targets include the host system, the KIPR Link, and the simulator.  The IDE includes as target options only those systems currently visible to the IDE.  This means the simulator has to be launched (as if it were an independent system) for it to be visible to the IDE.  Similarly, the KIPR Link has to be both on and connected from its micro USB port to a host system USB port to be visible.  The USB connection to the KIPR Link relies on a common third party serial communications driver which works for most systems, but sometimes requires additional (one-time) tweaking of the host operating system.  After installing the KISS IDE, if the KISS IDE is not finding the KIPR Link (turned on and correctly connected via USB), see the KIPR Link Manual for information regarding adjustments for your specific system.</p><p>At installation on the host system, A KISS Platform folder is created for the KISS IDE.  The KISS IDE interface and KIPR Link simulator are stored in separate folders within the KISS Platform folder.  The simulator can be launched as an application by clicking on its icon in the folder or on the desktop.  To set up a program to run in the simulator, when you load or create your program file simply select <i>Simulator</i> as the target. Clicking <i>Compile</i> or <i>Download</i> will compile the file being edited, checking for errors.  Clicking <i>Run</i> will compile the file and then run the result in the simulator.  Any time you compile a file (whether via <i>Compile</i> or <i>Run</i>) the file will be automatically saved, replacing the current version.  If the file being edited is new, the user is first prompted for a &quot;save as&quot; file name. The file must contain (or <font class="Preprocessor">#include</font>) the <b>main</b> function in order for the compiled result to run in the simulator.  Note that only the file being edited is saved, not any included files.</p><p>When your KIPR Link is turned on and correctly cabled via its micro USB port to your computer, its port identification will appear as one of the available targets. If you select (or change) the target for the file currently being edited <i>Compile</i> is as before. <i>Run</i> will do a compile check and if OK will download the file to the KIPR Link, where it will be compiled and held ready for execution. <i>Download</i> will send the file to the KIPR Link's <i>Programs</i> folder.  The <i>Run</i> option for the KIPR Link's <i>Programs</i> folder will run the selected program if it is ready for execution, or if it was downloaded but is not yet compiled will first compile its file (and report any errors which prevent proceeding to execution).<p>The interface provides additional capabilities for program entry/edit, minor adjustment to the display (font size), auto-completion and auto-indentation. If there is a syntax error in the program, an error window will appear at the bottom of the KISS screen with the error message and the file and line number where the error was detected. If the error occurred in the active file, then clicking on the error message will move to that line.</p><p>C programs are automatically formatted and indented. Keywords, comments, and text strings are highlighted with selected colors (adjustable in the Editor theme). Most Link-specific library functions will have pop-help when they are entered into the input window.</p><!--Programming in C--><a name="CProgramming"></a><h2>Programming in C</h2><p>Following a Quick C Tutorial introduction, more detailed sections are provided which describe </p>   <ul><li><a href="#Data_Objects">C data objects</a> including variables, constants, data types, pointers, arrays, and structures</li>   <li><a href="#Statements_and_Expressions">C statements and expressions</a> including operators used in expressions and control flow statements used to create program logic</li>   <li><a href="#Programming_Style">C Programming style</a> including use of white space, indentation, and comments</li>   <li><a href="#Program_Debugging">C program debugging</a> to correct syntax and semantic errors, with attention to using <code>printf</code> and commenting out sections of code</li>   <li><a href="#Display_Screen_Printing">Display screen printing using printf</a> including multiple examples using printf % codes</li>   <li><a href="#Preprocessor">The C preprocessor</a> including <font class="Preprocessor">#include</font>, <font class="Preprocessor">#define</font>, macros, and conditional compilation</li>   <li><a href="#C_Math_Library">C math library</a> descriptions of math functions commonly used with the KIPR Link</li></ul><p>The C programming information provided is sufficient for most purposes, but a C programming reference such as those noted above should be consulted where more detail is needed or where elements of C not covered (such as functions with a variable number of parameters or function pointers) are needed to solve some programming issue.</p><!--A Quick C Tutorial--><a name="A_Quick_C_Tutorial"></a><h2>A Quick C Tutorial</h2><p>C programs generally consist of one or more function definitions and user specified data structures, and typically utilize pre-compiled code from function libraries. The following is a simple C program consisting of a single function named <b>main</b>.  As is the case for every C function, <b>main</b> is defined by first declaring its return data type followed by its name (<b>main</b>) and argument list in parentheses (empty in this case), after which the program code for the function is given in curly braces (<b>{  }</b>).  Comments may be included for documenting the function's purpose and expected behavior, but are ignored in the compilation process.</p><p>A minimal requirement for a set of functions and data structures to be a C program is that exactly one of its functions is named <b>main</b>.</p><a name="SimpleProgram"></a><pre><code><font class="Comment">/* Simple example: C Programmer's Manual */</font><font class="CVariable">int</font> main(){    printf(<font class="Quote">&quot;Hello, world!/n&quot;</font>);<font class="Comment">// simple example</font>}</code></pre><p>The text</p><div class="Indent"><font class="Comment">/* &lt;text&gt; */</font></div><p>forms a multi-line or bracketed comment, in contrast to the text that starts with</p><div class="Indent"><font class="Comment">//</font></div><p>which forms a single line comment that continues only to the end of the line. Keep in mind that commenting program code liberally is a good habit to form and has no impact on program performance since comments are ignored by C when the program is compiled.  </p><p>All C functions must have a return data type. While <b>main</b> does not return a value to another function, it does return an integer to the operating system (not relevant to this discussion), and so is of type <font class="CVariable">int</font>. Two other basic data types are <font class="CVariable">void</font> representing no returned value and <font class="CVariable">double</font> representing the (double precision) floating point numbers used for non-integer calculation. There are additional basic (or <i>ordinal</i>) data types, and user defined data types derived from basic data types may also be employed.  Functions must be declared or defined in order to be used.  In some cases declarations for commonly used functions in the standard C library  are automatically provided (such as for <b>printf</b>), and for others the <a href="KIPRLinkManualBody.htm#Preprocessor" target="ManualFrame">C preprocessor</a> that automatically prepares user code for compilation can be directed to <font class="Preprocessor">#include</font> their specifications.<p>Immediately following the function's return type specification is the function's name (in this case, <b>main</b>). Next, in parentheses, are any arguments (or inputs) to the function. <b>main</b> has none, signified by an empty set of parentheses. </p><p>The open curly-brace <b>{</b> following the argument list signifies the start of the actual function code. Curly-braces are used to structure a program in blocks of code. For C, so-called "white space" consists of one or more of any combination of characters such as spaces, returns, new lines, and tabs, which is collapsed to a single generic white space character in compilation.  For this reason, white space can be used for things like indentation that improve program readibility.  In particular, the KISS IDE editor automatically applies white space readibility conventions to enhance files as they are edited.</p><p>The body of the function consists of a block consisting of a series of C statements. A C statement specifies a data structure or some specific action to be taken and is terminated with a semicolon (<b>;</b>).  The simple example program has a single statement,</p><div class="Indent"><code>printf(<font class="Quote">"Hello, world!/n"</font>);</code></div><p>The action this statement specifies is calling the C library <b>printf</b> function to format and print the message <b>Hello, world!</b> to the KIPR Link display (or the simulator). <b>printf</b> is a commonly used library function whose specification is usually provided automatically to the C preprocessor in preparing the user's program code for compilation. The <b>\n</b> indicates to <b>printf</b> the start-of-a-new-line (in effect ending the current line and positioning for subseequent printing to start on the next line). When printing reaches the bottom of the KIPR Link display, any additional lines printed cause the display to scroll up.  Since calling the <b>printf</b> function is a C statement, it has to be ended with a semicolon (<b>;</b>). A common error made by beginning C programmers is omitting the semicolon that is required to end each statement. </p><p>The closing curly-brace <b>}</b> for the <b>main</b> function's block structure concludes its definition.</p><p>If the compiler issues a warning that <b>printf</b> is being used with an implicit declaration, then the C preprocessor did not receive a declaration for it to include in preparing the program code for compilation.  Prefacing the program code with the preprocessor directive</p><div class="Indent"><font class="Preprocessor">#include &lt;stdio.h&gt;</font></div><p>will (possibly redundantly) ensure that the C preprocessor includes the declaration in preparing the code for compilation.<p>As a second example exhibiting features of C, the following program code defines a function named <b>square</b> which returns the mathematical square of an integer.  In this case the function does not represent a complete C program, since a function named <b>main</b> for using it has not been defined yet.</p><pre><code><font class="CVariable">int</font> square(<font class="CVariable">int</font> n){    <font class="CVariable">return</font>(n * n);}</code></pre><p>The function is declared with return type <font class="CVariable">int</font>, which means that it will return an integer value.</p><p>The function name (<b>square</b>) is followed by its argument list in parentheses, arguments separated by commas if there are more than one (there is only one in this case). The argument for <b>square</b> is specified to be an integer and is named <b>n</b>. The data type for each argument is declared in the same manner as declaring the return data type of the function or the data type for a variable.</p><p>When a function declaration specifies arguments, the variable names representing the arguments are local to the function, or stated another way, they are valid only within the "scope" of the function (they only have meaning within the function's block of code).  For this reason, variable names used within the scope of a function will not cause a semantic conflict should their names duplicate those local to some other function.</p><p>The &quot;scope&quot; for the function <b>square</b> is what takes place within the block structure defining its actions (i.e., the contents within the curly braces surrounding its program statements). In this case, the function's actions consist of a single statement; namely, the <font class="CVariable">return</font> statement. The action of the <font class="CVariable">return</font> statement is to exit the function, assigning the value of its argument as the function's return value, in this case the result of the computation <b>n * n</b>.</p><p>Except where grouped by parentheses, expressions are evaluated according to a set of precedence rules associated with the various operators used within the expression. In this case, only the multiplication operator <b>*</b> is employed, so operator precedence is not an issue.</p><p>For a third example, the following program code defines a function which performs a function call to the square program.</p><pre><code><font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b){    <font class="CVariable">double</font> h;    h = sqrt(square(a) + square(b));    <font class="CVariable">return</font>(h);}</code></pre><br><p>The argument list for this function has two arguments, each with integer data type.  Additionally, its block structure includes a statement specifying a "working variable" <b>h</b>.  The data type for <b>h</b> is given as floating point, since the C library function <b>sqrt</b> returns a floating point argument.  If its data type was specified to be integer, the fractional part of any floating point number assigned to it would be lost.  In general, as is the case for <b>h</b>, any local variables used within a program block (indicated by a set of curly braces) are specified at the beginning of the block.</p><p>The value assigned to <b>h</b> is the value returned by calling the <code>sqrt</code> function, which is included from the C math library by KISS and which calculates the mathematical square root of its argument.  <code>sqrt</code> is a built-in C function that takes a floating point number as its argument.</p><p>The <b>hypotenuse</b> function as defined uses the <code>square</code> function defined earlier which returns the square of its argument as an integer. The sqrt function is specified to have a floating point argument. So what happens if <b>sqrt</b> is called with an integer argument instead of floating point?  Answer: C will automatically coerce the integer to a floating point value (which is quite a bit different since it involves both an exponent and a mantissa).  If C's automatic coercion will do the "wrong" thing, it can be bypassed by specifying how the value is to be coerced, which is accomplished by preceding it with the data type in parentheses into which it is to be converted.</p><p>The <b>hypotenuse</b> function concludes by returning the value of <b>h</b>. </p><p>The functions <b>square</b> and <b>hypotenuse</b> still do not constitute a program, since a <b>main</b> function that uses them still needs to be defined.  A complete program using these two functions follows:</p><a name="HypotenuseSquare"></a><pre><code><font class="Comment">/* Extended example: C Programmer's Manual */</font><font class="Preprocessor">#include &lt;math.h&gt;</font><font class="CVariable">int</font> square(<font class="CVariable">int</font> n);<font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b);<font class="CVariable">int</font> main(){    printf(<font class="Quote">"Hypotenuse of a 3,4 right triangle is %d\n"</font>,(<font class="CVariable">int</font>) hypotenuse(3,4)); <font class="Comment">// coerce hypotenuse to int</font>}<font class="CVariable">int</font> square(<font class="CVariable">int</font> n){    <font class="CVariable">return</font>(n * n);}<font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b){    <font class="CVariable">double</font> h;    h = sqrt(square(a) + square(b));    <font class="CVariable">return</font>(h);}</code></pre><p>Program behavior is described by <b>main</b>, which calls the C library function <b>printf</b>, which in turn calls the function <b>hypotenuse</b>, and <b>hyptenuse</b> in turn calls the function <b>square</b> in order to do its calculation.  These calls result in the calculation and printing of the length (truncated to integer) of the hypotenuse of a right triangle by supplying the lengths of its two sides to the <b>hypotenuse</b> function.  Note that the floating point value supplied to <b>printf</b> from <b>hypotenuse</b> is coerced to integer data type, since otherwise <b>printf</b> will print its floating point format as if it were an integer, a semantic error.  The two C statements</p><div class="Indent"><code><font class="CVariable">int</font> square(<font class="CVariable">int</font> n);<font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b);</code></div><p>provide C "prototype" specifications for the <b>square</b> and <b>hypotenuse</b> functions used in the program.  Similar prototypes are automatically supplied by the C preprocessor for the C library's <b>printf</b> and <b>sqrt</b> functions as it prepares the program code for compilation.  The declaration of a function's prototype or actual definition must precede the function's first use in program code so that the compiler will be able to correctly translate statement calling the function.<p>For this example, the definitions of the <b>square</b> and <b>hypotenuse</b> functions follow the defintion of the <b>main</b> function, so the declarations giving their prototypes must be included before the definition of <b>main</b>.  Alternatively, the C preprocessor could be directed to include a file that contains the definitions for <b>square</b> and <b>hypotenuse</b> to reduce the volume of code in the file where <b>main</b> is defined.<p>This concludes the brief C tutorial. </p><!--Data_Objects--><a name="Data_Objects"></a><h2>Data Objects</h2><p>Variables and constants are basic data objects used in a C program. More complex data structures and data types based on basic data objects and types can also be defined.  Specification statements (such as the one used for the variable <b>h</b> in the <b>hypotenuse</b> program above) are used to define the variables the programmer wants to use in a program, and may set variables' initial values as well as specifying their data types.</p><!--Variables--><a name="Variables"></a><h3>Variables</h3><p>Variable names are formed from combinations of lower case letters, capital letters, the decimal digits (0-9), and the underscore character ('_'). There are two restrictions that must be observed in forming the name:<ul><li>a variable name cannot begin with a decimal digit<li> a variable name cannot be a keyword such as <font class="CVariable">if</font>, <font class="CVariable">while</font>, etc.</ul><p>Variables which are specified as function arguments or which are defined within program blocks are called <i>local</i> variables.  Their scope is limited to the structure in which they are defined.  Variables defined at the same level as the <b>main</b> function (i.e., not inside it's block structure) apply across all functions used by the program.  These are called <i>global</i> variables and are used for data structures accessed by more than one function, or for function to function message passing (especially for functions operating in parallel threads).<p>Since functions and global variables are defined at the same level, they must have unique names. The name of a function or a global variable can be used as the name of a local variable, in which case the local use takes precedence; i.e., the scope of the local variable supercedes that of a function or global variable with the same name.</p><!--Declaration--><a name="Declaration"></a><div class="Indent"><h4>Declaration</h4><p>In C, a variable is declared by a specification statement that provides its data type, and optionally its initial value.  Declarations for global variable are normally grouped before the definition of <b>main</b>.  Declarations for local variables are normally grouped at the beginning of the block structure in which they are used.  The general form of a variable declaration is one of the following:</p><ul><li><font face="Courier">&lt;</font>data-type<font face="Courier">&gt;&nbsp;&lt;</font>variable-name<font face="Courier">&gt;; </font><li><font face="Courier">&lt;</font>data-type<font face="Courier">&gt;&nbsp;&lt;</font>variable-name<font face="Courier">&gt;</font>=<font face="Courier">&lt;</font>initialization-data<font face="Courier">&gt;;</font></ul><p><font face="Courier">&lt;</font><a href="KIPRLinkManualBody.htm#Data_Types" target="ManualFrame">data-type</a><font face="Courier">&gt;</font> can be a basic (ordinal) data type such as<font class="CVariable">int</font>, <font class="CVariable">double</font>, <font class="CVariable">char</font>, or a composite data type such as a pointer data type or a user-defined data type.  User-defined data types are based on structures or on enumerated sets.  In particular, a <font class="CVariable">struct</font> definition creates a user-defined data type <font class="CVariable">struct</font><font face="Courier">&lt;</font>struct-name<font face="Courier">&gt;</font>, typically simplified by using <font class="CVariable">typedef</font> to provide the <font class="CVariable">struct</font><font face="Courier">&lt;</font>struct-name<font face="Courier">&gt;</font> data type with a more digestible name.  Just as <font class="CVariable">struct</font> provides a means for defining a data type based on a structure, <font class="CVariable">enum</font> provides a means for defining an enumerated data type based on an enumerated set of names.<!--Local_and_Global_Scopes--><a name="Local_and_Global_Scopes"></a><h4>Local and Global Scopes</h4><p>If a variable is declared within a function, or as an argument to a function, its binding is local, meaning that the variable is available for use only within the context of that function definition. If a variable is declared outside of a function, it is a global variable and is available for use within any function employed by the program, including functions which are defined in files other than the one in which the global variable is declared.  If a global variable represents a complex data structure whose definition would clutter up the main program file, it is sometimes advantageous to define it in a separate file to be included by the C preprocessor in its preparation of the program file for compilation. </p><!--Variable_Initialization--><a name="Variable_Initialization"></a><h4>Variable Initialization</h4><p>The initial value of a local or global variable can optionally be specified in its declaration. If no initialization value is given, the value is indeterminate.  When a global variable is initialized, the initialization value must be a constant. In contrast, local variables may be initialized to the value of arbitrary expressions including any global variables, function calls, function arguments, or local variables which have already been initialized.</p><p>The compilation process translates a program into machine executable form, initializing global variables within the resulting execute module as specified in global variable declarations.  Local variable initialization doesn't take place until program execution enters the block containing them.  The initialization occurs every time program execution enters the block, excepting variables whose declaration is preceded by the word <font class="CVariable">static</font>.  For local variables declared to be <font class="CVariable">static</font>, initialization only takes place the first time the block is entered, after which the variable retains the last value assigned to it as the program execution exits its block.</p><p>A small example illustrating initialization of global and local variables follows:<pre><code><font class="CVariable">int</font> i=50; <font class="Comment">/* global declaration of i as integer; initial value 50 */</font><font class="CVariable">double</font> j=100.123; <font class="Comment">/* global declaration of j as global; initial value 100.123 */</font><font class="CVariable">int</font> function_example(){    <font class="CVariable">int</font> x; <font class="Comment">/* local declaration of x as integer; initial value 0 */</font>    <font class="CVariable">double</font> y=j; <font class="Comment">/* local declaration of y as double; initial value global j */</font>}</code></pre><p>To recap, local variables are not initialized until the function containing them is executed.  The initial value of global variables are part of the compiled version of the program, so global variables revert to their initialized value whenever the program is run.</p><!--Constants--><a name="Constants"></a><h3>Constants</h3><div class="indent"><a name="Integer_Constants"></a><h4>Integer Constants</h4><p>Integers constants may be defined in decimal integer format (e.g., <b>4053</b> or <b>-1</b>) or hexadecimal format using the "<b>0x</b>" prefix (e.g., <b>0x1fffffff</b>).</p><!--Floating_Point_Constants--><a name="Floating_Point_Constants"></a><h4>Floating Point</font> constants</h4><p>Floating point numbers may use exponential notation (e.g., "<b>10e3</b>" or "<b>10E3</b>") or may contain a decimal point. For example, the floating point zero can be given as "<b>0.</b>", "<b>0.0</b>", or "<b>0E1</b>".  If the integer form "<b>0</b>" is used instead, C will automatically coerce it to the internal floating point format used by the system (mantissa and exponent). Sincethe KIPR Link does not have floating point operations integrated into its CPU, floating point operations are handled by software, making them signficantly slower than integer operations (although still fast in human terms). Hence,floating point should only be used for data that is inherently fractional.</p><!--Characters_and_String_Constants--><a name="Characters_and_String_Constants"></a><h4>Characters and String Constants</h4><p>A character constant is given by enclosing the character in single quote marks; e.g., '<b>z</b>'.  Characters are internally encoded in 8-bit bytes using ASCII representation (e.g., the internal ASCII representation of '<b>z</b>' is the (8-bit) hex pair "7A").  </p><p>A character string constant is a sequence of characters enclosed in quotation marks, e.g., <font class="Quote">"This is a character string."</font>.  C processes a character string as (1-dimensional) array delimited by the (unprintable) character constant '<b>\o</b>', which marks the end of the string within the array.</p><p>The character constant <b>'z'</b> cannot be used interchangeably with the string constant <b>"z"</b> since <b>'z'</b> is an 8-bit integer and <b>"z"</b> is a 16-bit string whose first 8-bits are the 8-bits for <b>'z'</b> and the second 8-bits are the 8-bits for <b>'\0'</b>.</p><!--NULL--><a name="NULL"></a><h4>NULL</h4><p>The special constant <b>NULL</b> (a preprocessor macro included implicitly, or explicitly using <font class="Preprocessor">#include &lt;stio.h&gt;</font>) is provided by the C preprocessor to represent a NULL pointer.  In general, a pointer represents the location (or address) of a data structure in memory.  A NULL pointer is one which exists, but which points to nothing.</p><p>A pointer that hasn't been initialized has no semantic meaning, in contrast to a pointer initialized to <b>NULL</b>, which points to nothing (think in terms of the empty set used in mathematics).  To check if a pointer variable is pointing to data you compare its value to <b>NULL</b>.  As an illustration, suppose a linked list data type is defined to have elements with 2 components, the first of which provides a data value and the second of which is a pointer to the next logical element in the list; e.g., the components for element in the list might represent a name, and a pointer to the element containing the next name in the list in alphabetical order. If the list is processed to retrieve the name data in alphabetical order, the last element in the list will need to have <b>NULL</b> assigned to its pointer since there are no more names!  <b>NULL</b> then provides a (testable) pointer component value that identifies the last element in the list.</p></div><!--Data_Types--><a name="Data_Types"></a><h3>Data Types</h3><p>C supports the following data types among others:</p><!--32-bit_Integers--><div class="indent"><a name="32-bit_Integers"></a><h4>32-bit Integers</h4><p>32-bit integers are signified by the data type indicator <font class="CVariable">int</font>. They are signed integers in the (decimal) range -2,147,483,648 to +2,147,483,647.</p><!--32-bit_Floating_Point_Numbers--><a name="64-bit_Floating_Point_Numbers"></a><h4>64-bit Floating Point Numbers</h4><p>Floating point numbers are best specified by the data type indicator <font class="CVariable">double</font>. 64-bit floating point numbers have at least 15 decimal digits of precision and range from about 10^-308 to 10^308.</p><!--8-bit_Characters--><a name="8-bit_Characters"></a><h4>8-bit Characters</h4><p>Characters are 8-bit (unsigned) integers signified by the data type indicator <font class="CVariable">char</font>. A character's value normally represents a standard ASCII character code, most of which are printable.</p><!--Pointers--><a name="Pointers"></a><h4>Pointers</h4><p>A C pointer is a 32-bit number representing the address of a byte location in memory. A pointer can be used to manipulate data stored in memory by performing calculations on, passing, or dereferencing the pointer that represents the location in memory where the information is stored (derefence means to obtain the value stored at the location).</p><a name="Arrays1"></a><h4>Arrays</h4><p>An array is a data structure used to store a sequence of homogeneous data elements (each element of the array must be of the same data type). Every array has a length which is determined at the time the array is declared. The location of an element in an array is given by supplying its index in brackets.  For example, <code>myarray[3]</code> references the fourth element in an array named <b>myarray</b> where indexing starts from 0.  By providing the index, data may be stored in or retrieved from the array in the same manner as for other variables. </p><a name="Structures1"></a><h4>Structures</h4><p>Structures are used to store non-homogenous but related sets of data. Before a structure can be specified, its <font class="CVariable">struct</font> data type must be defined.  Any available data type can be used in its definition, including those that are user defined.  In contrast to arrays, elements of a structure are referenced by name instead of number.  For example, if a <code><font class="CVariable">struct</font> Triangle</code> data type is defined as<pre><code><font class="CVariable">struct</font> Triangle{    <font class="CVariable">double</font> sideA;    <font class="CVariable">double</font> sideB;    <font class="CVariable">double</font> sideC;};</code></pre><p>then <font clase="Cfuntion"><font class="CVariable">struct</font> Triangle x </font> defines a structure named <b>x</b> of data type <font clase="Cfuntion"><font class="CVariable">struct</font> Triangle</font>.  If side A for triangle <b>x</b> is needed, it is referenced by name as <b>x.sideA</b>.</p><p>Since a function can return a <font class="CVariable">struct</font> data type, structures provide a way for a function to return multiple data values.  Structures can also be useful for reducing the number of arguments passed to functions.  More importantly, structures provide a means for creating complex data structure representations such as directed graphs and linked lists.  In the construction of this kind of data structure, structure elements may be dynamically allocated (see <code>malloc</code>) or alternatively, be taken from an array having the <font class="CVariable">struct</font> data type.</p></div><!--Pointers--><a name="PointersM"></a><h3>Pointers</h3><p>A pointer is the (numeric) address of the location in memory where a data element is stored.  Memory addresses begin at 0 and increase by 1 for each byte of memory. Limited arithmetic operations may be performed on pointers, but the value of the resulting pointer depends on the data type pointed to. For example, adding 1 to the pointer for a <font class="CVariable">char</font> data item increases the pointer value by 1 since that advances the pointer to the next character in memory.  In contrast, adding 1 to an <font class="CVariable">int</font> pointer increases its value by 4 since that advances the pointer to the next integer in memory. Using a pointer to try to access memory not allocated to a program will probably cause a system error or crash, so it is important to insure that pointers used in a program address valid objects in memory.</p><p>A pointer data type can be defined for any allowed data type, included user-defined data types.  When used as a unary operator (one argument), <b>*</b> is the indirection (or "value at address") operator, and is used for defining and dereferencing pointer variables.  For example,</p><div class="Indent"><code><font class="CVariable">int</font> *p;</code></div><p>defines <b>p</b> to be a variable whose value is a pointer to a memory location holding an integer. </p><p>When used as a unary operator, <b>&</b> is the memory address operator.  The address of a variable named <b>x</b> is given by <b>&x</b> and so if <b>x</b> is an integer variable,</p><div class="Indent"><code>p=&x;</code></div><p>assigns the memory address of variable <b>x</b> to the (integer) pointer variable <b>p</b>. </p><p>Retrieving the value pointed to is known as <i>dereferencing</i> the pointer and is given by <b>*p</b> for pointer variable <b>p</b>.  For the example above, both variable <b>x</b> and <b>*p</b> represent the same value in memory.  <b>*(p+1)</b> retrieves the (integer) value of the next integer in memory (which is 4 bytes further along than <b>x</b>).  Optionally, <b>*p</b> can be written<p>It is often useful to deal with pointers to objects, but great care must be taken to insure that the pointers used at any point in your code really do point to valid objects in memory.  It is easy to get confused by what a pointer is addressing when it is taken from a complex structure with pointers to pointers or something similar.</p><p>Pointers are often used instead of global variables to provide a function with access to data external to the function. If a pointer is passed to a function as an argument, the function then has access to the memory location for the pointer, which could also represent a local variable external to the function.  If the function uses the pointer to change the value in the memory location, it will also have changed the value of the external local variable, a function action termed a "call by reference."</p><p>The scope of function parameters is local to the function, with values assigned to them only when the function is called, a function action termed "call by value"; i.e., C only directly supports call by value.  Call by reference is achieved by passing in an address value.  Since the value is an address, it serves to allow the program to access and modify data external to the function.</p><p>For additional information on programming with C pointers and the technical terms "call by value", "call by name", and "call by reference", please refer to a C programming book or website.</p><!--Arrays--><a name="Arrays"></a><h3>Arrays</h3><p>Arrays can be defined in C for any supported data type, including user defined data types. The name of an array is actually a pointer to its first element, the one whose index is 0, so passing an array to a function is a call by reference.  Multi-dimensional arrays are defined as arrays of arrays (or arrays of pointers). Arrays are useful for allocating space for many instances of a given data type, arranged sequentially in memory, which provides means for iterating over the set of values in the array. </p><!--Declaring_and_Initializing_Arrays--><a name="Declaring_and_Initializing_Arrays"></a><div class="Indent"><h4>Declaring and Initializing Arrays</h4><p>The definition for an array specifies its data type, name, and index structure, which is given inside square brackets. The following statement declares an array of ten integers:</p><div class="Indent"><code><font class="CVariable">int</font> ex_array[10];</code></div><p>The elements of the array are numbered from 0 to 9. Elements are accessed by enclosing the index number within square brackets; e.g., <b>ex_array[4]</b> denotes the fifth element of the array <b>ex_array</b> (since counting begins at zero).</p><p>Arrays not initialized at declaration contain indeterminate values. Arrays may be fully or partially initialized at declaration by specifying the array elements, separated by commas, within curly braces. If no size value is specified within the square brackets whenthe array is declared but initialization information is given, the size of the array is determined by the number of initialization elements given in the declaration. For example,</p><div class="Indent"><code><font class="CVariable">int</font> ex_array[10]= {3, 4, 5, -8,  17, 301};</code></div><p>initializes the first six elements of <b>ex_array</b>, with <b>ex_array[4]</b> equaling <b>17</b>,<b>ex_array[0]</b> equaling <b>3</b>, etc.</p><p>If a size is specified and initialization data is given, but the length of the initialization data exceeds the specified length for the array, the excess data will be ignored (and the compiler will issue a warning). </p><!--Strings--><a name="CharacterStrings"></a><h4>Character Strings</h4><p>Character strings are implemented as arrays of characters. An array of characters can be initialized character by character, but can also be initialized by using a string constant, for example:</p><div class="Indent"><code><font class="CVariable">char</font> ex_string[]= <font class="Quote">"Hello there"</font>;</code></div><p>This initializes the character array <b>ex_string</b> with the ASCII values of the characters in "<b>Hello there</b>" terminated by the (unprintable) ASCII character <b>'\0'</b>.  The length of the array is 12, which is the number of characters in "<b>Hello there</b>" plus 1 for the <b>'\0'</b> string termination character.  If the array length had been declared to be greater than 12 then the balance of the array would be indeterminate. Note that the <b>printf</b> library function uses a character array argument that is expected to be a character string (i.e., the character array contains <b>'\0'</b>).</p><p>The standard C library has string functions for assigning strings (<b>strcpy</b>), determining string length (<b>strlen</b>), combining strings (<b>strcat</b>), and the like (look for string functions in your C reference).  For example,</p><div class="Indent"><code>strcpy(s,<font class="Quote">"Example string"</font>);</code></div><p>is used to copy the character string in the second argument of <b>strcpy</b> to the character array in the first.</p><p>To make sure that the C preprocessor includes the prototype declarations for the string functions, programs that use them normally have the C preprocessor directive</p><div class="Indent"><font class="Preprocessor">#include &lt;string.h&gt;</font></div><p>at the start of the program code.  This directive, like the <font class="Preprocessor">#include &lt;stdio.h&gt;</font> directive is ignored if it is issued again elsewhere in the program.<p>When a character array is initialized using the curly braces syntax, unless <b>'\0'</b> is included, there is no string delimiter, and printing the array as a character string using <b>printf</b> will produce indeterminate results. When declaring a character array that is intended to hold character strings, the array size needs to be at least 1 larger than the size of the maximum string it will be used for to allow for the <b>'\0'</b> string termination character.  For example, given<div class="Indent"><code><font class="CVariable">char</font> pg_string[81];</code></div><p>strings of length up to 80 can be stored in the variable <b>pg_string</b></p><!--Passing_Arrays_as_Arguments--><a name="Passing_Arrays_as_Arguments"></a><h4>Passing Arrays as Arguments</h4><p>When an array is passed to a function as an argument, the address of the array's initial element is actually passed, rather than the elements of the array, a call by reference as discussed earlier.  Hence there is not a local copy of the array inside the function, and any modifications the function makes to the array are to its location in memory when declared (what is local to the function is the copy of the address of the array's initial element passed as an argument).</p><p>For a function to be able to treat an argument as an array, the argument has to specify the array's data type and index structure.</p><p>As an example, the following function has arguments for an index and and array, printing the array element at the index value.</p><pre><code><font class="CVariable">int</font> print_element(<font class="CVariable">int</font> indx, <font class="CVariable">int</font> arr[]){    <font class="CVariable">printf</font>(<font class="Quote">"Value at index %d is %d\n"</font>, indx, arr[indx]);}</code></pre><p>The use of the square brackets specifies that the argument is a 1-dimensional array of integers.</p><p>Alternatively, since the array name represents a pointer to the first element in the array, the function argument could be specified as pointer variable, in which case the square brackets would be omitted.  In this case, in the body of the function the pointer variable name would be used instead of the array name.  For example, </p><pre><code><font class="CVariable">int</font> print_element(<font class="CVariable">int</font> indx, <font class="CVariable">int</font> *p){    <font class="CVariable">printf</font>(<font class="Quote">"Value at index %d is %d\n"</font>, indx, p[indx]);}</code></pre><p>Either of the following two example calls to the function will work, whichever of the two versions is used:<div class="Indent"><code>    print_element(3, ex_array);<br>    print_element(4, &ex_array[0]); </code></div><!--Multi-dimensional_Arrays--><a name="Multi-dimensional_Arrays"></a><h4>Multi-dimensional Arrays</h4><p>A two-dimensional array is just one-dimensional array whose elements are one-dimensional arrays. For example </p><div class="Indent"><code><font class="CVariable">int</font> k[2][3];</code></div><p>specifies an array of length 2 whose objects are length 3 arrays integers.  <b>k</b> can be viewed as a two-dimensional array with 2 rows and 3 columns, where the first row has as elements <b>k[0][0], k[0][1], k[0][2]</b> and the second the elements <b>k[1][0], k[1][1], k[1][2]</b>.  <b>k[0]</b> and <b>k[1]</b> represent rows of 3 elements each.  Hence, in addition to accessing any element of the array using index bracket notation, any row in the array can be accessed similarly.  Arrays with any number of dimensions can be generalized from this example by adding more brackets in the array declaration.</p></div><!--Structures--><a name="Structures"></a><h3>Structures</h3><p>As noted above, structures are used to store non-homogenous but related sets of data. In order to specify a structure, a <font class="CVariable">struct</font> data type for it must first be defined. Any available data type can be used in the structure definition, including those that are user defined. The elements of a structure are referenced by name to access them.</p><p>Since a function can return a <font class="CVariable">struct</font> data type, structures also provide a way for a function to return multiple (named) data values. However, the primary purpose of structures is to provide a means for creating complex data structure representations such as directed graphs and linked lists.  In the construction of this kind of data structure, structure elements may be dynamically allocated (see <code>malloc</code>) or alternatively, be taken from an array having the <font class="CVariable">struct</font> data type.</p><p>The following example illustrates structure definition, creation of an array of structures, and access to its elements.</p><a name="DisplayStructure"></a><pre><code><font class="Preprocessor">#include &lt;string.h&gt;</font> <font class="Comment">/* make sure the string function declarations are present */</font><font class="CVariable">struct</font> ex_stype <font class="Comment">/* structure definition by struct data type specification */</font>{    <font class="CVariable">int</font> i; <font class="Comment">     // component is an integer named i</font>    <font class="CVariable">char</font> s[81]; <font class="Comment">// component is a string named s</font>};<font class="CVariable">void</font> set_ds(<font class="CVariable">int</font> x, <font class="CVariable">char</font> nm[], <font class="CVariable">int</font> i); <font class="Comment">/* function to assign values for the s and i components in structure ds[x] */</font><font class="CVariable">void</font> show_ds(<font class="CVariable">int</font> x); <font class="Comment">// function to display the elements of structure ds[x]</font><font class="CVariable">struct</font> ex_stype ds[2]; <font class="Comment">/* ds is an array each element of which is an ex_stype structure */</font><font class="CVariable">int</font> main(){    set_ds(0,"one",1); <font class="Comment">/* assign values to the components of structures ds[0] and ds[1] */</font>    set_ds(1,"two",2);    show_ds(0);        <font class="Comment">/* dislay the components of structures ds[0] and ds[1] */</font>    show_ds(1);}<font class="CVariable">void</font> set_ds(<font class="CVariable">int</font> x, <font class="CVariable">char</font> nm[], <font class="CVariable">int</font> i){    ds[x].i=i;            <font class="Comment">/* copy argument i to the i component of structure ds[x] */</font>    strcpy (ds[x].s, nm); <font class="Comment">/* use the string library function strcpy to copy argument nm to the s component of structure ds[x] */</font>}<font class="CVariable">void</font> show_ds(<font class="CVariable">int</font> x){    printf(<font class="Quote">"name %d is %s\n"</font>,ds[x].i,ds[x].s);}</code></pre><p>The first part of the example is the specification of the <font class="CVariable">struct</font> data type used to define the data structure <b>ds</b> used in the program.  The <b>struct ex_stype</b> data type specifies a structure with an integer component <b>i</b> and a string component <b>s</b>.</p><p>A global variable <b>ds</b> is declared as a 2 element array of data type <b>struct ex_stype</b> in the same manner that would be used for any other data type.</p><p>The two functions, <b>set_ds</b> and <b>show_ds</b>, illustrate using the dot operator (<b>.</b>) to assign values to the components of a structure and to access the components of a structure, respectively. For the declaration of variable <b>sx</b></p?<div class="Indent"><code><font class="CVariable">struct</font> ex_stype sx;</code></div><p>the components of the structure <b>sx</b> are <b>sx.i</b> and <b>sx.s</b>. Similarly, for the structure in item x of array <b>ds</b>, the components are <b>ds[x].i</b> and <b>ds[x].s</b>, where the index in square brackets has to be added to identify which of the structures in the array is being accessed.<p>Pointers to <font class="CVariable">struct</font> data types can also be used, just like pointers to any other type. When a pointer is for a <font class="CVariable">struct</font> data type, an "arrow" (<code>-&gt;</code>) notation can be used to access elements of the structure addressed by the pointer; for example,</p><pre><code><font class="CVariable">    struct</font> ex_stype *sptr;    sptr = &amp;dx;    sptr-&gt;i = 10;    strcpy(sptr-&gt;s, <font class="Quote">"example text"</font>);</code></pre><p>The dot operator can be equivalently used, but has the clumsier notation <b>(*sptr).i</b> as opposed to <b>sptr<code>-&gt;</code>i</b>.</p><p>Just as for arrays, only pointers to structures, not the structures themselves, can be passed to or returned from functions.</p><!--Complex_Initialization_examples--><a name="Complex_Initialization_examples"></a><h3>Initialization examples</h3><p>Complex data structures formed as arrays or as structures may be initialized upon declaration with a sequence of constant values contained within curly braces and separated by commas.</p><p>Character arrays may also be initialized as a string from a string of characters enclosed in (double) quote marks.</p><p>In initialization of a one dimensional arrays, the length (inside the square brackets) can be left blank, in which case the allocated length is determined by what is assigned to it.  Multi-dimensional arrays must specify the size of all dimensions after the first when the array is declared. If a length is specified, and initialization data overflows that length, a warning is issued and the excess data is ignored. If the initialization data falls short of the specified size the rest will be indeterminate.</p><p>The following example illustrates a variety of different initializations:</p><pre><code><font class="Comment">/* declare global variables of various types */</font><font class="CVariable">int</font> i = 50; <font class="Comment">/* single basic variable */</font><font class="CVariable">int</font> *ptr = NULL; <font class="Comment">/* single basic pointer variable */</font><font clase="CVariable">int</font> x=1, y, z=3; <font class="Comment">/* multiple basic variables */</font><font class="CVariable">double</font> farr[3]= {1.2, 3.6, 7.4}; <font class="Comment">/* one dimensional array */</font><font class="CVariable">int</font> iarr[5]= {1, 3, 7}; <font class="Comment">/* one dimensional array, last 2 indeterminate */</font><font class="CVariable">int</font> jarr[]= {2, 4, 6, 8}; <font class="Comment">/* one dimensional array, derived length 4 */</font><font class="CVariable">char</font> carr[2][3]={{'a', 'b', 'c'}, {'b', 'd', 'f'}}; <font class="Comment">/* two dimensional array */</font><font class="CVariable">int</font> xarr[2][5]={{1, 2, 3}, {2, 4, 6}}; <font class="Comment">/* two dimensional array, last 3 rows indeterminate */</font><font class="CVariable">int</font> yarr[][2]={{1, 2}, {2, 4}, {3,6}}; <font class="Comment">/* two dimensional array, derived size 3x2 */</font><font class="CVariable">char</font> c[]=<font class="Quote">"A B C"</font>; <font class="Comment">/* string, array size 6=5+1 */</font><font class="CVariable">char</font> sarr[5][10]={<font class="Quote">"a b c"</font>,<font class="Quote">"d"</font>,<font class="Quote">"e f"</font>}; <font class="Comment">/* array of strings, first 6 characters of row 1 initialized, first 2 of row 2, first 4 of row 3, last 2 rows indeterminate */</font><font class="CVariable">struct</font> employee{    <font class="CVariable">char</font> name[31];    <font class="CVariable">double</font> weight;    <font class="CVariable">struct</font> employee</font> *nextrec;  <font class="Comment">/* pointer (self-referential) to the struct for another employee */</font>}<font class="CVariable">struct</font> employee anode = {<font class="Quote">"John Doe"</font>, 165.4, NULL}; <font class="Comment">/* perhaps a linked list node */</font><font class="CVariable">struct</font> elist[2] =    {{<font class="Quote">"JFK"</font>, 163.1, NULL }, {<font class="Quote">"LBJ"</font>}}; <font class="Comment">/* not everything has to be initialized */</font><font class="Comment">/* declare local variables of various types, initialized from global variables */</font><font class="CVariable">int</font> f_locals(){    <font class="CVariable">int</font> x = i; <font class="Comment">/* local x, global i (value 50) */</font>    <font class="CVariable">int</font> y= yarr[2][1]; <font class="Comment">/* local y, global yarr (value 6) */</font>    <font class="CVariable">int</font> *iptr=&amp;i; <font class="Comment">/*  local iptr, address of global i */</font>    <font class="CVariable">struct</font> employee wx={<class="Quote">"Jane Doe"</font>, 115.2, &anode}; <font class="Comment">/* local struct wx, pointed to global anode */</font>    <font class="CVariable">char</font> lc[]=sarr[2]; <font class="Comment">/*  local string lc with initial value "e f" copied from length 4 string stored in sarr[2] */</font>    . . .}</code></pre><!--Statements_and_Expressions--><a name="Statements_and_Expressions"></a><h2>Statements and Expressions</h2><p>C has unary (one argument) and binary (2 arguments) operations for performing actions upon data used in a program. Expressions are combinations using one or more operations. Statements incorporate expressions, assignments, function calls, and control flow constructions to form blocks of code for a C program and are terminated by a semi-colon (<b>;</b>).</p><!--Operators--><a name="Operators"></a><h3>Operators</h3><p>Each of the data types has a set of operators for operations that may be performed on expressions for that data type (e.g., <b>x + y</b> is an expression).</p><!--Integer_Operations--><a name="Integer_Operations"></a><div class="indent"><h4>Integer Operators</h4><p>The following operators are provided for integer data:</p><ul><li><b>Binary</b><ul>      <li><b>Arithmetic</b>: addition <font face="Courier"><b>+</b></font>, subtraction <font face="Courier"><b>-</b></font>, multiplication <font face="Courier"><b>*</b></font>, division <font face="Courier"><b>/</b></font>. </li>      <li><b>Relational (comparison)</b>: greater-than <font face="Courier"><b>&gt;</b></font>, less-than <font face="Courier"><b>&lt;</b></font>, equality <font face="Courier"><b>==</b></font>, greater-than-equal <font face="Courier"><b>&gt;=</b></font>, less-than-equal <font face="Courier"><b>&lt;=</b></font>, modulus <font face="Courier"><b>%</b></font>,. </li>      <li><b>Logical (Boolean)</b>: logical-OR <font face="Courier"><b>||</b></font>, logical-AND <font face="Courier"><b>&amp;&amp;</b></font>, logical-NOT <font face="Courier"><b>!</b></font>.      <li><b>Bitwise</b>: bitwise-AND <font face="Courier"><b>&amp;</b></font>, bitwise-OR <font face="Courier"><b>|</b></font>, bitwise-exclusive-OR <font face="Courier"><b>^</b></font>, bitwise-NOT (one's complement) <font face="Courier"><b>~</b></font>, left shift <font face="Courier"><b><<</b></font>, right shift <font face="Courier"><b>>></b></font>. </li>    </ul></li> <li><b>Unary</b><ul>      <li>integer promotion <font face="Courier"><b>+</b></font>, additive inverse <font face="Courier"><b>-</b></font>, increment (prefix or postfix) <font face="Courier"><b>++</b></font>, decrement (prefix or postfix) <font face="Courier"><b>--</b></font></li>    </ul></ul>In C, an integer treated as a Boolean value represents FALSE if it is 0 and TRUE if it is non-zero.  In determining the result of the logical operation <b>x && y</b>, if x is FALSE. C returns FALSE without checking y since logically this is enough to determine the result has to be FALSE.  Similarly, for <b>x || y</b>, if x is TRUE, C returns TRUE without checking y since the result has to be TRUE.</font>.  In all other cases, the value for both operands is checked.  This can be useful if x is being used as a TRUE/FALSE flag where y has no meaning if x is FALSE.</li></ul><p>Integer promotion is the action of "promoting" an arithmetic operand to a 32 bit integer, similar to type casting or coercion.  Unlike its counterpart, unary <b>-</b>, it is seldom used.</p><!--Floating_Point_Numbers--><a name="Floating_Point_Numbers"></a><h4>Floating Point Operators</h4><p>The following subset of integer operators are provided for floating point data:</p><ul>  <li><b>Arithmetic</b>: addition <font face="Courier"><b>+</b></font>, subtraction <font face="Courier"><b>-</b></font>, multiplication <font face="Courier"><b>*</b></font>, division <font face="Courier"><b>/</b></font>. </li>  <li><b>Relational (comparison)</b>: greater-than <font face="Courier"><b>&gt;</b></font>, less-than <font face="Courier"><b>&lt;</b></font>, equality <font face="Courier"><b>==</b></font>, greater-than-equal <font face="Courier"><b>&gt;=</b></font>, less-than-equal <font face="Courier"><b>&lt;=</b></font>. </li> </ul><p>For the KIPR Link floating point operations are implemented in software, which means they are significantly more resource intensive than integer operations.  For this reason, floating point values should not be substituted for integers in iterative processes (such as a loop counter).</p><p>There is a large selection of math functions in the C library for performing calculations that are inherently floating point.  For example,</p><pre><code><font class="CVariable">double</font> x,y;x = sqrt(2); <font class="Comment">// x is assigned the square of 2</font>x = log(5);  <font class="Comment">// x is assigned the base e logarithm of 5</font>x = log2(8); <font class="Comment">// x is assigned the base 2 logarithm of 5</font>x = exp(3);  <font class="Comment">// x is assigned e cubed</font>x = exp2(3); <font class="Comment">// x is assigned 2 cubed</font>y = pow(x,0.333333); <font class="Comment">// y is assigned the (approximate) cube root of x</font>x = sin(3);  <font class="Comment">// x is assigned the since of 3 (radians)</font></code></pre><p>There are many more functions in each of these categories,plus functions for other kinds of manipulation of floating point data.  The section below for <a href="KIPRLinkManualBody.htm#Functions" target="ManualFrame">KIPR Link Library Functions</a> includes many of these under the "Math" category designation.</p><!--Characters--><a name="Characters"></a><h4>Characters</h4><p>For C, a character is an 8-bit unsigned integer whose value is one of the 256 ASCII character codes (ASCII is the acronym for American Standard Code for Information Interchange).  Integer operations can be performed on character data since if a character variable is used in an integer operation, it is automatically coerced from an 8-bit unsigned integer into a (positive) 32-bit integer for the computation. ASCII encodes 0 ... 9 in order, then later A ... Z in order, and then later a ... z in order, to enable easy alphabatizing using integer comparison. Adding 32 to an upper case character will convert it to lower case.</p><p>When a value is stored into a character variable, it is coerced into an 8-bit character (by truncating the upper bits).  Since character data occurs in 8-bit bytes, character string data is stored in consecutive byte locations in memory; i.e., character data can be used to address and step through memory one byte at a time.</p><!--Compound Assignment Operators--><a name="Compound_Assignment_Operators"></a><h4>Compound Assignment Operators</h4><p>The basic assignment operator is =</font>. The following statement adds 2 to the value of a</font>.</p><div class="Indent">a = a + 2;</div><p>The compound assignment operator <b>+=</b> does exactly the same thing; e.g.,</p><div class="Indent">a += 2;</div><p>could also be used to perform the same operation.All of the following binary operators can be used in a compound assignment:</p><div class="Indent"><b>+, &nbsp;-, &nbsp;*, &nbsp;/, &nbsp;%, &nbsp;&lt;&lt;, &nbsp;&gt;&gt;, &nbsp;&amp;, &nbsp;^, &nbsp;|</b></div><!--Increment_and_Decrement_Operators--><a name="Increment_and_Decrement_Operators"></a><h4>Unary Increment and Decrement</h4><p>The increment operator <b>++</b> increments its operand by 1.  When used prefix (<b>++x</b>) it has a different semantic interpretation then when used postfix (<b>x++</b>). The simple cases<pre><code>x++;++x;x = x + 1;x+=1;</code></pre><p>are all equivalent.</p>When used in a more complex expression, the value of <b>++x</b> and <b>x</b> change <i>before</i> the result is used in the expression. For <b>x++</b>, the value of <b>++x</b> and <b>x</b> change <i>after</i> the result is used in the expression.  For example, for the following constructions using <b>++x</b> and <b>x++</b><p><pre><code>x = 3; printf</font>(<font class="Quote">"%d  %d\n"</font>, x, ++x);x = 3; printf</font>(<font class="Quote">"%d  %d\n"</font>, ++x, x);x = 3; printf</font>(<font class="Quote">"%d  %d\n"</font>, x, x++);x = 3; printf</font>(<font class="Quote">"%d  %d\n"</font>, x++, x);x = 3; printf</font>(<font class="Quote">"%d  %d\n"</font>, x, x+1);</code></pre><p>the displayed text will be<div class="Indent"><code><b> 4  4<br> 4  3<br> 4  3<br> 3  3<br> 3  4</b></code></div><p>Confusing?  You bet, and you also have to know that the arguments of <b>printf</b> are cleared from right to left.  Here's a (long-winded) explanation for how that produces the outcome above is produced by each program line:<dl><dt>Line 1: The <b>++x</b> argument is rightmost and by incrementing beforehand sets the argument value to 4. For the <b>x</b> argument, the value of <b>x</b> was set to 4 in resolving <b>++x</b>.</dt><dt>Line 2: The <b>x</b> argument is rightmost and is 3.  The <b>++x</b> argument is then 4 because the increment occurs beforehand.<dt>Line 3: The <b>x++</b> argument is rightmost and gets the current value 3 of <b>x</b> because the increment occurs afterwards. The new value of <b>x</b> (4) then becomes the value used for the <b>x</b> argument.</dt><dt>Line 4: The <b>x</b> argument is rightmost and is 3. The <b>x++</b> argument sets the value 3 before it increments.</dt><dt>Line 5: The most intuitive case, because it doesn't use <b>++</b>!</dt></dl>The difficulty for explaining what appears at first glance to be straight forward illustrates why the use of these operators in normally limited to the simpler cases.</p></dl><p>The interpretation for a combination such as <b>x+++y</b> is dependent on the compiler being used so such variations are avoided, although not prohibited. [<i>So which is it? <b>(x++)+y</b> or <b>x+(++y)</b>? The answer is probably neither!</i>] </p><p>The decrement operator <b>--</b> decrements its operation by 1.  Its semantics mirror those of <b>++</b>.</p><!--Data_Access_Operators--><a name="Data_Access_Operators"></a><h4>Data Access Operators</h4>Data access operators are ones used to manipulate components of arrays and data structures, or to directly manipulate data via memory addresses.</p><ul><li>The unary reference operator (<b>&amp;</b>) returns the memory address pointing to a variable, array component, structure component, or function regardless of its data type.</li>  <li>The unary deferencing (or indirection) operator (<b>*</b>) applied to a pointer accesses the referenced address as an object for the data type of the pointer, either for assigning a value to it, or for utilizing its value.</li>  <li>The array subscript (<b><code>[ ]</code></b>) brackets operator accesses the component of the array given by the index enclosed within the brackets.</li>  <li>The structure component (<b>.</b>) dot operator accesses, by name, the specified component.  <li>The structure dereference (<b><code>-></code></b>) arrow operator applied to a pointer to the structure accesses the referenced component (by name) of a structure (for structure <b>ds</b> with component named component <b>i</b>, <b>ds.i</b> and <b>(&amp;ds)<code>->i</code></b> are equivalent.</li></ul><!--Precedence_and_Order_of_Evaluation--><a name="Precedence_and_Order_of_Evaluation"></a><h4>Precedence and Order of Evaluation</h4></font><p>As per K & R, the following table summarizes the rules for precedence and associativity for the C operators. Operators listed earlier in the table have higher precedence; operators on the same line of the table have equal precedence.</p><div class="Indent">  <table border="1"><tbody>    <tr>      <td align="center"><b>Operator</b></font></td>      <td>&nbsp; <b>Associativity</font></b>&nbsp;</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> () [] -> .</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ! ~ ++ -- - * &amp; (&lt;</font><font face="Times"><i>type</i></font><font face="Courier">&gt;)  sizeof &nbsp;</font></td>      <td align="center">right to left</font></td>    </tr>    <tr>      <td>&nbsp; <font face="Courier">* / %</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> + -</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> &lt;&lt; &gt;&gt;</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> &lt; &lt;= &gt; &gt;=</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> == !=</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> &amp;</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ^</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> |</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> &amp;&amp;</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ||</font></td>      <td align="center">left to right</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ?:</font></td>      <td align="center">right to left</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> = += -= *= /= %= &= ^= |= <<= >>= &nbsp;</font></td>      <td align="center">right to left</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ,</font></td>       <td align="center">left to right</font></td>    </tr>  </table>  Unary <code>+, -, </code>and <code>*</code> have higher precedence than their binary forms.</div></div><!--Control_Flow--><a name="Control_Flow"></a><h3>Control Flow</h3><p>For computers, the order of execution of machine-level commands stored in memory is sequential, with the exception of commands which redirect the flow of commands to elsewhere in computer memory. This capability is reflected in C programs by control flow statements which serve to redirect the sequential step by step flow the program would follow otherwise.  There are two classes of control flow commands, <i>selection</i> and <i>iteration</i>.  Selection commands use a condition test to determine what statement or block of statements to execute next (<b>if-else</b>, <b>switch</b>, and the ternary operator <b>?:</b>).  Iteration commands use a condition test to determine how many times to repeat the execution of a statement or block of statements (<b>while</b>, <b>for</b>).  C also provides means for exiting a control flow program structure independent of the condition test (<b>break</b>).</p><div class="Indent"><!--Statements_and_Blocks--><a name="Statements_and_Blocks"></a><h4>Statements and Blocks</h4><p>Each C statement is terminated by a semicolon. A program block is a sequence of statements grouped together inside curly braces. Variables may be defined inside a block and are local to the block (their scope does not extend outside of the block). The object for a control flow statement may be a single statement or a block of statements, except for <b>?:</b>, which as an operator applies to expressions rather than statements.</p><!--If-Else--><a name="If-Else"></a><h4>If-Else</h4><p>The <font class="CVariable">if</font> statement is a selection statement for making yes/no and either/or decisions, For an either/or decision, the <font class="CVariable">if</font> statement is paired with an <font class="CVariable">else</font> statement (which can only be used in a pairing with <font class="CVariable">if</font>).<p>The syntax for <font class="CVariable">if</font> is</p><pre><code><font class="CVariable">if</font> (&lt;<font face="Times">expression</font>&gt;)    &lt;<font face="Times">statement or block</font>&gt;</code></pre><p>When paired with <font class="CVariable">else</font> the syntax is<pre><code><font class="CVariable">if</font> (&lt;<font face="Times">expression</font>&gt;)    &lt;<font face="Times">statement or block</font>&gt;<font class="CVariable">else</font>    &lt;<font face="Times">statement or block</font>&gt;</code></pre><p>When the <code>&lt;</code>expression<code>&lt;</code> evaluates as TRUE (i.e., is not equal to zero), then the <code>&lt;</code>statement or block<code>&lt;</code> that follows <font class="CVariable">if</font> is executed.</p><p>When the <code>&lt;</code>expression<code>&lt;</code> evaluates as FALSE (i.e., is equal to 0), then the <code>&lt;</code>statement or block<code>&lt;</code> that follows <font class="CVariable">if</font> is not executed and if there is an <font class="CVariable">else</font> paired with <font class="CVariable">if</font>, then the <code>&lt;</code>statement or block&gt</font>; that follows <font class="CVariable">else</font> is executed.</p><p>In effect, these constructions provide the means for implementing in program logic how similar logic is expressed in English, such as</p><ul><li>"If the fever is over 100F then schedule a doctor's appointment" (yes/no or do/don't do)</li><li>"If the manuscript is acceptable then pay for it, otherwise return it to the author" (either/or)</li></ul><a name="TernaryOperator"></a><h4>Ternary Operator ?:</h4><p>The ternary operator <font class="CFuntion">?:</font> provides a compact means for expressing if-else logic where assignment statements are employed as the if-else actions.  For example, the following <font class="CVariable">if else</font> construction assigns the larger of variables <b>x</b> and <b>y</b> to variable <b>z</b> :<pre><code><font class="CVariable">if</font> (x &gt; y)    z = x;<font class="CVariable">else</font>    z = y;</code></pre><p>This same construction can be implement by using the ternary operator <font class="CFuntion">?:</font> as</p><p><div class="Indent"><code>z = (x > y) ? x : y;</code></div></p>The format is a condition test (<b>x <code>&lt;</code> y</b>) followed by a question mark (<b>?</b>), then the expression (<b>x</b>) to assign to <b>z</b> if the condition evaluates as TRUE separated by a colon (<b>:</b>) from the expression (<b>y</b>) to assign to <b>z</b> if the condition evaluates as FALSE.  Strictly speaking, given the low precedence level of the operator, the parentheses around the condition could be omitted, but are advisable to facilitate identifying the operator's three operands.<!--While--><a name="While"></a><h4>While</h4><p>The <font class="CVariable">while</font> statement in C is the iteration statement most commonly used for managing program loops.  A <i>loop</i> is a sequence of program logic that is repeated multiple times (0 or more); e.g., a loop printing out elapsed time second by second while a button has not been pressed.</p><p>The syntax for a <font class="CVariable">while</font> statement loop is </p><pre><code><font class="CVariable">while</font> (&lt;<font face="Times">expression</font>&gt;)    &lt;<font face="Times">statement or block</font>&gt;</code></pre><p>When the <code>&lt;</code>expression<code>&lt;</code> evaluates as TRUE (i.e., is not equal to zero), then the <code>&lt;</code>statement or block<code>&lt;</code> that follows <font class="CVariable">while</font> is executed, after which the process repeats, starting with evaluation of the <code>&lt;</code>expression<code>&lt;</code> again.</p><p>When the <code>&lt;</code>expression<code>&lt;</code> evaluates as FALSE (i.e., is equal to 0), then the <code>&lt;</code>statement or block<code>&lt;</code> that follows <font class="CVariable">while</font> is not executed and the program moves on to its next statement.</p><p>Note that the loop continues until something happens that causes the <code>&lt;</code>expression<code>&lt;</code> to evaluate as FALSE (e.g., a button is pressed or a counting variable has exceeded its limit).  It is up to the programmer to ensure within the body of the loop (or otherwise) that the condition will eventually be FALSE since otherwise the loop will continue until the program is halted by external intervention.</p><p>A loop that doesn't terminate is termed an <i>infinite loop</i>.  An infinite loop is one that will continue its iteration until the program is halted. An <i>indefinite loop</i> is one whose iteration will continue until some external action occurs (such as a button press).  It is easy to create an infinite loop using <font class="CVariable">while</font>.  For example,<div class="Indent"><code><font class="CVariable">while</font>(1);</code></div><p>forms an infinite loop because the <code>&lt;</code><b>expression</b><code>&lt;</code> for the <b>while</b> is 1 which is always TRUE, and the <code>&lt;</code><b>statement or block</b><code>&lt;</code> is empty (<b>;</b>), providing no means other than a forced program halt to end the ongoing loop iteration (which is repeatedly doing nothing).</p><p>A common error to avoid when programming a <b>while</b> statement loop is exemplified by the following:<pre><code><font class="CVariable">while</font> (i < 10); <font class="Comment">// misplaced semi-colon</font>    x[i++] = i;</code></pre><p>In this case, the misplaced semi-colon for the <b>while</b> has made its <code>&lt;</code><b>statement or block</b><code>&lt;</code> component empty.  Assuming <b>i</b> is less than 10 when the loop starts, this semantic error makes the loop infinite and the program will "hang" at this point, requiring a forced halt to end it.  For ideas on how to locate this kind of semantic error for a program, see the section below on <a href="KIPRLinkManualBody.htm#Program_Debugging" target="ManualFrame">program debugging</a>.</p><!--Break--><a name="Break"></a><h4>Break</h4><p>The <font class="CVariable">break</font> statement in C provides a means for a program to break out of executing statements within a loop structure and proceed with execution of the program statements that come next.  A condition test for <font class="CVariable">break</font> is sometimes used within what would otherwise be an infinite loop to break out of it. The <font class="CVariable">break</font> statement is also used to exit from a <font class="CVariable">switch</font> selection when it is being used to implement the logic of selecting one of several cases to perform.<p>Example >>>>provides an early exit from a<font class="CVariable">while</font>, <font class="CVariable">do</font>-<font class="CVariable">while</font> or<font class="CVariable">for</font> loop.  The break statement can also provide an exit from a<font class="CVariable">switch</font> block.</p><!--For--><a name="For"></a><h4>For</h4><p>The <font class="CVariable">for</font> statement in C is normally used for managing loops that employ an iteration counter.  A <font class="CVariable">while</font> statement loop could also be used for this purpose, but in many cases the program logic is clearer if a <font class="CVariable">for</font> statement is employed to control the loop.</p><p>The syntax for a <font class="CVariable">for</font> statement loop is<pre><code><font class="CVariable">for</font> (&lt;<font face="Roman">expr-1</font>&gt;;&lt;<font face="Roman">expr-2</font>&gt;;&lt;<font face="Roman">expr-3</font>&gt;)    &lt;<font face="Roman">statement or block</font>&gt;</code></pre><p>The behavior of the <font class="CVariable">for</font> statement loop is equivalent to that of the following <font class="CVariable">while</font> statement loop:</p><pre><code>&lt;<font face="Roman">expr-1</font>&gt;; <font class="Comment">// initialize the counter (prime the pump)</font><font class="CVariable">while</font> (&lt;<font face="Roman">expr-2</font>&gt;) <font class="Comment">// has the counter reached its limit? (have we pumped enough in?)</font>{    &lt;<font face="Roman">statement or block</font>&gt;    &lt;<font face="Roman">expr-3</font>&gt;; <font class="Comment">// increment the counter (pump some more in)</font>}</code></pre><p>For example, the following code counts assigns values from 0 to 99 to an integer array</p><pre><code><font class="CVariable">int</font> i, arr[100];<font class="CVariable">for</font> (i = 0; i &lt; 100; i++)    arr[i] = i;</code></pre><!--Switch--><a name="Switch"></a><h4>Switch-Case</h4><p>The <font class="CVariable">switch</font> selection statment for C is used to select one of a series of <font class="CVariable">case</font> targets. The <font class="CVariable">case</font> targets for a <font class="CVariable">switch</font> statement are grouped together  inside curly braces as a program block.  Each <font class="CVariable">case</font> target is followed by a series of C statements which represent that case. The <font class="CVariable">switch</font> selection in effect skips past cases until it reaches the one selected, and program execution continues from there.  If a <font class="CVariable">break</font> statement is in the statements following a <font class="CVariable">case</font> target, then the program exits the <font class="CVariable">switch</font> statement's block at that point, in effect skipping any remaining cases.</p><p><font class="CVariable">if else</font> selection is used to select one of two cases.  <font class="CVariable">switch</font> selection is used to select 0 or more cases.<p>The syntax for a <font class="CVariable">switch</font> statement is as follows:</p><pre><code><font class="CVariable">switch</font> (&lt;<font face="Roman">expression</font>&gt;) <font class="Comment">/* switch to the case target whose &lt;constant&gt; matches the value of the &lt;expression&gt; */</font>{    <font class="CVariable">case</font> <<font face="Roman">constant</font>>:        &lt;<font face="Roman">0 or more C statements</font>&gt;    <font class="CVariable">break</font>; <font class="Comment">/* optional - otherwise, program execution continues with the next case */</font>    &lt;<font face="Roman">additional case targets</font>&gt;    <font class="CVariable">default</font>: <font class="Comment">/* optional target used when selection didn't match any case target */</font>        &lt;<font face="Roman">0 or more C statements</font>&gt;}</code></pre><p>The first <font class="CVariable">case</font> target whose <code>&lt;</code>constant<code>&lt;</code> matches the value of the <font class="CVariable">expression</font> for the <font class="CVariable">switch</font> statement is the one selected. Program execution continues from the selected <font class="CVariable">case</font> target until either a <font class="CVariable">break</font> statement is encountered, or the end of the <font class="CVariable">switch</font> program block is reached. If there is no <font class="CVariable">case</font> match, then the <font class="CVariable">default</font> target is selected. Absent a <font class="CVariable">default</font> target and a <font class="CVariable">case</font> match, the <font class="CVariable">switch</font> program block is skipped.</p><p>Normally, each <font class="CVariable">case</font> is ended with a <font class="CVariable">break</font> statement since the primary purpose of the <font class="CVariable">switch</font> statement is to make the choice of one of several possible cases to execute; for example,</p><pre><code><font class="CVariable">char</font> answer[81];<font class="CVariable">switch</font>(answer[0]){    <font class="CVariable">case</font> 'y':        printf</font>(<font class="Quote">"answer was yes\n"</font>);        <font class="CVariable">break</font>;    <font class="CVariable">case</font> 'n':        printf(<font class="Quote">"answer was no\n"</font>);        <font class="CVariable">break</font>;    <font class="CVariable">default</font>:        printf(<font class="Quote">"answer was not understood\n"</font>);}</code></pre><p>If user input "yes sir" is captured in the character string <b>answer</b>, then the text "answer was yes" will be printed to the screen.  If if was "no sir", then the "answer was no" would have been printed, and if it was "No sir", the text "answer was not understood" would have been printed (since C is case sensitive, 'n' &ne; 'N').<!--Do-While--><a name="Do-While"></a><h4>Do-While</h4><p>The <font class="CVariable">do-while</font> statement in C is less commonly used for controlling loop interation than the <font class="CVariable">while</font> and <font class="CVariable">for</font> statements.</p><p>The syntax of a <font class="CVariable">do</font>-<font class="CVariable">while</font> statement is as follows:</p><pre><code><font class="CVariable">do</font>    &lt;<font face="Roman">statement or block</font>&gt;<font class="CVariable">while</font> (&lt;<font face="Roman">expression</font>&gt;);</code></pre><p>In contrast to the <font class="CVariable">while</font> and <font class="CVariable">for</font> statements, the body of the loop for a <font class="CVariable">do-while</font> statement will be executed at least once since the <code>&lt;</code>expression<code>&lt;</code> controlling loop iteration is evaluated at the end of the loop rather than at its beginning. Sometimes program logic for a loop is best expressed by having the condition test occur at the bottom of the loop.  For example,</p><pre><code><font class="CVariable">do</font>    printf(<font class="Quote">"."</font>);<font class="CVariable">while</font> (seconds() < 5);</code></pre><p>The logic insures that "." will be printed at least once (so something will always be printed), in contrast to</p><pre><code><font class="CVariable">while</font> (seconds() < 5)    printf(<font class="Quote">"."</font>);</code></pre><p>for which nothing will be printed if the value returned by the function <b>seconds</b> already exceeds 5.</p></div><!--Style--><a name="Programming_Style"></a><h2>Programming Style</h2><!--White Space--><a name="White_Space"></a><h4>White Space</h4><p>As noted earlier, the term "white space" references combinations of characters that when printed produce a blank area on the display.  For C, white space is formed by using characters such as spaces, new lines, and tabs.  The white space characters in C are</p><div class="Indent">  <table border="1"><tbody>    <tr>      <td align="center"><b>Character</b></font></td>      <td>&nbsp; <b>Print Action</font></b>&nbsp;</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> ' ' </font></td>      <td align="center">space</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier">  '\n' </font></td>      <td align="center">new line</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> '\t' </font></td>      <td align="center">horizontal tab</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> '\v' </font></td>      <td align="center">vertical tab</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> '\r' </font></td>      <td align="center">carriage return</font></td>    </tr>    <tr>      <td>&nbsp;<font face="Courier"> '\f' </font></td>      <td align="center">formfeed</font></td>    </tr>  </table>  The print result may differ from one display device to another (for example, while '\n' has the same outcome for almost every device, '\r' may behave the same as '\n' for some devices but on others simply reposition printing at the start of the current line).</div><p>The C compiler either ignores white space that is not imbedded inside double quote marks, or collapses it to a single generic white space character for compilation purposes. This means that other than for character strings, white space can be used for things like indentation that improve program readibility.  White space is required where it is needed to separate adjacent objects, but if another separator such as a parenthesis, comma, curly brace, square bracket, semi-colon, etc is present, white space is not required.<!--Indentation--><a name="Indentation"></a><h4>Indentation</h4><p>Good use of indentation offsets program blocks, not only making a program more easily understood, but making it easier to determine if the curly braces are matched and block structures will produce the desired semantic results.  From the C compiler's point of view, </p><pre><code><font class="Comment">/* Simple example: C Programmer's Manual */</font><font class="CVariable">int</font> main(){    printf(<font class="Quote">&quot;Hello, world!/n&quot;</font>); <font class="Comment">/* simple example */</font>}</code></pre><p>and</p><pre><code><font class="Comment">/* Simple example: C Programmer's Manual */</font><font class="CVariable">int</font> main(){printf(<font class="Quote">&quot;Hello, world!/n&quot;</font>);} <font class="Comment">/* simple example */</font></code></pre><p>are equivalent, but it is pretty clear the use of white space to set off the elements of the program in the first version makes it more understandable than for the second.  This distinction becomes even more important when nested selection and iteration statements are being employed.  For an admittedly extreme example, the following construction as presented will compile, but from a human readability point of view is almost incomprehensible:</p><div class="Indent"><code><font clas"Indent"><font class="CVariable">switch</font>(i){<font class="CVariable">case</font> 0:<font class="CVariable">while</font>(j++<100){k++;<font class="CVariable">if</font>(k>10)<font class="CVariable">break</font>;}<font class="CVariable">break</font>;<font class="CVariable">case</font> 1:<font class="CVariable">if</font>(j>50)k--;<font class="CVariable">else</font> <font class="CVariable">while</font>(j-->=0)k++;<font class="CVariable">break</font>;}</code></div><p>In addition to better presenting overall program logic, use of a consistent programming style facilitates debugging programs. Just as writers develop styles intended to make the text they produce more easily read and understood, programmers develop styles for making their programs easier to read and understand, but with the added objective of making them easier to debug.  The KISS IDE program editor provides facilities for automatic indentation that reflects common practice for C programmers.</p><!--Commenting Style--><a name="Commenting_Style"></a><h4>Commenting</h4><p>Comments are the means for programmers to integrate documentation into a program.  The lead comment typically specifies the purpose of the program.  For large projects, it is a common practice to also include a comment on program history, in particular reflecting the changes that have been made to the program, including by who, when, and where in the program.<p><p>Multi-line comments are typically used to offset description and purpose of major program components.  Single-line comments are useful for provide and explanation of logic or reasoning that might be subsequently useful if that part of the program needs to be revisited for debugging or other purposes.</p><!--Program Debugging--><a name="Program_Debugging"></a><h2>Program Debugging</h2><p>Debugging is the process of correcting syntactic and semantic errors found in a program.</p><a name="Syntax_Errors"></a><h4>Syntax Errors</h4><p>The C compiler cannot compile a program that has syntax errors such as a missing semi-colon or other program construction error.  Syntax errors are the ones most easily corrected since the compiler can identify both where they occur and what the problem is.  The KISS IDE lists any syntax errors found during program compilation in an error panel below the program code.  The interface provides the line number and position within the line identifying the location of the error, with a description of the cause of the error. Since the mistake causing the first error listed will typically cause additional syntax errors within the program, it is often the case that correcting the syntax causing the first error will fix the rest.</p><a name="Semantic_Errors"></a><h4>Semantic Errors</h4><p>Just because a program compiles does not mean it will do what is intended, which is termed program semantics.  A semantic error manifests itself during program execution, either because the program crashes or it produces erroneous results.  Semantic errors are caused by errors in program logic or programmer oversights (such as failure to initialize a variable).  They can be difficult to track down because it usually is not clear where in program execution the error occurred.</p><p>For a program which relies on data inputs, determining the presence of semantic errors requires testing the program for a representative set of possible data inputs, including so-called <i>boundary conditions</i>.  For example, if a data input has a range from 0 to 1000, then 0 and 1000 are the boundaries for the data, and one of these, 0, will cause the program to crash if used in the denominator of a division operation.  That means that once the part of the program where the error occurs has been located, program logic has to be adjusted to check the data input to see if it is 0 before using it in the division.  For complex systems, program testing is an ongoing part of the software development cycle.</p><p>Semantic errors that are rare events are difficult to correct, since being able to repeat what causes the error is key to being able to resolve it.  Once a semantic error can be reliably repeated, various techniques are employed to determine the cause and to locate where in the program it occurred.  Only the basic techniques will be covered here, but operating systems provide debugging tools designed to determine the cause of an error and to facilitate locating where in the program code it occurred.</p><a name="printf_debugging"></a><h4>Using printf and Commenting for Diagnostic Purposes</h4><p>For the smaller C programs constructed for environments like the KIPR Link, most semantic errors that occur can be corrected quickly using one or both of the following two approaches.</p><ul><li>For a C program that runs, but produces erroneous output, it is often useful to insert <b>printf</b> statements at various points in the program code to display the value of selected variables to see if their intermediate values are as expected.  For example, in an expression containing the sub-expression <code>(x * y-z)</code>, displaying the values of <b>x, y</b> and <b>z</b> might help discover the sub-expression should have been <code>(x * (y-z))</code>.</li><li>For a C program that crashes, "commenting out" sections of code can be used to locate the part of the program triggering the crash.  Commenting out is relatively straight forward process to implement, because inserting <font class="Comment">//</font> in front of a line of code turns it into a comment (so it will no longer be executed) and whole blocks of code can be commented out by surrounding them using <font class="Comment">/* */</font> comment bracketing.<br><br>What is commented out has to be selected so that the program will still compile. After commenting out sections of the program, if it still crashes when executed, then what was commented out is probably not where the culprit is located.  Including/excluding parts of the code in this manner will usually identify where the problem is occurring so it can be diagnosed and corrected.  Sometimes the best tactic is to comment out a large enough section to eliminate the crash, then reduce the scope of commenting out in small steps until the program crash recurs.</li></ul><p>For larger programs, a system debugging tool such as <b>sdb</b> for Unix may be called for, but has its own command structure that has to be learned to be used effectively.</p><!--Display_Screen_Printing--><a name="Display_Screen_Printing"></a><h2>Display Screen Printing</h2><p>The C function <b>printf</b> is used for printing to the KIPR Link display screen, where print output is wrapped to subsequent lines if too long for the display, and is scrolled upward as the capacity of the screen is exceeded. For controlled printing to the display, the KIPR Link Library additionally includes the <b>display_printf</b> version of <b>printf</b>, which prints starting at a specifed (<b>column,row</b>) position on the KIPR Link display and which doesn't wrap text which exceeds screen width.  The number of rows available for controlled printing is different for the 3 button (A,B,C) version of the KIPR Link program console screen than for the 6 button (X,Y,Z,A,B,C) version.</p><p>The syntax of <code>printf</code> is the following:</p><div class="Indent"><code>printf(&lt;<font face="Roman">format-string</font>&gt, ... );</code></div><p>The <code>&lt;</code>format-string<code>&gt;</code> is a character string which includes 0 or more "%" codes.  For each % code, a corresponding argument is supplied to <b>printf</b> after the <code>&lt;</code> format-string<code>&gt;</code> to provide the value to be formatted and inserted into the print output in place of its % code.<p><p>It is important to note that in resolving % codes <b>printf</b> ignores the data type of the corresponding argument.  In other words, since <b>printf</b> does not require a data type match between an argument and its corresponding % code, the argument will not be automatically coerced as it would be for an assignment statement.  This is particularly important to keep in mind when both integer and floating point values are being used.</p><p>The use of % code formatting is best illustrated by some examples.</p><!--Printing_Examples--><a name="Printing_Examples"></a><h3>Printing Examples</h3><!--Printing_a_message--><div class="indent"><a name="Printing_a_message"></a><h4>Example 1: Printing a message</h4><p>A <b>printf</b> statement employing no % codes simply prints out the <code>&lt;</code>format-string<code>&gt;</code> as a message; for example,</p><div class="Indent"><code>printf(<font class="Quote">"Hello, world!\n"</font>);</code></div><p>The character <b>\n</b> at the end of the string signifies an advance to the next (or new) line for any further printing by the program. When the bottom of the display is reached, the display is scrolled (up) for each line subsequently printed.<!--Printing_a_number--><a name="Printing_a_number"></a><h4>Example 2: Printing an integer</h4><p>In most environments, integers in C are stored in memory as 32-bit 2's complement integers. The % code used to format the corresponding argument as a &plusmn; decimal integer is "%d" (or %i").  For the following example, the value of the variable <b>x</b> is displayed as a decimal integer, with a leading minus sign if the integer is negative:</p><div class="Indent"><code>printf(<font class="Quote">"Value is %d\n"</font>, x);</code></div><p>The code "%d" specifies that the first argument after the initial character string in the argument list for <b>printf</b>  (the variable <b>x</b>) is to be formatted as a &plusmn; decimal integer and inserted in place of "%d" in the printed output.  The length of the formatted output will vary depending on the number.</p><!--Printing_a_number_in_hexadecimal--><a name="Printing_a_number_in_hexadecimal"></a><h4>Example 3: Other integer print formats</h4><p>As already seen, the "%d" code is used to format an argument in &plusmn; decimal integer form.  The "%x" and "%X" codes are used to format an argument in (32 bit) 2's complement form using hexadecimal (hex) digits 0 ..9,A,B,C,D,E,F (each of which represents 4 bits in binary, 0000, 0001, 0010, ..., 1111). Negative 2's complement numbers have a leading 1, so negative 32-bit integers written in hex require 8 hex digits beginning with one of the hex digits 8-F; e.g., -28 when formatted using "%X" is FFFFFFE4.  For positive numbers, the space required will vary unless a % code modifier for length is employed; e.g., using the % code "%8X" for the integer 28 will yield "<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>1C" (8 spaces are consumed).</p><p>It needs to be emphasized that a length modifier represent the minimum amount of space that will be used when the formatted result is inserted in the print line.  If there isn't enough space, <b>printf</b> will use more.</p><p>If the code "%08X" is used instead of "%8X", leading 0's will replace any leading spaces (so using %08X" for the integer 28 will yield "0000001C" as the formatted result).  This applies to "%d" as well; e.g., formatting the numbers -28 and 28 using "%04d" yields as formatted results "-028" and "0028", respectively.  A length specifier is employed when numbers are being printed to line up uniformly in columns.  If you always want the sign of the number printed, not just when it is negative, the code "%+d" forces the sign to be printed as <code>+</code> or <code>-</code>.<p>For example, the <b>printf</b> statement </p><div class="Indent"><code>printf(<font class="Quote">"Values are %d, %X, %04x\n"</font>, -28, -28, 28);</code></div><p>displays the text string</p><div class="Indent"><code>Values are -28, FFFFFFE4, 001c</code></div><p>The third % code in this <b>printf</b> ("%04x") has a length specifier (plus a leading 0's specifier) and lower case is used for the hex digits.  If the value to be formatted requires more space, <b>printf</b> will override the length specifier.  It is up to the programmer when using a length specifier to anticipate number size and make the length specifier sufficiently large.</p><p>Examples 2 and 3 are representative of output formats for integers using <b>printf</b>.  There are additional integer output formats (including ones for representing integers using octal digits and for unsigned integers) described in most C references.</p><!--Printing_a_floating_point_number--><a name="Printing_a_floating_point_number"></a><h4>Example 4: Printing a floating point number</h4><p>The % code used to format the corresponding argument as a floating point number is "%f". In formatting for floating point, <b>printf</b> rounds the fractional part of the number up according to the number of decimal places used (its precision). The default precision is 6 decimal places.  A precision specifier is used to limit this.  For example, "%.2f" limits the precision to 2 decimal places.  For example,</p><div class="Indent"><code>printf(<font class="Quote">"Values are %f, %.2f\n"</font>, 1.266, -1.266);</code></div><p>displays the text string</p><div class="Indent"><code>Values are 1.266000, -1.27</code></div><p>The code "%f" specifies that the first argument after the initial character string in the argument list for <b>printf</b> (1.266) is to be formatted as a floating point number rounded to 6 decimal places and inserted in place of "%f" in the printed output (since 6 decimal places is sufficient, no rounding occurs).  In contrast, the code "%.2f" for the second argument rounds its number (-1.266) to 2 decimal places to yield -1.27.</p><p>There are additional floating point % codes described in C references that are used for formatting very large (or very small) floating point numbers in scientific (exponential) notation (<b>&plusmn;<code>&lt;<font face="Times">mantissa</font>&gt;</code> E &plusmn;<code>&lt;<font face="Times">exponent</font>&gt;</code></b>).</p><!--Printing_character_strings--><a name="Printing_character_strings"></a><h4>Example 5: Printing character strings</h4><p>The % code "%c" is used to format character data.  The % code "%s" is used for character strings, since they are frequently needed for print display. </p><div class="Indent"><code><font class="CVariable">char</font> header[] = <font class="Quote">"Data: "</font>, cs=<font class="Quote">'a'</font>;<br><font class="CVariable">int</font> x=28;<br>printf(<font class="Quote">"%s%c = %d\n"</font>, header, cs, x);</code></div><p>displays the text string</p><div class="Indent"><code>Data: a = 28</code></div><p>where for the printed output "%s" is replaced by the character string at the memory location corresponding to <b>header</b>, "%c" is replaced by the character given by <b>cs</b>, and "%d" is replaced by the &plusmn; decimal representation of the data given by <b>x</b>.</p><!--Printing_using_display_printf--><a name="Printing_using_display_printf"></a><h4>Example 6: Printing using display_printf</h4><p>The function <code><b>display_printf</b></code> is like the standard <code><b>printf</b></code> function except its first two arguments specify the column and row (zero indexed) on the display where printing starts.  The remaining arguments are the same as for <b>printf</b>.  The following example prints</p><div class="Indent"><code>2. KIPR store</code></div><p>starting at column 5 on the 3rd row of the display.  Note that the first row/first column of the display has column index 0 and row index 0.</p><div class="Indent"><code><font class="CVariable">int</font> i = 2;<br><font class="CVariable">char</font> nm[] = <font class="Quote">"KIPR store"</font>;<br>display_printf(4,2,<font class="Quote">"%d. %s   "</font>,i,nm);</code></div><p>The column range for <b>display_printf</b> is 0 - 41.  The row range for the 3 button (A,B,C) case is 0 - 9 and for the 6 button (X,Y,Z,A,B,C) case is 0 - 7.</p><p><b>display_printf</b> does not wrap, truncating strings that go beyond the end of a row on the display.</p><p>The special character '<b>\n</b>' should be avoided when using <b>display_printf</b> since it will have unpredictable effects on what is displayed.</p><p>When repeatedly printing variable data to the same place on the display, care must be taken to add enough spaces to what is printed to clear artifacts from the previous print; e.g., if one of the following was used,<div class="Indent"><code>display_printf(4,2,<font class="Quote">"%d. %s"</font>,i,nm); <font class="Comment">// NO</font><br>display_printf(4,2,<font class="Quote">"%d. %s   "</font>,i,nm); <font class="Comment">// YES</font></code></div><p>then if we had already printed "2. KIPR store" and changed <b>nm</b> to "Staffing" then the first of these would print</p><div class="Indent"><code>2. Staffingre</code></div><p>whereas the second would add enough spaces on the end to clear the artifacts, printing</p><div class="Indent"><code>2. Staffing</code></div></div><!--Formatting_Command_Summary--><a name="Formatting_Command_Summary"></a><h3>printf % Codes Summary</h3><div class="Indent">  <table border="1"><tbody>    <tr>      <td align="center"><b>% Code</b></td>      <td>&nbsp; <b>Associated Data Type</font></b>&nbsp; </font></td>      <td align="center"><b>Format Outcome</b></font></td>    </tr>    <tr>      <td align="center"><code>%d</code></td>      <td align="center"><font class="CVariable">int</font></td>      <td align="center">&plusmn; decimal integer</td>    </tr>    <tr>      <td align="center"><code>%x</code> or <code>%X</code></td>      <td align="center"><font class="CVariable">int</font></td>      <td align="center">&nbsp; 2's complement hexadecimal representation&nbsp; </td>    </tr>    <tr>      <td align="center"><code>%f</code></td>      <td align="center"><font class="CVariable">double</font></td>      <td align="center">&nbsp; &plusmn; number with decimal point&nbsp; </td>    </tr>    <tr>      <td align="center"><code>%c</code></td>      <td align="center"><font class="CVariable">char</font></td>      <td align="center">&nbsp; ASCII character (low byte for <font class="CVariable">int</font>&nbsp; )</td>    </tr>    <tr>      <td align="center"><code>%s</code></td>      <td align="center"><font class="CVariable">char *</font></td>      <td align="center">&nbsp; ASCII characters until '\0' is reached&nbsp; </td>    </tr>   </tbody></table></div><p>There are additional % codes for <code>printf</code> and more complex % code modifiers that can be used in <code>printf</code> statements.  For information on these, see a standard C reference.</p><!--Preprocessor--><a name="Preprocessor"></a><h2>C Preprocessor</h2><div class="Indent"><p>Before the C compiler receives a file, it is first passed through the C preprocessor to prepare the file for compilation. The preprocessor clears away comments, shrinks white space to single characters, and processes any preprocessor directives present in the program.</p><!--Preprocessor_Directives--><a name="Preprocessor_Directives"></a><h3>Preprocessor Directives</h3><p>Preprocessor directives are identified by the "#" symbol and must be the first entry on a line to be recognized by the C preprocessor.</p><p>The two primary preprocessor directive are <font class="Preprocessor">#include</font> for inserting files into the program code and <font class="Preprocessor">#define</font> for defining macros that are expanded wherever their names appear in program code.</p><p>For a macro call to be recognized by the preprocessor, it's definition has to occur at some point earlier in the program.  Macro definitions begin with the macro directive <font class="Preprocessor">#define</font> and are usually grouped together at the beginning of the file in which they appear. The preprocessor will flag a macro definition as being a duplicate if its name is reused for another <font class="Preprocessor">#define</font>.</p><p>Since the programmer may or may not know what <font class="Preprocessor">#define</font> commands appear in a <font class="Preprocessor">#include</font> file, commands are provided to check to see if a macro has already been defined (<font class="Preprocessor">#ifdef</font><code> .. </code><font class="Preprocessor">#endif</font> and <font class="Preprocessor">#ifndef</font><code> .. </code><font class="Preprocessor">#endif</font>).  For example,</p><div class="Indent"><code><font class="Preprocessor">#ifndef PI<br> &nbsp;&nbsp; #define PI 3.1416159<br>#endif</font></code></div><p>When the preprocessor encounters a valid macro name in the program code, the macro is called and its name "expanded" to be replaced by whatever text the macro generates; e.g., when the macro name PI is encountered by the preprocessor it replaces it with the text 3.1416159 (for the C compiler to interpret as a floating point constant).</p><p>The directive <font class="Preprocessor">#undef</font> removes a macro name from the list of defined macros (and otherwise does nothing), which is sometimes employed defensively to guard against the possibility of a macro name which conflicts with that of a function the programmer has defined.  The convention used to minimize the likelihood of this happening is to use only upper case for the names of macros.</p><p>The sequential bypass strategy employed by the C preprocessor precludes iterative loop directives, but a limited if-else selection is provided.  The directive for this purpose, <font class="Preprocessor">#if</font>, employs a condition test with computation limited to integer constants, character constants, comparisons, arithmetic and logic operators, and macros names (which are expanded before the condition test is calculated).  The section of code selected by a <font class="Preprocessor">#if</font> directive consists of the lines of code that follow it, continuing until one of the directives <font class="Preprocessor">#else</font>, <font class="Preprocessor">#endif</font>, or <font class="Preprocessor">#elif</font> is encountered. The section of code selected by a <font class="Preprocessor">#if</font> directive is processed if the preprocessor calculates the value of the condition test to be non-zero; otherwise, the preprocessor omits the section from the code sent to the compiler. The term used to describe this procedure is <i>conditional compilation</i> since the condition test determines whether or not a section of code is sent on to the compiler; for example,</p><div class="Indent"><code><font class="Preprocessor">#define CFLAG 1<br>#if CFLAG==1<br></font> &nbsp;&nbsp; display_printf(1,3,<font class="Quote">"On target  "</font>);<br><font class="Preprocessor">#else</font><br> &nbsp;&nbsp; printf(<font class="Quote">"On target\n"</font>);<br><font class="Preprocessor">#endif</font></font></code></div><p>selects which form of <code>printf</code> to use according to how CFLAG is #defined.</p><p><font class="Preprocessor">#elif</font> has the same interpretation as "else if" and requires a condition test.  The section of code selected by <font class="Preprocessor">#elif</font> is terminated by any one of <font class="Preprocessor">#else</font>, <font class="Preprocessor">#endif</font>, or <font class="Preprocessor">#elif</font> also.</p><p><font class="Preprocessor">#else</font> has the same interpretation as "else", with its section of code terminated only by <font class="Preprocessor">#endif</font>.</p><p>The sections of code selected by the two directives <font class="Preprocessor">#ifdef</font> and <font class="Preprocessor">#ifndef</font> discussed earlier can be terminated by <font class="Preprocessor">#else</font> or <font class="Preprocessor">#elif</font> as well as <font class="Preprocessor">#endif</font>.</p><p>Preprocessor macros can be used to associate a name with a constant that appears in multiple places in code (e.g., PI or LMOTOR), to simplify a C function call, or to provide a debugging capability that can be turned on or off by use of conditional compilation, among many other possibilities.</p><!--Preprocessor_Include--><a name="Preprocessor_Include"></a><h3>Preprocessor Include</h3><p>The preprocessor <font class="Preprocessor">#include</font> directive is used to insert either a system file or a user defined file into program code.</p><p>If the file name for a <font class="Preprocessor">#include</font> directive is enclosed in "pointy brackets" (<code>&lt; &gt;</code>) then the preprocessor searches for the file in the system's directory of include files. Files in the system's directory of include files generally contain function prototypes for pre-compiled functions located in the C function library.  These files may or may not be automatically included as part of the compilation process, in which case it is up to the programmer to provide <font class="Preprocessor">#include</font> directives any additional ones needed.  Note that just like any other prototype, the prototypes for functions from the C function library must precede first use in program code.</p><p>If the file name for <font class="Preprocessor">#include</font> directive is enclosed in (double) quote marks, then the preprocessor searches for the file in the user's file space.  Unless the file is located along the user's file path, the path information for locating the file must also be included (e.g., for a USB stick).  The contents of the file can be anything, and will be passed through the C preprocessor while being inserted,which will process any preprocessor directives in the file.</b><p>Compiler errors such as duplicate global variable names may occur from use of the <font class="Preprocessor">#include</font> directive. Similarlly, preprocessor errors such as a duplicated <font class="Preprocessor">#define</font> may occur.  System include files employ the preprocessor directive <font class="Preprocessor">#ifdef</font> to avoid duplicating the name for a <font class="Preprocessor">#define</font> directive, which allows their inclusion across multiple user files for a program formed from multiple files.</p><p>The following provides an example of each kind of <font class="Preprocessor">#include</font> directive:</p><div class="Indent"><code><font class="Preprocessor">#include &lt;stdio.h&gt;</font> <font class="Comment">/* insert function prototypes for system I/O functions */</font><br><font class="Preprocessor">#include "mylib.c"</font> <font class="Comment">// insert my function library </font></code></div><p>A few of the more commonly used system include (or header) files for providing definitions for pre-compiled functions drawn from the C library are</p><div class="Indent"><code>&lt;stdlib.h&gt;&nbsp;</code>  [numeric conversion, memory allocation, functions such as <code>rand</code>]<br><code>&lt;stdio.h&gt;&nbsp;&nbsp;</code>  [I/O functions such as <code>printf</code>]<br><code>&lt;math.h&gt;&nbsp;&nbsp;&nbsp;</code>  [math functions such as <code>sqrt</code>]<br><code>&lt;string.h&gt;&nbsp;</code>  [string functions such as <code>strcpy</code>]<br><code>&lt;time.h&gt;&nbsp;&nbsp;&nbsp;</code>  [date and time functions such as <code>time</code>]<br><code>&lt;stdarg.h&gt;&nbsp;</code>  [functions with varying number of arguments (i.e., ones using the <code>...</code> argument)]</div><p>Depending on the target selected, the KISS IDE may or may not automatically include the definition for a given library function.  System include files use <font class="Preprocessor">#ifdef</font> to avoid duplicate definition errors since the source code for many C functions <font class="Preprocessor">#include</font> system header files for library functions employed in their code.</p><!--Preprocessor_Macros--><a name="Preprocessor_Macros"></a><h3>Preprocessor Macros</h3><p>The <font class="Preprocessor">#define</font> preprocessor directive specifies a macro definition.  The macro definition is limited to one line of code (of indefinite length). Once defined the macro will be expanded wherever it occurs in subsequent program code.</p><p>Macros are often used to provide replacement text, where the macro provides a more meaningful name; e.g., </p><div class="Indent"><code><font class="Preprocessor">#define RIGHT_MOTOR 0 <font class="Comment">// equate RIGHT_MOTOR with 0</font><br>#define POWER  90 <font class="Comment">// equate POWER with 90</font></font></code></div><p>If the motor command</p><div class="Indent"><code>motor(RIGHT_MOTOR, POWER);</code></div><p>is used in subsequent code, the preprocessor will expand the RIGHT_MOTOR and POWER macros, replace them with 0 and 90, respectively, so the code as prepared for compilation becomes</p><div class="Indent"><code>motor(0, 90);</code></div><p>Global variables could also be used to provide meaningful names for quantities, but preprocessor macros produce slightly more efficient code.  The primary advantage in either case is that if testing shows that the motor port or power needs to be changed, it only needs to be changed at one place in the program.</p><p>The definition of a preprocessor macro can also specify one or more arguments to be used in expanding the macro. For example,</p><div class="Indent"><code><font class="Preprocessor">#define GO_RIGHT(power) motor(RIGHT_MOTOR,power)</font></code></div><p>defines a macro GO_RIGHT that takes an argument (<b>power</b>) and uses the macro RIGHT_MOTOR in its definition.</p><p>If <code>GO_RIGHT(85)</code> appears in program code, it will expand to <code>motor(RIGHT_MOTOR(85)</code> which will then expand to <code>motor(0,85)</code> to be the code prepared for compilation</p><p>Superficially, invocations of macros without arguments look like global variable references and invocations of macros with arguments look like calls to functions. However, macro expansion occurs during preprocessing that prepares a program for compilation, where as global references and function calls occur at run time after compilation. Also, function callsevaluate their arguments as they are called, whereas macros arguments only provide text replacement.</p><p>Appropriate use of macros can make it easier to follow the C program logic and can be used to facilitate program testing and modification.</p><!--Conditional_compilation--><a name="Conditional_compilation"></a><h3>Conditional Compilation</h3><p>The C preprocessor can be used to select code to be compiled based on logical conditions in preparing a program for compilation.  This is called <i>conditional compilation</i>. Conditional compilation is used to select the code that is to be incorporated into a program based on a condition test. For example, unless a macro named DEBUG has been defined, the precompiler can omit code whose only purpose is for debugging.  In particular,<div class="Indent"><code><font class="Preprocessor">#ifdef DEBUG</font><br> &nbsp; printf</font>(<font class="Quote">"Going Left\n"</font>);<br> &nbsp; beep</font>();<br><font class="Preprocessor">#endif</font></code></div><p>generates the debugging <b>printf</b> and <b>beep</b> only if DEBUG has been defined, in which case the message "Going Left" will be printed and KIPR LINK will beep when program execution reaches this part of its code. If DEBUG is not defined, the preprocessor will leave the code out and the debugging alert will not occur as the program executes.<p>Macros can also be conditionally defined; for example, the somewhat more sophisticated debugging macro definition</p><div class="Indent"><code><font class="Preprocessor">#ifdef DEBUG <font class="Comment">/* if DEBUG is defined, SHOW(printf("%d",i) generates DEBUG code */</font><br> &nbsp; #define SHOW(x) printf("DEBUG: "); x <font class="Comment">/* if case: SHOW macro is defined to generate code */</font><br>#else  <font class="Comment">/* if DEBUG is not defined, SHOW(printf("%d",i) generates nothing */</font><br> &nbsp; #define SHOW(x) <font class="Comment">/* else case: SHOW macro is defined to generate nothing */</font><br>#endif</font></code></div><p>defines a SHOW macro in one of two ways, either to produce debugging <b>printf</b> statements from its argument, or to produce nothing, regardles of argument.</p><p>SHOW <b>printf</b> debugging statements incorporated into a program are turned them on by adding a <font class="Preprocessor">#define DEBUG</font> directive, where debugging is deactivated by commenting out the <font class="Preprocessor">#define DEBUG</font> directive.  In particular, the code</p><div class="Indent"><code>SHOW(printf(<font class="Quote">"%d\n"</font>,i);)</code></div><p>inserted into a program will either be expanded by the preprocessor to produce the code</p><div class="Indent"><code>printf(<font class="Quote">"DEBUG: "</font>); printf(<font class="Quote">"i=%d\n"</font>,i);)</code></div><p>or will be expanded to produce no code at all, depending on whether or not DEBUG has been defined.</p><p>If the value of <b>i</b> = 8 and DEBUG has been defined, the expansion of SHOW above will generate code which outputs the debugging display "<code>DEBUG: i=8</code>".</p><!--Math_Functions--><a name="C_Math_Library"></a><h2>The C Library Math Functions</h2><p>The standard C library has a large number of precompiled math functions. <code><font class="Preprocessor">#include &lt;math.h&gt;</font></code> provides the function prototypes for the math functions that operate on floating point numbers, which is most of them. <font class="Preprocessor">#include  &lt;stdlib.h&gt;</font></code> provides the function prototypes for those which operate on integers. Arguments for trigonometric functions use radian measure for angles rather than degrees (1 degree is 2&pi;/360 radians).  For more information about what math functions are available, consult a C reference.</p><table>  <tbody>    <tr>      <td><a name="atan"></a>      </td>      <td><code>atan &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> <code>atan</code>(<font class="CVariable">double</font> angle);</code><br>		  Returns the arc tangent of the angle. Angle is specified in radians; the result is in radians.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="cos"></a>      </td>      <td><code>cos &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> <code>cos</code>(<font class="CVariable">double</font> angle);</code><br>		  Returns cosine of angle. Angle is specified in radians; result is in radians.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="exp"></a>      </td>      <td><code>exp &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> <font class="CFunction">exp</font>(<font class="CVariable">double</font> x);</code><br>		  Returns e<sup>x</sup> (e is the Euler constant, the base for the natural logarithm of a number).</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="exp10"></a>      </td>      <td><code>exp10 &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> <font class="CFunction">exp10</font>(<font class="CVariable">double</font> x);</code><br>		  Returns 10<sup>x</sup>.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="log"></a>      </td>      <td><code>log &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> log(<fontclass="CVariable">double</font> x);</code><br>		  Returns log<sub>e</sub>(x), the natural logarithm of x.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="log10"></a>      </td>      <td><code>log10 &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> log10(<font class="CVariable">double</font> x);</code><br>		  Returns log<sub>10</sub>(x), the base 10 logarithm of x.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="pow"></a>      </td>      <td><code>pow &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> pow(<font class="CVariable">double</font> x, <font class="CVariable">double</font> y);</code><br>		  Returns x<sup>y</sup>.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="rand"></a>      </td>      <td><code>rand&nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">int</font> rand();</code><br>		  Returns a (pseudo) random integer between 0 and a very large integer established on system installation, drawn from the (pseudo) random number stream initiated at start of program execution according to a "seed" value.  <code>rand()%m </code> restricts the range from 0 to m-1.  <code>srand</code> is used to re-seed random number generation to vary the random number stream used.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="sin"></a>      </td>      <td><code>sin &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> sin(<font class="CVariable">double</font> angle);</code><br>		  Returns the sine of angle. angle is specified in radians; result is in radians.</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="sqrt"></a>      </td>      <td><code>sqrt  &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> sqrt(<font class="CVariable">double</font> x);</code><br>		  Returns &radic;<span style="border-top: 1px solid #000000; font-size: 15px;">x</span>, the square root of x.</dd>        </dd></dl>      </td>    </tr>      <td><a name="srand"></a>      </td>      <td><code>srand &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">void</font> srand(<font class="CVariable">int</font> num);</code><br>		  Re-seeds (pseduo) random number generation (the initial seed at start of program execution is <code>srand(1)</code>).  Unless it is desirable that a random number stream be reused, the seed value used should be unpredictable from one run to the next.  The usual way to accomplish this is to draw a value from the system clock to use as seed; e.g., <code><font class="CVariable">int</font> seednum = time(NULL);</code>. (the time function is declared in system include file <code>&lt;time.h&gt;</code> and if used with a NULL operand returns elapsed time in (whole) seconds since system start).</dd>        </dd></dl>      </td>    </tr>    <tr>      <td><a name="tan"></a>      </td>      <td><code>tan &nbsp;&nbsp;&nbsp;</code>[Category: Math]        <dl><dd>          Format: <code><font class="CVariable">double</font> tan(<font class="CVariable">double</font> angle);</code><br>		  Returns the tangent of angle</font>. angle is specified in radians; result is in radians.</dd>        </dd></dl>      </td>    </tr>   <tr>   </tbody></table><!--The_Link_Library_File--><a name="USB_stick"></a><h2>File I/O for a USB Flash Drive Plugged into the KIPR Link</h2><p>Before the Linux operating system can access a file system, it has to "mount" the file system.  When a USB flash drive is plugged into the KIPR Link, it is automatically mounted.  When the USB flash drive is unplugged it is automatically unmounted.  The C Library has a number of functions designed to access files located in mounted file systems.  The library functions <code>fprintf</code> and <code>fscanf</code> respectively provide a straight forward means for writing formatted output to a file on a USB drive plugged into the KIPR Link, and for reading formatted data from a file on the USB drive.  There are a number of file processing commands, including ones for accessing files byte by byte.  For a full description of the range of functions available consult a standard C reference book. </p><p>To access a file, in addition to the file name, the directory "path" leading to the file has to be known.  For the KIPR Link, the directory path to a mounted Flash drive in a USB port is</p><div class="Indent"><code>/kovan/media/sda1/</code></div><p>Files are accessed in C via a pointer of type FILE, which is defined in the system header file <code>&lt;stdio.h&gt;</code>.  The pointer for a file is established when the file is "opened" for access.  If the <code>fopen</code> function returns a NULL pointer, it indicates that either the file doesn't exist for the specified file path, or its file system hasn't been mounted (e.g., the USB drive has not been plugged in).  Both cases are illustrated in the following program for a USB drive plugged into a KIPR Link.  The example otherwise is a program designed to send data to a file, close the file, then reopen the file and retrieve the data to verify a successful write operation.  If the file doesn't exist it is created.  If it does exist, it is appended to.  A user defined preprocessor macro (USB) is constructed to set the file path for the USB drive, illustrating how the preprocessor can be used to potentially simplify program code.</p><a name="LinkFileExample"><pre><code><font class="Preprocessor">#include &lt;stdio.h&gt;</font>  <font class="Comment">// make sure file I/O is defined</font><font class="Comment">/* USB is a Macro defined to preface a file name with the directory path for a mounted USB drive, turning the result into a character string */</font><font class="Preprocessor">#ifndef USB</font>   <font class="Comment">/* An auxiliary macro is employed that converts its argument into a string (by surrounding it with double quote marks) */</font>   <font class="Preprocessor">#define _STRINGIFY_(x) #x</font>   <font class="Comment">/* the USB macro appends x to the path for the USB drive, then uses _STRINGIFY_ to turn it into a string  */</font>   <font class="Preprocessor">#define USB(x)  _STRINGIFY_(/kovan/media/sda1/x)</font><font class="Preprocessor">#endif</font><font class="CVariable">int</font> main() {   FILE *f; <font class="Comment">// file pointer f (the FILE data type is in &lt;stdio.h&gt;)</font>   <font class="Comment">// A file name "myUSBfule" for the USB drive is set up using macro USB</font>   <font class="CVariable">char</font> s[81], chkf[] = USB(myUSBfile); <font class="Comment">// set up the file path in a string variable</font>   <font class="CVariable">int</font> x, data = 2;   <font class="Comment">// try opening for read ("r") to see if the file exists</font>   <font class="CVariable">if</font> ((f = fopen(chkf,<font class="Quote">"r"</font>)) != NULL) {      fclose(f); <font class="Comment">// file chkf already exists</font>      printf(<font class="Quote">"Will be appending to USB %s\n"</font>, chkf);   }   <font class="Comment">// (chkf is not open at this point)</font>   <font class="Comment">// open to append ("a"), which also tests if the USB stick is plugged in</font>   <font class="CVariable">if</font> ((f = fopen(chkf,<font class="Quote">"a"</font>)) == NULL) {      printf(<font class="Quote">"No USB stick detected\n"</font>);      return -1; <font class="Comment">// exit the program</font>   }   <font class="Comment">// file is now open for append; if it didn't exist it has been created</font>   printf(<font class="Quote">"Sending %s, %d\n"</font>, <font class="Quote">"Field "</font>, data);   fprintf(f,<font class="Quote">"Field "</font>); <font class="Comment">// use fprintf to send a text string to chkf</font>   fprintf(f,<font class="Quote">"%d"</font>,data); <font class="Comment">// now send formatted numeric data using fprintf</font>   fclose(f); <font class="Comment">// close the file to make sure the output is sent</font>   <font class="Comment">// now read it back</font>   f = fopen(chkf,<font class="Quote">"r"</font>); <font class="Comment">// it exists since we just created it</font>   fscanf(f,<font class="Quote">"%s %d"</font>,s, &x); <font class="Comment">// read the two data items from the file</font>   fclose(f); <font class="Comment">// done with file, so close it</font>   printf(<font class="Quote">"Data read is %s: %d\n"</font>, s, x);}</code></pre><p>The USB drive can now be removed from the KIPR Link.  If not already present, there will now be a file named <code>myUSBfile</code> on the USB drive, which can be read using a text processor to confirm the write operation was successful.<!--The_Link_Library_File--><a name="The_Link_Library_File"></a><h2>The KIPR Link Library File</h2><p>The KIPR Link Library provides pre-compiled functions for employing the features of the KIPR Link or the KIPR Link simulator. The prototype declarations for these functions are automatically included by the C preprocessor if the KISS IDE target selection for a program is the KIPR Link or the simulator.</p><!--Commonly_Used_Link_Library_Functions--><a name="Commonly_Used_Link_Library_Functions"></a><h3>Refresher for Commonly Used KIPR Link Library Functions</h3><p>The most commonly used KIPR Link Library functions for robot control are ones for accessing sensor ports, operating DC motors, and suspending a program while a motor action is in progress.  A quick refresher for the ones typically used follows:</p><table style="background-color: #f0f0f0;"><tr><td><br><div class="Indent"><code><a name="display_printfx"></a>display_printf(&lt;col&gt;, &lt;row&gt;, &lt;printf-argements&gt;);</code>    <dl><dd>The purpose of this function is to display formatted output at a specific (column, row) location on the KIPR Link program console screen using standard <code>printf</code> formatting. The column range for the display is 0 to 41.  For the 3 button (A,B,C) console display, the row range is 0 to 9, and for the 6 button (X,Y,Z,A,B,C) console display, the row range is 0 to 7.  Excess data printed to a row is truncated (i.e. text does not wrap). Printing "<code>\n</code>" using <code>display_printf</code> will cause undesired display results.</dd></dl><code><a name="digitalx"></a>digital(&lt;port#&gt);</code>    <dl><dd>For a switch plugged into the port, returns 0 if the switch is open and returns 1 if the switch is closed.  Digital ports are numbered 8-15.  Typically used with button (switch) sensors employed in bumpers or to detect limit of travel.  Will also work with sensors having an analog response by interpreting the voltage reading as 0 or 1.</dd></dl><code><a name="analogx"></a>analog10</font>(&lt;port#&gt;);</code>    <dl><dd> For an analog sensor plugged into the port, returns a value scaled to the range 0-1023 representing the analog voltage variation produced by the sensor. Analog ports are numbered 0-7. Light sensors and range finders are examples of sensors used in analog ports.  For some sensors, in particular, the "ET" distance sensor used for robotics, the port's pull up resistor (enable by default) has to be disabled for the analog values to be meaningful (see the function <code>set_analog_pullup</code>).</dd></dl><code><a name="msleepx"></a>msleep</font>(&lt;int_msecs&gt;);</code>    <dl><dd>Causes the function to pause for the specified number of milliseconds (motor action continues).</dd></dl><code><a name="mavx"></a>mav</font>(&lt;motor_#&gt;, &lt;vel&gt;);</code>    <dl><dd>Turns on the specified motor port, maintaining the specified motor velocity using PID (proportional, integral, derivative) motor control. The motor number is an integer in the range 0 to 3. Motor velocity is an integer between -1000 and 1000 where 0 means the motor is off and negative numbers direct the motor to run in the reverse direction for how it is plugged into the motor port.</dd></dl><code><a name="motorx"></a>motor</font>(&lt;motor_#&gt, &lt;motor_power&gt;);</code>    <dl><dd>Turns on the specified motor port at the PWM power level specified, where a positive power value operates the motor in the direction as <code>fd</code> and a negative value operates it in the reverse direction. The motor number is an integer in the range 0 to 3. The power setting is -100 to 100 representing percentage of full power. Motor response with respect to power is non-linear (i.e., doubling power does not double motor velocity). Moreover, motor velocity for a power setting varies according to load. In contrast, PID motor control varies the PWM power applied to try to establish and maintain a specified motor velocity.</dd></dl><code><a name="fdx"></a>fd</font>(&lt;motor_#&gt;);</code>    <dl><dd>Turns of the specified motor port at maximum PWM (pulse width modulation) power for the motor's forward direction for how the motor is plugged in. The motor number is an integer between 0 and 3</dd></dl><code><a name="bkx"></a>bk</font>(&lt;motor_#&gt;);</code>    <dl><dd>Turns of the specified motor port at maximum PWM (pulse width modulation) power for the motor's reverse direction for how the motor is plugged in. The motor number is an integer between 0 and 3</dd></dl><code><a name="offx"></a>off</font>(&lt;motor_#&gt;);</code>    <dl><dd>Turns off the specified motor port.  Once a motor port is turned on, a motor plugged into the port will continue operating until turned the motor port is turned off or the program terminates (which turns off all motor ports).</dd></dl><code><a name="aox"></a>ao</font>();</code>    <dl><dd>Turns all motor ports off.</dd></dl></code></div><p></td></tr></table><!--Functions--><a name="Functions"></a><h3>KIPR Link Library Functions</h3><p>The following is a comprehensive list of the pre-compiled functions provided by the KIPR Link Library.  Functions specific to controlling a Create Module and for utilizing a USB camera plugged into the KIPR Link are presented separately.</p><table>  <tbody>    <tr>      <td><a name="a_button"></a></td>      <td><code>a_button &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> a_button();</code><br>              Returns the state of the A button on the KIPR Link program console (1 if pressed, 0 otherwise).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="a_button_clicked"></a></td>      <td><code>a_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> a_button_clicked();</code><br>            Returns the state of the A button on the KIPR Link program console (1 of pressed, 0 otherwise).  Continued function execution is blocked while the button is pressed. The construction            <dl><dd><code><font class="CVariable">while</font> (a_button()==0) {</code><br>              <font class="CVariable">while</font> (a_button()==1); ...}              <font class="Comment"> //debounce A button</font></code></dd>            </dl>            is equivalent to            <dl><dd><code><font class="CVariable">while</font><code> (a_button_clicked()==0) {...}</code></dd>            </dl></dd>        </dl>      </td>    </tr>    <tr>      <td><a name="accel_x"></a></td>      <td><code>accel_x &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> accel_x();</code><br>              Returns the value of the accelerometer in its x direction relative to the horizontal plane of the Link (left - right).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="accel_y"></a></td>      <td><code>accel_y &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> accel_y();</code><br>              Returns the value of the accelerometer in its y direction relative to the horizontal plane of the Link (forward - back).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="accel_z"</a></td>      <td><code>accel_z &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> accel_z();</code><br>              Returns the value of the accelerometer for its vertical, or z direction, relative to the horizontal plane of the KIPR Link (up - down).  When the Link is horizontal it is calibrated to have a value corresponding to the gravitational constant G (your acceleration to towards the center of the Earth that keeps you from flying off of the planet).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="alloff"></a></td>      <td><code>alloff &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font>&nbsp;&nbsp;alloff();</code><br>              Turns off all motor ports. <font class="CFunction">ao</font> is a short form for <font class="CFunction">alloff</font>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="analog"></a></td>      <td><code>analog &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> analog(<font class="CVariable">int</font> p);</code><br>              8-bit version of analog10 for backward compatibility.  Returns the value of the sensor plugged into analog port p scaled as an integer between 0 and 255. Analog ports on the KIPR Link are numbered 0 through 7.</dd>        </dl>      </td>    </tr>    <tr>       <td><a name="analog10"></a></td>      <td><code>analog10 &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> analog10(<font class="CVariable">int</font> p);</code><br>              Returns the value of the sensor plugged into analog port p scaled as an integer between 0 and 1023. Analog ports on the KIPR Link are numbered 0 through 7. Each analog port on the KIPR Link has a selectable pullup resistor,  enabled by default since many analog sensors do not have this component built in, although some do (such as the "ET" range finder). For a sensor such as the ET sensor, the values returned by <code>analog10</code> will be unsatisfactory unless the pullup resistor for its port is disabled. The library function <code>set_analog_pullup</code> is used for disabling (or re-enabling) the pullup resistor for an analog port.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="any_button"></a></td>      <td><code>any_button &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font>&nbsp;&nbsp;<font class="CFunction">any_button()</font>();</code><br>			  Returns 1 if any button (A,B,C,X,Y,Z,Side) is pressed.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="ao"></a></td>      <td><code>ao &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> ao();</code><br>              Turns off all motor ports (same as <code>alloff</code).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="b_button"></a></td>      <td><code>b_button &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">b_button</font>();</code><br>              Returns the state of the B button on the KIPR Link program console (1 if pressed, 0 otherwise).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="b_button_clicked"></a></td>      <td><code>b_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> b_button_clicked();</code><br>              Returns the state of the B button on the KIPR Link program console (1 of pressed, 0 otherwise).  Continued function execution is blocked while the button is pressed. The construction              <dl><dd><code><font class="CVariable">while</font> (b_button()==0) {</code><br>                <font class="CVariable">while</font> (b_button()==1); ...}                <font class="Comment"> //debounce B button</font></code></dd>              </dl>              is equivalent to              <dl><dd><code><font class="CVariable">while</font><code> (b_button_clicked()==0) {...}</code></dd>              </dl></dd>        </dl>      </td>    </tr>    <tr>      <td><a name="beep"></a></td>      <td><code>beep &nbsp;&nbsp;&nbsp;</code>[Category: Output]        <dl><dd>          Format: <code><font class="CVariable">void</font> beep();</code><br>              Produces a tone from the KIPR Link loud speaker. Returns when the tone is finished.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="bk"></a></td>      <td><code>bk &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> bk(<font class="CVariable">int</font> m);</code><br>              Turns on the motor plugged into motor port m at full PWM power in the reverse direction (red light comes on for the KIPR Link motor port). Motor ports are numbered from 0 to 3.</code><br>              Example: </code><br>              <div class="Indent"><code>bk(1); <font class="Comment">// full power reverse</font></code></div></dd>        </dl>      </td>    </tr>    <tr>      <td><a name="block_motor_done"></a></td>      <td><code>block_motor_done &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> block_motor_done(<font class="CVariable">int</font> m);</code><br>			  If a motor positioning function is in progress for the motor plugged into motor port m, continued function execution is blocked until the motor has reached its goal position.  Motor positioning functions are <code>move_to_position</code> (or <code>mtp</code>) and <code>move_relative_position</code> (or <code>mrp</code>).</code><br>			  Example: </code><br>			  <div class="Indent"><code><font class="CFunction">mtp</font>(0,500,20000); <font class="Comment">// turn on motor 0 at 500 ticks/sec and stop when position 20000 is reached</font></code><br>			  <font class="CFunction">block_motor_done</font>(1);</code> <font class="Comment">// pause until mtp has reached its goal position of 20000</font></div>			  This function must be used with some care, since if something prevents the motor from reaching its goal position, the program will hang until halted by external means.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="bmd"></a></td>      <td><code>bmd &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">bmd</font>(<font class="CVariable">int</font> m);</code><br>			  This function the same as <code>block_motor_done</code>, just under a (much) shorter name.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="c_button"></a></td>      <td><code>c_button &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">c_button</font>();</code><br>              Returns the state of the C button on the KIPR Link program console (1 if pressed, 0 otherwise).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="c_button_clicked"></a></td>      <td><code>c_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">c_button_clicked</font>();</code><br>              Returns the state of the C button on the KIPR Link program console (1 of pressed, 0 otherwise).  Continued function execution is blocked while the button is pressed. The construction          <dl><dd><code><font class="CVariable">while</font> (c_button()==0) {</code><br>            <font class="CVariable">while</font> (c_button()==1); ...}            <font class="Comment"> //debounce C button</font></code></dd>          </dl>          is equivalent to          <dl><dd><code><font class="CVariable">while</font><code> (c_button_clicked()==0) {...}</code></dd>          </dl></dd>        </dl>      </td>    </tr>    <tr>      <td><a name="clear_motor_position_counter"></a></td>      <td><code>clear_motor_position_counter &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> clear_motor_position_counter(<font class="CVariable">int</font> motor_nbr);</code><br>         	  Reset the position counter for the motor specified to 0.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="console_clear"></a></td>      <td><code>console_clear &nbsp;&nbsp;&nbsp;</code>[Category: Output]        <dl><dd>          Format: <code><font class="CVariable">void</font> console_clear();</code><br>	  		  Clear the KIPR Link program console print buffer. See also <code>display_clear</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="digital"></a></td>      <td><code>digital &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">digital</font>(<font class="CVariable">int</font> p);</code><br> 			  Returns the value of the sensor in sensor port p, as a true/false value (1 for true and 0 for false). Sensors are expected to be active low, meaning that they are valued at zero volts in the active, or true, state. Thus the library function returns the inverse of the actual reading from the digital hardware: if the reading is zero volts or logic zero, the <code>digital</code> 			function will return true.  Digital ports on the KIPR Link are numbered 8 through 15.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="disable_servo"></a></td>      <td><code>disable_servo &nbsp;&nbsp;&nbsp;</code>[Category: Servos]        <dl><dd>          Format: <code><font class="CVariable">void</font> disable_servo(<font class="CVariable">int</font> p);</code><br> 		 	  Disables the specified servo port.  Servo ports are disabled by default, and if enabled, consume power whenever a motor is plugged into them.  Servo ports on the KIPR Link are numbered 0 to 3.</dd>        </dd>      </td>    </tr>    <tr>      <td><a name="disable_servos"></a></td>      <td><code>disable_servos &nbsp;&nbsp;&nbsp;</code>[Category: Servos]        <dl><dd>       	  Format: <code><font class="CVariable">void</font> disable_servos();</code><br> 			  Disables all servo motor ports (powers down all servo motors). Servo ports are disabled by default, and if enabled, consume power whenever a motor is plugged into them.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="display_clear"></a></td>      <td><code>display_clear &nbsp;&nbsp;&nbsp;</code>[Category: Output]      	<dl><dd>      	  Format: <code><font class="CVariable">void</font> display_clear();</code><br>		      Clear the KIPR Link program console screen for using <code>display_printf</code>.  See also <code>console_clear</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="display_printf"></a></td>      <td><code>display_printf &nbsp;&nbsp;&nbsp;</code>[Category: Output]        <dl><dd>          Format: <code><font class="CVariable">void</font> display_printf(<font class="CVariable">int</font> col, <font class="CVariable">int</font> row, <font class="CVariable">char</font> s[], ... );</code><br>			  The purpose of this function is to display formatted output at a specific (column, row) location on the KIPR Link program console screen using standard <code>printf</code> formatting. The column range for the display is 0 to 41.  For the 3 button (A,B,C) console display, the row range is 0 to 9, and for the 6 button (X,Y,Z,A,B,C) console display, the row range is 0 to 7.  Excess data printed to a row is truncated (i.e. text does not wrap). Printing "<code>\n</code>" using <code>display_printf</code> will cause undesired display results.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="enable_servo"></a></td>      <td><code>enable_servo &nbsp;&nbsp;&nbsp;</code>[Category: Servos]      	<dl><dd>          Format: <code><font class="CVariable">void</font> enable_servo(<font class="CVariable">int</font> p);</code><br>		      Enables specified servo port. Servo ports are disabled by default, and if enabled, consume power whenever a motor is plugged into them. If a servo position for a port hasn't been set when it is enabled, the default position is 1023.  Servo ports on the KIPR Link are numbered 0 to 3.</dd></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="enable_servos"></a></td>      	<td><code>enable_servos &nbsp;&nbsp;&nbsp;</code>[Category: Servos]      	  <dl><dd>       	    Format: <code><font class="CVariable">void</font> enable_servos();</code><br>		 	    Enables all servo motor ports. Servo ports are disabled by default, and if enabled, consume power whenever a motor is plugged into them.</dd>      	  </dl>      </td>    </tr>    <tr>      <td><a name="extra_buttons_show"></a></td>      <td><code>extra_buttons_show &nbsp;&nbsp;&nbsp;</code>[Category: Output]      	<dl><dd>       	  Format: <code><font class="CVariable">void</font> extra_buttons_show();</code><br>			  Shows the X, Y, and Z buttons on the KIPR Link program console screen above the A, B, and C buttons. Note: this reduces the display area for <code>printf</code> and <code>display_printf</code>. See also <code>extra_buttons_hide, get_extra_buttons_visible</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="extra_buttons_hide"></a></td>      	<td><code>extra_buttons_hide &nbsp;&nbsp;&nbsp;</code>[Category: Output]      	<dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">extra_buttons_hide</font>();</code><br>			  Hides the X, Y, and Z buttons on the KIPR Link program console screen.  Note: this is the default display configuration. See also <code>extra_buttons_show, get_extra_buttons_visible</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="fd"></a></td>      <td><code>fd &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">fd</font>(<font class="CVariable">int</font> m);</code><br>			  Turns on the motor plugged into motor m at full PWM power in the forward direction (green light comes on for the KIPR Link motor port).  Motors are numbered 0 to 3.</code><br>			  Example:</code><br>			  <div class="Indent"><code>fd(3); <font class="Comment">// full power forward</font></code></dd>	    </dl>      </td>    </tr>    <tr>      <td><a name="freeze"></a></td>      <td><code>freeze &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>       	  Format: <code><font class="CVariable">void</font> <font class="CFunction">freeze</font>(<font class="CVariable">int</font> m);</code><br>			  Freezes motor m (prevents continued motor rotation, in contrast to <font class="CFunction">off</font>, which allows the motor to "coast").</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_analog_pullup"></a></td>      <td><code>get_analog_pullup &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]      	<dl><dd>      	  Format: <code><font class="CVariable">int</font> get_analog_pullup(<font class="CVariable">int</font> port);</code><br>			  Returns 1 if the port's pullup resistor is enabled (the default), and 0 otherwise.  See also <code>set_analog_pullup</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_digital_pullup"></a></td>      <td><code>get_digital_pullup &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]      	<dl><dd>      	  Format: <code><font class="CVariable">int</font> get_digital_pullup(<font class="CVariable">int</font> port);</code><br>			  Returns 1 if the port's pullup resistor is enabled (the default), and 0 otherwise.  See also <code>set_digital_pullup</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_extra_buttons_visible"></a></td>      <td><code>get_extra_buttons_visible &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]      	<dl><dd>      	  Format: <code><font class="CVariable">int</font> get_extra_buttons_visible();</code><br>		      Returns 1 if the X, Y, and Z buttons are visible, 0 if not.  See also <code>extra_buttons_show, extra_buttons_hide</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_motor_done"></a></td>      <td><code>get_motor_done &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>      	  Format: <code><font class="CVariable">int</font> get_motor_done(<font class="CVariable">int</font> m);</code><br>			  For a motor moving to a goal position set by a motor positioning command, returns 1 if the motor has reached the goal position and 0 otherwise.  Motor positioning functions are <code>move_to_position</code> (or <code>mtp</code>) and <code>move_relative_position</code> (or <code>mrp</code>).  See also <code>block_motor_done</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_motor_position_counter"></a></td>      <td><code>get_motor_position_counter &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">int</font> get_motor_position_counter(<font class="CVariable">int</font> m);</code><br>			  Returns the current motor position for motor m in "ticks" (a value which is continually being updated for each motor using PID motor control based on back EMF; a typical discrimination for a given motor is on the order of 1100 position "ticks" per rotation)</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_pid_gains"></a></td>      <td><code>get_pid_gains &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">int</font> get_pid_gains(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> *p, <font class="CVariable">int</font> *i, <font class="CVariable">int</font> *d, <font class="CVariable">int</font> *pd, <font class="CVariable">int</font> *id, <font class="CVariable">int</font> *dd);</code><br>			  This function is used to obtain the PID control values currently set for the KIPR Link motor ports. The p, i and d arguments are numerators, and the pd, id and dd arguments are their respective denominators for coefficients used by the PID control algorithm.  While all of the parameters are integers, the coefficients used within the PID control algorithm may be integers or floating point. PID stands for proportional, integral, derivative and uses BEMF (back electromotive force) feedback from a motor to determine how much PWM power to apply based on predictors governed by the PID coefficients. If a motor is jerky, the p and d terms should be reduced in size.  If a motor lags far behind a specified velocity, they should be increased. The default values are set at firmware install as effective values for motors sold by KIPR. See also <code>set_pid_gains</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_servo_enabled"></a></td>      <td><code>get_servo_enabled &nbsp;&nbsp;&nbsp;</code>[Category: Servos]      	<dl><dd>          Format: <code><font class="CVariable">int</font> get_servo_enabled(<font class="CVariable">int</font> srv);</code><br>		 	  Returns 1 if the specified servo port is enabled and 0 otherwise. Servo ports on the KIPR Link are numbered 0 to 3.See also <code>enable_servo, disable_servo</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="get_servo_position"></a></td>      <td><code>get_servo_position &nbsp;&nbsp;&nbsp;</code>[Category: Servos]        <dl><dd>       	  Format: <code><font class="CVariable">int</font> get_servo_position(<font class="CVariable">int</font> srv);</code><br>			  Returns the last position value set for the servo in port <code>srv</code>. The value will be in the range 0 to 2047. Servo ports on the KIPR Link are numbered 0 to 3. See also <font class="CFunction">set_servo_position</font>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="mav"></a>      </td>      <td><code>mav</font>&nbsp;&nbsp; </code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">void</font> mav(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel)</font>;</code><br>			  This function is the same as <code>move_at_velocity</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="motor"></a></td>      <td><code>motor &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">void</font> motor(<font class="CVariable">int</font> m, <font class="CVariable">int</font> p);</code><br>			  Turns on motor port m at p% of full PWM motor power. The range for p is -100 to 100, where a negative value runs the motor in its reverse direction.  On the KIPR Link, a motor port supplying forward power lights green, and for reverse lights red, although actual motor direction depends on how it is plugged in.</code></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="move_at_velocity"></a></td>      <td><code>move_at_velocity &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>          Format: <code><font class="CVariable">void</font> move_at_velocity(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);</code><br>			  Turns on motor port m, varying applied PWM power using PID motor control to maintain motor velocity <code>vel</code> indefinitely. The velocity range is -1000 to 1000 ticks per second.  On the KIPR Link, a motor port supplying forward power lights green, and for reverse lights red, although actual motor direction depends on how it is plugged in.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="move_relative_position"></a></td>      <td><code>move_relative_position &nbsp;&nbsp;&nbsp;</code>[Category: Motors]     	<dl><dd>       	   Format: <code><font class="CVariable">void</font> move_relative_position(<font class="CVariable">int</font> m, <font class="CVariable">int</font> absvel, <font class="CVariable">int</font> pos);</code><br>			   Turns on motor port m, varying applied PWM power using PID motor control to maintain motor velocity <code>absvel</code> (&plusmn;) until the motor has moved from its current position cp to the goal position cp <code> + pos</code>. The range for the <code>absvel</code> argument is 0 to 1000 ticks per second. On the KIPR Link, a motor port supplying forward power lights green, and for reverse lights red, although actual motor direction depends on how it is plugged in.</dd>          <dd>Example: </code><br>              <div class="Indent"><code><font class="CFunction">move_relative_position</font>(1,275,-1100);</code></div></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="move_to_position"></a></td>      <td><code>move_to_position &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>       	   Format: <code><font class="CVariable">void</font> move_to_position(<font class="CVariable">int</font> m, <font class="CVariable">int</font> absvel, <font class="CVariable">int</font> pos);</code><br>			   Turns on motor port m, varying applied PWM power using PID motor control to maintain motor velocity <code>absvel</code> (&plusmn;) until the motor has moved from its current position to goal position pos. The range for the <code>absvel</code> argument is 0 to 1000 ticks per second. On the KIPR Link, a motor port supplying forward power lights green, and for reverse lights red, although actual motor direction depends on how it is plugged in. If the motor is already at the goal position <code>pos</code>, the motor doesn't move.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="mrp"></a></td>      <td><code>mrp &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>           Format: <code><font class="CVariable">void</font> mrp(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);</code><br>			   This function is the same as <code>move_relative_position</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="mtp"></a></td>      <td><code>mtp</font>&nbsp; </code>[Category: Motors] &nbsp;&nbsp;      	<dl><dd>          Format: <code><font class="CVariable">void</font> mtp(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);</code><br>			  This function is the same as <code>move_to_position</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="msleep"></a></td>      <td><code>msleep &nbsp;&nbsp;&nbsp;</code>[Category: Time]      	<dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">msleep</font>(<font class="CVariable">int</font> msec);</code><br>			  Suspends function execution for the amount of time specified in milliseconds.</code><br>			  Example:</code><br>              <div class="Indent"><code>msleep</font>(1500); <font class="Comment">//wait for 1.5 seconds</font></code></div></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="off"></a></td>      <td><code>off &nbsp;&nbsp;&nbsp;</code>[Category: Motors]      	<dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">off</font>(<font class="CVariable">int</font> m);</code><br>			  Turns off motor port m.</code><br>			  Example:</code><br>              <div class="Indent"><code>off(1);</code> <font class="Comment">// turn off motor 1</font></div></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="power_level"></a></td>      <td><code>power_level &nbsp;&nbsp;&nbsp;</code>[Category: Sensor]      	<dl><dd>       	  Format: <code><font class="CVariable">double</font> power_level();</code><br>			  Returns the current power level for the KIPR Link battery.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="run_for"></a></td>      <td><code>run_for &nbsp;&nbsp;&nbsp;</code>[Category: Threads]        <dl><dd>          Format: <code><font class="CVariable">void</font> run_for(<font class="CVariable">double</font> sec, &lt;</code>function_name<code>&gt;);</code><br>              Runs the specified function and tracks its execution until either the function finishes or the specified number of seconds has elapsed.  If the specified number of seconds has elapsed, <code>runfor</code> terminates execution for the function.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="seconds"></a></td>      <td><code>seconds &nbsp;&nbsp;&nbsp;</code>[Category: Time]      	<dl><dd>           Format: <code><font class="CVariable">double</font> <font class="CFunction">seconds</font>();</code><br>			  Returns the number of seconds that have elapsed according to the system's internal clock since system start up. Resolution is 0.001 seconds (one millisecond).</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="set_a_button_text"></a></td>      <td><code>set_a_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_a_button_text<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the A button to be the text string specified rather than the default string "A".</dd>        </dl>    </td>    </tr>    <tr>      <td><a name="set_analog_pullup"></a></td>      <td><code>set_analog_pullup &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_analog_pullup(<font class="CVariable">int</font> port, <font class="CVariable">int</font> pullupTF);</code><br>              By default, a pullup resistor is enabled for each analog port. This function disables (or re-enables) the pullup resistor for the selected analog port. If an analog sensor doesn't have an integrated pullup resistor (such as an IR light sensor), the pullup resistor for the sensor's analog port needs to be enabled.  For an analog sensor that sets its own pullup value (the "ET" optical range finder is such a sensor), the pullup resistor for its analog port needs to be disabled.  For example, </code><br>              <div class="Indent"><code>set_analog_pullup(3,0); <font class="Comment">/*disable the port 3 pullup resistor</code><br>              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(port is now "floating" and the ET sensor will work correctly in it)*/</font></code><br>              set_analog_pullup(3,1); <font class="Comment"> /*re-enable the port 3 pullup resistor </code><br>              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(the ET sensor will no longer work correctly in it)*/</font></div></code>              See also <code>get_analog_pullup</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="set_b_button_text"></a></td>      <td><code>set_b_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_b_button_text<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the B button to be the text string specified rather than the default string "B".</dd>        </dl>    </td>    </tr>    <tr>      <td><a name="set_c_button_text"></a></td>      <td><code>set_c_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_c_button_text<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the C button to be the text string specified rather than the default string "C".</dd>        </dl>    </td>    </tr>    <tr>      <td><a name="set_digital_output"></a></td>      <td><code>set_digital_output &nbsp;&nbsp;&nbsp;</code>[Category: Output]    	<dl><dd>          Format: <code><font class="CVariable">void</font> set_digital_output(<font class="CVariable">int</font> port, <font class="CVariable">int</font> inout);</code><br>              Digital ports on the KIPR Link can be configured for either input or output. By default digital ports are set for input. If the value of <code>inout</code> is 1, the port is configured for output, for example, the statement</code><br>              <div class="Indent"><code>set_digital_output(9,1);</code></div>              when executed configures digital port 9 for output. The port number specified must be in the range from 8 to 15. See also <code>set_digital_value</code>.  See below for an <a href="#digital_out_LED">example program</a> using digital output.</dd>    	</dl>      </td>    </tr>    <tr>      <td><a name="set_digital_pullup"></a></td>      <td><code>set_digital_pullup &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]       	<dl><dd>          Format: <code><font class="CVariable">void</font> <font class="CFunction">set_digital_pullup</font>(<font class="CVariable">int</font> port,<font class="CVariable">int</font> pullupTF);</code><br>              By default, a pullup resistor is enabled for each digital port. This function disables (or re-enables) the pullup resistor for the selected digital port. If a digital sensor doesn't have an integrated pullup resistor (which is the case for simple switches or an LED), the pullup resistor for the sensor's digital port needs to be enabled.  For a digital sensor that sets its own pullup value (there are none used for Botball), the pullup resistor for its analog port needs to be disabled. See also <code>get_digital_pullup</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="set_digital_value"></a></td>      <td><code>set_digital_value &nbsp;&nbsp;&nbsp;</code>[Category: Output]    	<dl><dd>      	  Format: <code><font class="CVariable">void</font> <font class="CFunction">set_digital_value</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> value);</code><br>        	  Sets the (SEN) value for the specifed port on the KIPR Link to either 0 (low) or 1 (high). The SEN rail on the KIPR Link is the one with a single row of sockets.  The specified port must be in the range 8 to 15.  The library function <code>set_digital_ouput</code> is used to configure a digital port on the KIPR Link for output (or to re-configure it for input).</code><br>        	  </code><br>As an example, if the anode lead for an LED (the longer one) is plugged into the SEN socket for digital port 9 and its cathode lead into the GND rail (the outer rail for the PWR/GND rails), then</code><br>        	  <div class="Indent"><code>set_digital_value(9,1);</code></div>        	  will turn on the LED when executed and </code><br>        	  <div class="Indent"><code>set_digital_value(9,0);</code></div>        	  will turn it off.  See below for an <a href="#digital_out_LED">example program</a> using digital output.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="set_pid_gains"></a></td>      <td><code>set_pid_gains &nbsp;&nbsp;&nbsp;</code>[Category: Motors]        <dl><dd>       	   Format: <code><font class="CVariable">int</font> set_pid_gains(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> p, <font class="CVariable">int</font> i, <font class="CVariable">int</font> d, <font class="CVariable">int</font> pd, <font class="CVariable">int</font> id, <font class="CVariable">int</font> dd);</code><br>			  This function is used to change the PID control values currently set for the KIPR Link motor ports. The p, i and d arguments are numerators, and the pd, id and dd arguments are their respective denominators for coefficients used by the PID control algorithm.  While all of the parameters are integers, the coefficients used within the PID control algorithm may be integers or floating point. PID stands for proportional, integral, derivative and uses BEMF (back electromotive force) feedback from a motor to determine how much PWM power to apply based on predictors governed by the PID coefficients. If a motor is jerky, the p and d terms should be reduced in size.  If a motor lags far behind a specified velocity, they should be increased. The default values are set at firmware install as effective values for motors sold by KIPR. See also <code>get_pid_gains</code></dd></dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="set_servo_position"></a></td>      <td><code>set_servo_position &nbsp;&nbsp;&nbsp;</code>[Category: Servos]      	<dl><dd>           Format: <code><font class="CVariable">int</font> set_servo_position(<font class="CVariable">int</font> srv, <font class="CVariable">int</font> pos);</code><br>			  Sets the position value of the servo in port <code>srv</code>. The value of <code>pos</code> must be in the range 0 to 2047. The KIPR Link has 4 servo ports numbered 0 to 3. A servo motor consumes maximum power when trying to reach a position, so if the servo cannot reach the position specified, its power consumption will rapidly pull the KIPR Link battery down. Servo motors tend to reach their limit of travel around 200 short of either end of the range 0 to 2047 range, so such values should be avoided. Additionally, servo travel is not smooth, and positions tend to be about 5 units apart on the 0 to 2047 scale; i.e., position increments should be at least 5.  see also <code>get_servo_position</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="set_x_button_text"></a></td>      <td><code>set_x_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_x_button_text(<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the X button to be the text string specified rather than the default string "X". See also <code>extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="set_y_button_text"></a></td>      <td><code>set_y_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_y_button_text(<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the Y button to be the text string specified rather than the default string "Y". See also <code>extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="set_z_button_text"></a></td>      <td><code>set_z_button_text &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">void</font> set_z_button_text(<font class="CVariable">char</font> txt[]);</code><br>              This function resets the text displayed on the Z button to be the text string specified rather than the default string "Z". See also <code>extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible</code>.</font></dd>        </dl>      </td>    </tr><!-- the purpose of the following function is unclear since it neither runs a motor nor affects performance of motor functions    <tr>      <td><a name="setpwm"></a></td>      <td><code>setpwm</font>&nbsp;&nbsp; </code>[Category: Motors]      	<dl><dd>           <font class="CVariable">int</font> setpwm(<font class="CVariable">int </font>m, <font class="CVariable">int</font> dc);</code><br>          	  Runs motor m at duty cycle <code>dc</code> (values are from -100 to 100)</dd>      	</dl>      </td>    </tr>-->    <tr>      <td><a name="side_button"></a></td>      <td><code>side_button</font> (or <font class="CFunction">black_button</font>)&nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">side_button</font>();</code><br>			  Returns the state of the (physical) side button on the KIPR Link (1 if pressed, 0 otherwise).</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="side_button_clicked"></a></td>      <td><code>side_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> <font class="CFunction">side_button_clicked</font>();</code><br>              Returns the state of the (physical) side button on the KIPR Link (1 if pressed, 0 otherwise). Continued function execution is blocked while the button is pressed.  The construction              Returns 1 for pressed, 0 for not pressed.  The construction              <dl><dd><code><font class="CVariable">while</font> (side_button()==0) {</code><br>                <font class="CVariable">while</font> (side_button()==1); ...}</font>                <font class="Comment"> //debounce A button</font></code></dd>              </dl>              is equivalent to              <dl><dd><code><font class="CVariable">while</font> (a_button_clicked()==0) {...}</code></dd>              </dl></dd>      </dl>      </td>    </tr>    <tr>      <td><a name="thread_create"></a></td>      <td><code>thread_create &nbsp;&nbsp;&nbsp;</code>[Category: Threads]      	<dl><dd>      	   Format: <code><font class="CVariable">thread</font> thread_create(&lt;function name&gt;);</code><br>			  The <code>thread_create</code> function is used to create a thread for running a function in parallel to <code>main</code>, returning a thread ID value of type <font class="CVariable">thread</font>.  The special data type <font class="CVariable">thread</font> is for the thread ID's created by the system to keep track of active threads.  Note that the returned value must be assigned to a variable of type <font class="CVariable">thread</font> to remain available to the program.  When a function is run in a thread (via <code>thread_start</code>),the thread will remain active until the function finishes or the thread is destroyed (via <code>thread_destroy</code>). If the thread hasn't been destroyed, it can be started again; otherwise, a new thread has to be created for the function to be run in a thread again.  See the <a href="#Threads">section on threads</a> below for additional information and an example.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="thread_destroy"></a></td>      <td><code>thread_destroy &nbsp;&nbsp;&nbsp;</code>[Category: Threads]      	<dl><dd>          Format: <code><font class="CVariable">void</font> thread_destroy(<font class="CVariable">thread</font> id);</code><br>			  The <code>thread_destroy</code> function is used to destroy a thread created for running a function in parallel to main. The thread is destroyed by passing its thread ID to <code>thread_destroy</code>.  If the function for the thread is running in the thread when the thread is destroyed, its execution is terminated.  See the <a href="#Threads">section on threads</a> below for additional information and an example.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="thread_start"></a></td>      <td><code>thread_start &nbsp;&nbsp;&nbsp;</code>[Category: Threads]      	<dl><dd>          Format: <code><font class="CVariable">void</font> thread_start(&lt;</font><font class="CVariable">thread</font> tid);</code><br>			  The <code>thread_start</code> function is used to activate the thread given by <code>tid</code>, running its associated function in the thread in parallel with <code>main</code> and any other active threads.  The value of argument <code>tid</code> must have a thread ID value as returned by <code>thread_create</code>.  Keep in mind that thread IDs generated by <code>thread_create</code> must be retained in variables of typte <font class="CVariable">thread</font> to remain available for later use in a program.  The thread is active until its function finishes or until it is terminated by <code>thread_destroy</code>. A global variable can be used as a flag for a function running in a thread to signal when it is done.<p>			  The following example shows the <code>main</code> process creating a thread for the function <code>check_sensor</code>, running the function in the thread, and then destroying the thread one second later (whether or not the thread is still active):</p><a name="BasicThread"></a><pre><code><font class="CVariable">int</font> main(){    <font class="CVariable">thread</font> tid; <font class="Comment"> // variable for holding a thread's ID</font>    tid = <font class="CFunction">thread_create</font>(check_sensor); <font class="Comment"> // capture thread's ID in tid</font>    <font class="CFunction">thread_start</font>(tid); <font class="Comment"> // run check_sensor in the thread</font>    <font class="CFunction">msleep</font>(1000); <font class="Comment"> // let it keep running for a second</font>    <font class="CFunction">thread_destroy</font>(tid); <font class="Comment"> // stop check_sensor if still running</font>}<br></code></pre><br>            See the <a href="#Threads">section on threads</a> below for a complete example using threads.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="thread_wait"></a></td>      <td><code>thread_wait &nbsp;&nbsp;&nbsp;</code>[Category: Threads]      	<dl><dd>          Format: <code><font class="CVariable">void</font> thread_wait(<font class="CVariable">thread</font> tid);</code><br>			  If <code>thread_wait</code> is executed in a function, it will block continued execution of the function until the function running in the thread given by <code>tid</code> has finished (or until the thread given by <code>tid</code> is destroyed by some other process).  If the thread given by <code>tid</code> is inactive, the function does nothing.  <code>thread_wait</code> is used for synchronization of multiple threads (e.g., thread 1 doesn't continue until thread 2 is done).  See the <a href="#Threads">section on threads</a> below for additional information and an example.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="x_button"></a></td>      <td><code>x_button &nbsp;&nbsp;&nbsp;</code></code>[Category: Sensors]      	<dl><dd>          Format: <code><font class="CVariable">int</font> x_button();</code><br>			  Returns the state of the X button when it is visible on the KIPR Link program console (1 if pressed, 0 otherwise).  This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="x_button_clicked"></a></td>      <td><code>x_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> x_button_clicked();</code><br>              Returns the state of the X button when it is visible on the KIPR Link program console (1 if pressed, 0 otherwise). Continued function execution is blocked while the button is pressed. The construction            <dl><dd><code><font class="CVariable">while</font> (x_button()==0) {</code><br>            <font class="CVariable">while</font>(x_button()==1); ...} <font class="Comment"> //debounce X button</font></code>            </dd></dl>            is equivalent to            <dl><dd><code><font class="CVariable">while</font>(x_button_clicked()==0) {...}</code></code><br>            </dd></dl>            This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="y_button"></a></td>      <td><code>y_button &nbsp;&nbsp;&nbsp;</code></code>[Category: Sensors]      	<dl><dd>          Format: <code><font class="CVariable">int</font> y_button();</code><br>			  Returns the state of the Y button when visible on the KIPR Link program console (1 if pressed, 0 otherwise).  This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="y_button_clicked"></a></td>      <td><code>y_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> y_button_clicked();</code><br>              Returns the state of the Y button when it is visible on the KIPR Link program console (1 if pressed, 0 otherwise). Continued function execution is blocked while the button is pressed. The construction              <dl><dd><code><font class="CVariable">while</font> (y_button()==0) {</code><br>              <font class="CVariable">while</font>(y_button()==1); ...} <font class="Comment"> //debounce Y button</font></code>              </dd></dl>              is equivalent to</code><br>              <dl><dd><code><font class="CVariable">while</font>(y_button_clicked()==0) {...}</code></code><br>              </dd></dl>              This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="z_button"></a></td>      <td><code>z_button &nbsp;&nbsp;&nbsp;</code></code>[Category: Sensors]      	<dl><dd>          Format: <code><font class="CVariable">int</font> x_button();</code><br>			  Returns the state of the X button when visible on the KIPR Link program console (1 if pressed, 0 otherwise).  This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="z_button_clicked"></a></td>      <td><code>z_button_clicked &nbsp;&nbsp;&nbsp;</code>[Category: Sensors]        <dl><dd>          Format: <code><font class="CVariable">int</font> z_button_clicked();</code><br>              Returns the state of the Z button when it is visible on the KIPR Link program console (1 if pressed, 0 otherwise). Continued function execution is blocked while the button is pressed. The construction              <dl><dd><code><font class="CVariable">while</font> (z_button()==0) {</code><br>              <font class="CVariable">while</font>(z_button()==1); ...} <font class="Comment"> //debounce Z button</font></code>              </dd></dl>              is equivalent to</code><br>              <dl><dd><code><font class="CVariable">while</font>(z_button_clicked()==0) {...}</code></code><br>              </dd></dl>              This button is an extra button.  Use <code>extra_buttons_show</code> to show the X, Y, and Z buttons. See also <code>extra_buttons_hide, get_extra_buttons_visible</code>.</dd>        </dl>     </td>    </tr>  </tbody></table><div class="Indent"><a name="digital_out_LED"></a><h4>Example program for lighting an LED plugged into a digital port</h4><p>By default the digital ports for the KIPR Link are configured for input.  The KIPR Link Library function <code>set_digital_output</code> is used to configure digital port direction; for example,</p><div class="Indent"><code>set_digital_output(9, 1);</code></div><p>configures port 9 for output and</p><div class="Indent"><code>set_digital_output(9, 0);</code></div><p>configures it for input.</p><p>For a digital port configured for output, the KIPR Link Library function <code>set_digital_value</code> is used to set the port's output value to either 0 (low) or 1 (high); for example,</p><div class="Indent"><code>set_digital_value(9, 1);</code> </div><p>sets the output value for port 9 high.</p><p>If you have 5mm LED on hand, you can use the following program to operate it.  An LED will "turn on" when voltage applied to its anode lead rises above a prescribed level (typically between 1.9 and 3.2V, depending on color).  If too much current is passed through the LED, it will burn out (the typical spec is 20-30mA).  For the KIPR Link, digital outputs on the SEN rail are sufficiently current limited to operate an LED without burning it out.</p><table width=80%>  <tbody>  <tr>    <td>The LED's anode is normally identified by having the longer of the two leads. Additionally, the flange at the base of the LED is normally flattened on the cathode side.    </td>    <td> <img src="images/LEDform.gif" style="float:right;" width="80%"></img>    </td>  </tr></tbody></table><br><a name="BlinkLED"></a><pre><code><font class="Comment">/*  This is a program to blink an LED plugged into digital port 9 */</font><font class="CVariable">int</font> main()  {    printf(<font class="Quote">"LED in port 9\n"</font>);    printf(<font class="Quote">"Press side button to quit\n"</font>);    set_digital_output(9, 1); <font class="Comment">// set digital port directon to digital output</font>    <font class="CVariable">while</font> (side_button() == 0) {      set_digital_value(9, 1); <font class="Comment">// set digital output to 1 (high)</font>      msleep(500);      set_digital_value(9, 0); <font class="Comment">// set digital output to 0 (low)</font>      msleep(500);    }    set_digital_output(9, 0); <font class="Comment">// set digital port directon back to to digital input</font>    printf(<font class="Quote">"\ndone\n"</font>);}</code></pre></div><!--Vision API--><a name="vision"></a><h3>KIPR Link Vision Library Functions</h3><p>The KIPR Link Vision System incorporates color vision tracking and QR code identification.  A USB web camera is used to provide images to the KIPR Link at a rate dependent on lighting conditions but exceeding 6 frames per second.  Using the KIPR Link interface, an arbitrary number of camera configurations containing channels for color vision tracking and/or QR code identification can be defined.</p><p>For color vision tracking, images are processed by the KIPR Link to identify "blobs" matching the color specification for each color channel in a camera configuration.  A blob is a set of contiguous pixels in the image matching the color specification for the channel.</p><p>For each color channel in a selected configuration, the values to be used to identify which pixels in an image match the desired color for the channel  are interactively selected from a color spectrum chart to provide a color specification for the channel.  Live feed from the camera simplifies the process of determining how much of the spectrum is needed to produce blobs matching the color (e.g., a particular part of the spectrum might include all pixels that are "reddish" in color for a channel to be used for identifying red objects).  The spectrum values for the channel are retained with the configuration until the configuration is deleted.  See the KIPR Link Manual available from KIPR for information on setting up camera configurations on a KIPR Link controller.</p><p>The camera image size is 160 x 120.  The upper left corner has coordinates (0,0) and the lower right has coordinates (159,119).  The camera image displayed on the KIPR Link is slightly smaller than the actual image size.<p><img class="center" src="images/Vision_Coordinates.gif" width="20%"></img><p>KIPR Link Vision Library functions are used to select a configuration and obtain information about the color blobs being identified by its channels, such as bounding box coordinates and pixel density.</p><p>In addition to channels for color tracking, a configuration can have channels for identifying QR (Quick Response) codes.   A QR code is essentially a 2-dimensional bar code for compactly representing text data.  KIPR Link Vision Library functions are provided for decoding any QR code in the image.  See the QR code vision functions <code>get_object_data, get_object_data_length</code> below.</p><table>  <tbody>    <tr>      <td><a name="camera_close"></a></td>      <td><code>camera_close  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">void</font> camera_close();</code><br>              Cleanup the current camera instance. See also <code>camera_open, camera_open_device</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="camera_load_config"></a></td>      <td><code>camera_load_config  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> camera_load_config(<font class="CVariable">char</font> name[]);</code><br>              Loads a config file on the KIPR Link other than the default config file.  You <b>must</b> append <code>.config</code> to the name for this function to locate it. Returns 1 on success, 0 on failure. See also <code>camera_open, camera_open_device</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="camera_open"></a></td>      <td><code>camera_open  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> camera_open(<font class="CVariable">int</font> res_numb);</code><br>          Opens the KIPR Link's default channel configuration.  The default configuration is selected from among the channel configurations defined on the KIPR Link using its <i>settings..channels</i> menu. A resolution of one of LOW_RES, MED_RES, HIGH_RES needs to be specified. Returns 1 on success, 0 on failure. See also <code>camera_open_device, camera_close</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="camera_open_device"></a></td>      <td><code>camera_open_device  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> camera_open_device(<font class="CVariable">int</font> number, <font class="CVariable">int</font> res_numb);</code><br>          If more than 1 camera is plugged in, 0 is the first camera, 1 is the second camera, etc.		  Only 1 camera at a time can be used, and the default configuration is selected.		  A resolution of one of LOW_RES, MED_RES, HIGH_RES needs to be specified.		  Returns 1 on success, 0 on failure. See also <code>camera_open, camera_close</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="camera_update"></a></td>      <td><code>camera_update  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> camera_update();</code><br>          Pulls a new image from the camera for processing. Returns 1 on success, 0 on failure.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_channel_count"></a></td>      <td><code>get_channel_count  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_channel_count()</code>();</code><br>          Returns the number of channels in the current configuration.  See also <code>get_object_count</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_area"></a></td>      <td><code>get_object_area  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_object_area(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> >);</code><br>          Returns the object's bounding box area. -1 is returned if the channel or object doesn't exist.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_bbox"></a></td>      <td><code>get_object_bbox  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">rectangle</font> get_object_bbox(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>          Returns the bounding box of the given object on the given channel as a rectangle data type. For example,</code><br>          <dl><dd>          <code><font class="CVariable">rectangle</font> mybox;</code><br>          mybox = get_object_bbox(0,2);</code><br>          printf(<font class="Quote">"x coord %d  y coord %d\n"</font>, mybox.x, mybox.y);</code>          </dd></dl>          displays the x and y coordinates of bounding box 2 for channel 0.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_center"></a></td>      <td><code>get_object_center  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">point2</font> get_object_center(<font class="CVariable">int</font> channel, int</font> object);</code><br>          Returns The (x, y) center of the given object on the given channel as a point2 data type.          For example,          <dl><dd>          Format: <code><font class="CVariable">point2</font> <code>mcenter;</code><br>          mcenter = get_object_center(0,2);</code><br>          printf(<font class="Quote">"x center coord %d  y center coord %d\n"</font>, mcenter.x, mcenter.y);</code><br>          </dd></dl>          displays the x and y coordinates of center point of box 2 for channel 0.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_centroid"></a></td>      <td><code>get_object_centroid  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_object_centroid(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>          Returns The (x, y) coordinates of the <b>centroid</b> of the given object on the given color channel as a point2 data type (the centroid is the center of mass for the pixels of the specified color). For example,</code><br>          <dl><dd><font class="CVariable">point2</font> <code>mcenter;</code><br>          mcentroid = get_object_centroid(0,2);</code><br>          printf(<font class="Quote">"x centroid coord %d  y centroid coord %d\n"</font>, mcentroid.x, mcentroid.y);</code>          </dd></dl>          displays the x and y coordinates of centroid of box 2 for color channel 0.  The centroid is NOT the same as the center.  It is the center of mass for a blob; e.g., for a color arrow pointing right, there are more pixels to right of center, so the centroid is to the right of center.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_code_num"></a></td>      <td><code>get_code_num  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_code_num(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>          Returns the data associated with the given channel and object as an integer. If the given channel or object doesn't exist, -1 is returned. See also <code>get_object_data</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_confidence"></a></td>      <td><code>get_object_confidence  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">double</font> get_object_confidence</font>(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>          Returns the confidence, between 0.0 and 1.0, that the given object on the given channel is significant. If the channel or object doesn't exist, 0.0 is returned.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_count"></a></td>      <td><code>get_object_count  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_object_count(<font class="CVariable">int</font> channel);</code><br>          Returns the number of objects being "seen" by the specified channel. Objects are sorted by area, largest first. Returns -1 if channel doesn't exist. See also <code>get_channel_count</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_data"></a></td>      <td><code>get_object_data  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">char</font> *get_object_data</font>(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>            Returns the sequence of character data associated with a given object on a QR channel. If there is no data associated, 0 is returned. The data is not guaranteed to be null terminated, but can be accessed using array notation; for example,</code><br>            <dl><dd>		      <code>get_object_data(0,0)[0], get_object_data(0,0)[1]</code>, etc.</dd>		    </dl>		    <code>camera_update</code> will invalidate the pointer returned by <code>get_object_data</code>. See also <code>get_object_data_length</code>.</dd>        </dl>      </td>    </tr>    <tr>      <td><a name="get_object_data_length"></a></td>      <td><code>get_object_data_length  &nbsp;&nbsp;&nbsp;</code>[Category: Vision]        <dl><dd>          Format: <code><font class="CVariable">int</font> get_object_data_length</font>(<font class="CVariable">int</font> channel, <font class="CVariable">int</font> object);</code><br>          Returns the number of characters associated with the QR code on a QR channel. If there is no data associated, 0 is returned. If the channel or object is invalid, 0 is returned. See also <code>get_object_data</code>.</dd>        </dl>      </td>    </tr></tbody></table><div class="Indent"><h4>Example program for using a camera to track an object</h4><p>Camera functions will not provide meaningful data until the camera has been activated using <code>camera_open</code>.  For most purposes, calling <code>camera_open</code> with the LOW_RES setting will be sufficent and will reduce frame processing overhead. Once the camera has been activated, the camera function <code>camera_update</code> is used to obtain the current frame in the camera's field of view.  Note that <code>camera_update</code> is called every time throught a camera processing loop to provide a current camera frame for processing.</p><a name="PointServo"></a><pre><code><font class="Comment">/* This program points a servo (that is plugged into port 0 and centered on the camera's field of vision) towards an object that fits into the color model defined for channel 0 */ </font><font class="CVariable">int</font> main() {   <font class="CVariable">int</font> offset, x, y;   enable_servo(0);      <font class="Comment">// enable servo</font>   camera_open(LOW_RES); <font class="Comment">// activate camera</font>   camera_update();      <font class="Comment">// get most recent camera image and process it</font>   <font class="CVariable">while</font> (side_button() == 0) {      x = get_object_center(0,0).x;  <font class="Comment">// get image center x data</font>      y = get_object_center(0,0).y;  <font class="Comment">//    and y data</font>      <font class="CVariable">if</font> (get_object_count(0) > 0) { <font class="Comment">// there is a blob</font>         display_printf(0,1,<font class="Quote">"Center of largest blob: (%d,%d)   "</font>,x,y);         offset=5*(x-80); <font class="Comment">// amount to deviate servo from center</font>         set_servo_position(0,1024+offset);      }      <font class="CVariable">else</font>         display_printf(0,1,<font class="Quote">"No object in sight                "</font>);      msleep(200);       <font class="Comment">// don't rush print statement update</font>      camera_update();   <font class="Comment">// get new image data before repeating</font>   }   disable_servos();   camera_close();   printf(<font class="Quote">"All done\n"</font>);}</code></pre></div><div class="Indent"><h4>Example program for using a camera to translate a QR code</h4><a name="TranslateQR"></a><pre><code><font class="Comment">// Assume channel 1 is for identifying QR codes// If a QR code is found, it is translated</font><font class="CVariable">int</font> main() {   <font class="CVariable">int</font> i, lngth;   camera_open(LOW_RES); <font class="Comment">// activate camera</font>   camera_update();      <font class="Comment">// get most recent camera image and process it</font>   <font class="CVariable">while</font>(side_button()==0) {      <font class="CVariable">if</font> (get_object_count(1) > 0) { <font class="Comment">// there is a QR code in view</font>        display_printf(0,1,<font class="Quote">"QR code:                              "</font>);        lngth = get_object_data_length(1,0);        <font class="Comment">// print QR code letter by letter until end of data</font>        <font class="CVariable">for</font>(i=0; i < lngth; i++) {           display_printf(9+i,1,<font class="Quote">"%c"</font>, get_object_data(1,0)[i]);        }     }     <font class="CVariable">else</font> {        display_printf(0,1,<font class="Quote">"No QR code detected                   "</font>);     }     msleep(200);        <font class="Comment">// don't rush print statement update</font>     camera_update();    <font class="Comment">// get new image data before repeating </font>   }}</code></pre></div><!--Create Function Library--><a name="Create_functions"></a><h3>Create Function Library</h3><p>The functions in the KIPR Link Library for controlling an iRobot Create module provide an interface between a program on the KIPR Link and the Create Open Interface (<a href="http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf">http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf</a>). Each Create function in the KIPR Link Library is designed to send the Create a series of Open Interface commands that cause the Create to perform some action. A script of Open Interface commands can also be downloaded to the Create to be played later (see the library function <code>create_write_byte</code>).</p><p>The KIPR Link communicates with the iRobot Create via a (TTL) serial connection.  Functions included in the KIPR Link Library for the iRobot Create send serial byte code sequences to the Create over the serial connection, making it possible to operate the Create without having to reference the Open Interface guide.  These sequences cover the large majority of actions users typically want to have performed by a Create module (e.g., drive forward at a given speed, determine how far the Create has travelled, etc).  They also provide a means for the KIPR Link to directly control an iRobot Create.</p><p>A Create script is a (limited) sequence of pre-defined iRobot Create byte code commands ordered to perform some set of actions independent of external control.  In contrast to other commands, a command to start a script disables serial communications until the script has finished.  See the <a href="#Create_script_example">example program</a> below for more information on user defined scripts.</p><p>The KIPR Link Library functions for moving the iRobot Create are non-blocking, so when a movement command is sent to the iRobot Create, its trajectory will continue until a different Create movement function is executed on the KIPR Link. In contrast, once a script is started on the Create it will run to completion, during which time the connection to the KIPR Link is ignored.  The iRobot Create may also be used to play MIDI music. Up to sixteen 16 songs may be download to the iRobot Create from a song array on the KIPR Link. See the Create Open Interface manual for details on note and duration codes.</p><p>The library functions for accessing Create sensor data return either the requested data or an error code.  A return value greater than 100,000 is used to indicate an error occurred, where the error number is given by 100,000 + <code>&lt;<font face="Times">Create-Serial-Interface-Packet-Number</font>r&gt;</code>. For example, a code of 100,007 indicates an error occurred when requesting bumper or wheel drop sensor status.  Sensor packet numbers range from 7 to 42 as described  in the Create Open Interface manual.</p><p>The Create Open Interface manual has details concerning the physical characteristics of the iRobot Create module and descriptions of how to use the various byte code commands.</p><!-- Create Serial Interface --><a name="Create_serial_interface"></a><h4>Create Serial Interface Functions</h4><table><tbody><tr>  <td><a name="create_clear_serial_buffer"></a></td>  <td><code>create_clear_serial_buffer  &nbsp;&nbsp;&nbsp;</code>[Category: Create Serial Interface Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_clear_serial_buffer();</code><br>          Clears the internal serial interface buffer of any unaccessed send/receive data.      </dd>    </dl>  </td></tr>  <td><a name="create_connect"></a></td>  <td><code>create_connect()  &nbsp;&nbsp;&nbsp;</code>[Category: Create Serial Interface Function]    <dl><dd>       Format: <code><font class="CVariable">int</font> create_connect;</code><br>          Establishes a USB serial connection between the KIPR Link and a Create module.  This statement is normally paired with an <code>msleep</code> statement, since it takes more than one second for the communications link to stabilize (<code>msleep(1500)</code> is sufficient).  If the program is paused and the Create is not turned on, the function will block continued execution until the Create is turned on.  This function is always the first step for sending Create Open Interface commands from the KIPR Link to the Create. By default, the Create starts in <code>create_safe</code> mode.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_disconnect"></a></td>  <td><code>create_disconnect  &nbsp;&nbsp;&nbsp;</code>[Category: Create Serial Interface Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_disconnect();</code><br>          Restores the Create to power on configuration (which will also shut off any running motors).      </dd>    </dl>  </td></tr><tr>  <td><a name="create_read_block"></a></td>  <td><code>create_read_block  &nbsp;&nbsp;&nbsp;</code>[Category: Create Serial Interface Function]    <dl><dd>       Format: <code><font class="CVariable">int</font> create_read_block(<font class="CVariable">char</font> *data, <font class="CVariable">int</font> count);</code><br>          Uses the serial interface to have the Create send the number of bytes specified into the character string pointed to by <code>data</code>. 1 is returned on read success, 0 on failure.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_write_byte"></a></td>  <td><code>create_write_byte  &nbsp;&nbsp;&nbsp;</code>[Category: Create Serial Interface Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_write_byte(<font class="CVariable">char</font> byte);</code><br>          Uses the serial interface to have the KIPR Link send the specified byte to the iRobot Create. The purpose of this function is for writing functions for supplying a series of byte commands to the Create to have it perform some action, or to load a song, or to load a script.      </dd>    </dl>  </td></tr></tbody></table><!-- Create Configuration --><a name="Create_configuration"></a><h4>Create Configuration Functions</h4><table><tbody><tr>  <td><a name="create_full"></a></td>  <td><code>create_full  &nbsp;&nbsp;&nbsp;</code>[Category: Create Configuration Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_full();</code><br>          Create will move however you tell it (even if that is a bad thing). In particular, the Create will not stop and disconnect if a wheel drop or cliff sensor goes high.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_passive"></a></td>  <td><code>create_passive  &nbsp;&nbsp;&nbsp;</code>[Category: Create Configuration Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_passive();</code><br>          Puts Create into passive mode (motor commands won't work).      </dd>    </dl>  </td></tr><tr>  <td><a name="create_safe"></a></td>  <td><code>create_safe  &nbsp;&nbsp;&nbsp;</code>[Category: Create Configuration Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_safe();</code><br>          Create will execute all commands, but will disconnect and stop if a wheel drop or cliff sensor goes high.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_start"></a></td>  <td><code>create_start  &nbsp;&nbsp;&nbsp;</code>[Category: Create Configuration Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_start();</code><br>          Puts Create back into active mode (all commands will work).  Active mode is the default mode at power on.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_mode"></a></td>  <td><code>get_create_mode  &nbsp;&nbsp;&nbsp;</code>[Category: Create Configuration Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_mode();</code><br>          Returns the Create's current operating mode (0=off, 1=passive, 2=safe, 3=full).  In passive mode, motor commands don't work.  All commands work in safe or full mode.  In safe mode, the Create will stop all motors and disconnect if any cliff sensors or wheel drop sensors go high.  In full mode, the Create will continue any movement commands and remain connected regardless of sensor values.      </dd>    </dl>  </td></tr></tbody></table><!-- Create Movement Functions --><a name="Create_movement"></a><h4>Create Movement Functions</h4><table><tbody><tr>  <td><a name="create_drive"></a></td>  <td><code>create_drive  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_drive(<font class="CVariable">int</font> speed, <font class="CVariable">int</font> radius);</code><br>          Moves the Create in an arc (see below for point turns and straight). Speed range for all commands is -500 to 500mm/sec and radius is -2000 to 2000mm.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_drive_direct"></a></td>  <td><code>create_drive_direct  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_drive_direct(<font class="CVariable">int</font> r_speed, <font class="CVariable">int</font> l_speed);</code><br>          Moves the Create by setting the speed for the left side and right side separately, speed range -500 to 500mm/sec.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_drive_straight"></a></td>  <td><code>create_drive_straight  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_drive_straight(<font class="CVariable">int</font> speed);</code><br>          Moves the Create straight at speed in the range -500 5o 500mm/sec.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_spin_CCW"></a></td>  <td><code>create_spin_CCW  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_spin_CCW(<font class="CVariable">int</font> speed);</code><br>          Spins the Create CounterClockWise with edge speed of speed of -500 to 500mm/sec.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_spin_CW"></a></td>  <td><code>create_spin_CW  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_spin_CW(<font class="CVariable">int</font> speed);</code><br>          Spins the Create ClockWise with edge speed of -500 to 500mm/sec.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_stop"></a></td>  <td><code>create_stop  &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_stop();</code><br>          Stops the Create drive wheels.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_distance"></a></td>  <td><code>get_create_distance &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_distance();</code><br>          Returns the accumulated distance the Create has traveled since it was turned on or since the distance was reset.  Moving backwards reduces this value.  The distance is in millimeters.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_normalized_angle"></a></td>  <td><code>get_create_normalized_angle &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_normalized_angle();</code><br>          Returns the accumulated angle the Create has turned since it was turned on or the distance was reset, normalized to the range 0 to 359 degrees.  Turning CCW increases this value and CW decreases the value.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_overcurrents"></a></td>  <td><code>get_create_overcurrents &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_overcurrents();</code><br>          Returns the overcurrent status byte  where the 16's bit indicates overcurrent in the left wheel; 8's bit overcurrent in the right wheel, 4's bit is LD2, 2's bit is LD0 and 1's bit is LD1 (LD is for the Create's 3 low side driver outputs, pins 22 to 24 for the connector in the Create cargo bay).  Seldom used in practice.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_requested_left_velocity"></a></td>  <td><code>get_create_requested_left_velocity &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_requested_left_velocity();</code><br>          Returns the speed the Create is moving (-500 to 500mm/sec) the left wheel according to the most recent movement command executed.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_requested_radius"></a></td>  <td><code>get_create_requested_radius &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_requested_radius();</code><br>          Returns the radius the Create is turning (-2000 to 2000mm) according to the most recent movement command executed.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_requested_right_velocity"></a></td>  <td><code>get_create_requested_right_velocity &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_requested_right_velocity();</code><br>          Returns the speed the Create is moving (-500 to 500mm/sec) the right wheel according to the most recent movement command executed.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_requested_velocity"></a></td>  <td><code>get_create_requested_velocity &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_requested_velocity();</code><br>          Returns the speed the Create is moving (-500 to 500mm/s) according to the most recent movement command executed.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_total_angle"></a></td>  <td><code>get_create_total_angle &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_total_angle();</code><br>          Returns the accumulated angle the Create has turned through since it was turned on or since the distance or angle was reset.  Turning CCW increases this value and CW decreases the value.      </dd>    </dl>  </td></tr><tr>  <td><a name="set_create_distance"></a></td>  <td><code>set_create_distance &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">void</font> set_create_distance(<font class="CVariable">int</font> dist);</code><br>          Resets the distance accumulation value for <code>get_create_distance</code> to the value specified.      </dd>    </dl>  </td></tr><tr>  <td><a name="set_create_normalized_angle"></a></td>  <td><code>set_create_normalized_angle &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">void</font> set_create_normalized_angle(<font class="CVariable">int</font> angle);</code><br>          Resets the normalized angle accumulation value for <code>get_create_normalized_angle</code> to the value specified.      </dd>    </dl>  </td></tr><tr>  <td><a name="set_create_total_angle"></a></td>  <td><code>set_create_total_angle &nbsp;&nbsp;&nbsp;</code>[Category: Create Movement Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">void</font> set_create_total_angle(<font class="CVariable">int</font> angle);</code><br>          Resets the total angle accumulation value for <code>get_create_total_angle</code> to the value specified.      </dd>    </dl>  </td></tr></tbody></table><!-- Create Sensor Functions --><a name="Create_sensors"></a><h4>Create Sensor Functions</h4><img class="center" src="images/CreateSensors.gif" width=50%></img><br><tr>  <td><a name="get_create_advance_button"></a></td>  <td><code>get_create_advance_button &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_advance_button();</code><br>          Returns 1 if the advance (<bold><code>&gt;&gt;</code>|</bold>) button is being pressed, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_bay_AI"></a></td>  <td><code>get_create_bay_AI &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_bay_AI();</code><br>          Returns the 10 bit analog value on pin 4 of the connector in the Create cargo bay.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_bay_DI"></a></td>  <td><code>get_create_bay_DI &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_bay_DI();</code><br>          Returns a byte for determining the current digital inputs (0 or 1) being applied to pins 16, 6, 18, 5, and 17 of the connector in the Create cargo bay.  The 128, 64, and 32 bits of the byte are not used.  The 16 bit is for pin 15, 8 bit for pin 6, 4 bit for pin 18, 2 bit for pin 5 and 1 bit for pin 17.  Pin 15 is used to alter communications baud rate.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_cwdrop"></a></td>  <td><code>get_create_cwdrop &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_cwdrop();</code><br>          Returns 1 if the front caster wheel has dropped, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_infrared"></a></td>  <td><code>get_create_infrared &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_infrared();</code><br>          Returns the byte detected from an iRobot remote control, Returns 255 if no byte has been detected.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lbump"></a></td>  <td><code>get_create_lbump &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lbump();</code><br>          Returns 1 if the left bumper is pressed, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lcliff"></a></td>  <td><code>get_create_lcliff &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lcliff();</code><br>          Returns 1 if the left cliff sensor is over a surface that doesn't reflect IR (e.g., black) or over a cliff, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lcliff_amt"></a></td>  <td><code>get_create_lcliff_amt &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lcliff_amt();</code><br>          Returns the left cliff sensor (analog) reading as a 12 bit value (0 to 4095).      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lfcliff"></a></td>  <td><code>get_create_lfcliff &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lfcliff();</code><br>          Returns 1 if left front cliff sensor is over a surface that doesn't reflect IR (e.g., black) or over a cliff, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lfcliff_amt"></a></td>  <td><code>get_create_lfcliff_amt &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lfcliff_amt();</code><br>          Returns the left front cliff sensor (analog) reading as a 12 bit value (0 to 4095).      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_lwdrop"></a></td>  <td><code>get_create_lwdrop &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_lwdrop();</code><br>          Returns 1 if the left wheel has dropped, 0 otherwise.  Materials supplied with the Create include two wheel clips that when installed will prevent the drive wheels from dropping.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_number_of_stream_packets"></a></td>  <td><code>get_create_number_of_stream_packets &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_number_of_stream_packets();</code><br>          If data streaming is being used, returns the size of the stream.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_play_button"></a></td>  <td><code>get_create_play_button &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_play_button();</code><br>          Returns 1 if the play button (<code><bold>&gt;</bold></code>) is being pressed, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rbump"></a></td>  <td><code>get_create_rbump &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rbump();</code><br>          Returns 1 if the right bumper is pressed, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rcliff"></a></td>  <td><code>get_create_rcliff &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rcliff();</code><br>          Returns 1 if right cliff sensor is over a surface that doesn't reflect IR (e.g., black) or over a cliff, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rcliff_amt"></a></td>  <td><code>get_create_rcliff_amt &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rcliff_amt();</code><br>          Returns the right cliff sensor (analog) reading as a 12 bit value (0 to 4095).      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rfcliff"></a></td>  <td><code>get_create_rfcliff &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rfcliff();</code><br>          Returns 1 if right frontcliff sensor is over a surface that doesn't reflect IR (e.g., black) or over a cliff, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rfcliff_amt"></a></td>  <td><code>get_create_rfcliff_amt &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rfcliff_amt();</code><br>          Returns the right front cliff sensor (analog) reading as a 12 bit value (0 to 4095).      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_rwdrop"></a></td>  <td><code>get_create_rwdrop &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_rlwdrop();</code><br>          Returns 1 if right wheel has dropped, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_vwall"></a></td>  <td><code>get_create_vwall &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_vwall();</code><br>          Returns 1 if an iRobot virtual wall beacon is detected, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_wall"></a></td>  <td><code>get_create_wall &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_wall();</code><br>          Returns 1 if a wall is detected by the right facing wall sensor, 0 otherwise.  There is no left facing wall sensor.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_wall_amt"></a></td>  <td><code>get_create_wall_amt &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_wall_amt();</code><br>          Returns the current wall sensor (analog) reading as a 12 bit value (0 to 4095).      </dd>    </dl>  </td></tr></tbody></table><!-- Create battery functions --><a name="Create_battery"></a><h4>Create Battery Functions</h4><table><tbody><tr>  <td><a name="get_create_battery_capacity"></a></td>  <td><code>get_create_battery_capacity &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_battery_capacity();</code><br>          Returns the battery capacity in mAh.    This function is seldom used in practice.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_battery_charge"></a></td>  <td><code>get_create_battery_charge &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_battery_charge();</code><br>          Returns the battery charge in mAh.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_battery_charging_state"></a></td>  <td><code>get_create_battery_charging_state &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_charging_state();</code><br>          0-not charging; 1-recondition charging; 2-full charging; 3-trickle charging; 4-waiting; 5-charge fault.  This function is seldom used in practice.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_battery_current"></a></td>  <td><code>get_create_battery_current &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_battery_current();</code><br>          Returns the current flow in mA.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_battery_temp"></a></td>  <td><code>get_create_battery_temp &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_battery_temp();</code><br>          Returns the battery temperature in degrees C.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_battery_voltage"></a></td>  <td><code>get_create_battery_voltage &nbsp;&nbsp;&nbsp;</code>[Category: Create Sensor Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_battery_voltage();</code><br>          Returns the battery voltage in mV.      </dd>    </dl>  </td></tr></tbody></table><!-- Create Built In Scripts --><a name="Create_built_ins"></a><h4>Create Built-in Script Functions</h4><table><tbody><tr>  <td><a name="create_create_spot"></a></td>  <td><code>create_spot  &nbsp;&nbsp;&nbsp;</code>[Category: Create Built In Script]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_spot();</code><br>          Simulates a Roomba doing a spot clean.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_cover"></a></td>  <td><code>create_cover  &nbsp;&nbsp;&nbsp;</code>[Category: Create Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_cover();</code><br>          Simulates a Roomba covering a room.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_demo"></a></td>  <td><code>create_demo  &nbsp;&nbsp;&nbsp;</code>[Category: Create Function]    <dl><dd>       Format: <code><font class="CVariable">void </font> create_demo(<font class="CVariable">int </font> d);</code><br>          Runs built in demos (see (<a href="http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf">Create Open Interface Manual</a>).      </dd>    </dl>  </td></tr><tr>  <td><a name="create_cover_dock"></a></td>  <td><code>create_cover_dock  &nbsp;&nbsp;&nbsp;</code>[Category: Create Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_cover_dock();</code><br>          Create roams around until its IR detects an iRobot IR docking station and then attempts to dock for recharging.      </dd>    </dl>  </td></tr></tbody></table><!-- Create music functions --><a name="Music_LED_functions"></a><h4>Create LED and Music Functions</h4><table><tbody><tr>  <td><a name="create_advance_led"></a></td>  <td><code>create_advance_led  &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_advance_led(<font class="CVariable">int</font> on);</code><br>          The value 1 causes the Advance LED light (<code>>></code>|) to turn on, 0 to turn it off.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_play_led"></a></td>  <td><code>create_play_led  &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_play_led(<font class="CVariable">int</font> on);</code><br>          The value 1 causes the Play LED (>) to turn on, 0 to turn it off.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_play_song"></a></td>  <td><code>create_play_song  &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_play_song(<font class="CVariable">int</font> num);</code><br>          Plays the specified song that has been loaded onto the Create.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_power_led"></a></td>  <td><code>create_power_led  &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_power_led(<font class="CVariable">int</font> color, int brightness);</code><br>          The value 0 cases the I/O pwer LED to turn red, 255 to turn green. Brightness ranges from 0 to 255 with 0 representing off.      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_song_number"></a></td>  <td><code>get_create_song_number &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_song_number();</code><br>          Returns the number of the song currently selected (0 to 15).      </dd>    </dl>  </td></tr><tr>  <td><a name="get_create_song_playing"></a></td>  <td><code>get_create_song_playing &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>      <dd>        Format: <code><font class="CVariable">int</font> get_create_song_playing();</code><br>          Returns 1 if a song is playing, 0 otherwise.      </dd>    </dl>  </td></tr><tr>  <td><a name="create_load_song"></a></td>  <td><code>create_load_song  &nbsp;&nbsp;&nbsp;</code>[Category: Create Music/LED Function]    <dl><dd>       Format: <code><font class="CVariable">void</font> create_load_song(<font class="CVariable">int</font> num);</code><br>          Loads a song from an internal 16 by 33 working array of integers to the Create, where the first column for each song is the number of notes (max is 16). The remaining columns alternate between pitch and duration. See (<a href="http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf">Create Open Interface Manual</a> for details.      </dd>    </dl>  </td></tr></tbody></table><div class="Indent"><h4>Example program for using the KIPR Link to control a Create module</h4><a name="MoveCreate"></a><pre><code><font class="Comment">/* This is a program to make the iRobot Create drive in a circle with a radius of 0.25 meters at a speed of 200 mm/sec for 10 seconds, the displaying the distance traveled around the circle and the angle that the turn covered */</font><font class="CVariable">int</font> main(){    printf(<font class="Quote">"connecting to Create\n"</font>);    create_connect();    set_create_distance(0); <font class="Comment">// reset the cumulative distance traveled</font>    set_create_total_angle(0); <font class="Comment">// reset the cumulative angle turned through</font>    create_drive(200, 250); <font class="Comment">// start move in an arc</font>    msleep(10000); <font class="Comment">// sleep for 10 seconds and stop</font>    create_stop();    printf(<font class="Quote">"\nResults:\n"</font>);    printf(<font class="Quote">"  distance = %d mm\n"</font>, get_create_distance(0.1));    printf(<font class="Quote">"  angle = %d degrees\n"</font>, get_create_total_angle(0.1));    printf(<font class="Quote">"\ndisconnecting from Create\n"</font>);    create_disconnect();}</code></pre></div><div class="Indent"><a name="Create_script_example"></a><h4>Example Create script definition using the KIPR Link</h4><p>The iRobot Create has several built in scripts, mostly to serve the needs of its cousin, the iRobot Roomba.   The Open Interface provides byte code commands for running these.  It also has a byte code command for loading a user defined script onto the iRobot Create along with a byte code command to start it running.   The user defined script remains available until the iRobot Create is power cycled.</p><p>Unlike high level languages, scripts for the iRobot Create have no provision for flow of control commands such as if and while, but can use commands to wait for an elapsed time, or for a specified distance or angle to be reached, or for an event such as a bump (wait commands are not available except within scripts).</p><p>Memory for storing a user defined script is limited to 100 bytes.</p><p>In this example, a function is used to download a sequence of byte commands to the iRobot Create to load a script.  The example script is designed to cause the Create to move 1/2 meter at 500 mm/sec (uninterruptable). The script definition follows the first two bytes sent to the Create (byte command 152, and a byte whose numeric value gives the number of bytes that follow). Note that the number of bytes for the script is just the count of the <code>create_write_byte</code> function calls used after the first two.  See the <a href="http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf">Create Open Interface manual</a> for information on the byte commands.</p><a name="CreateScriptExample"></a><pre><code><font class="Preprocessor">#define RUN_SCRIPT create_write_byte(153)</font> <font class="Comment">// macro to run the currently loaded script</font><font class="CVariable">void</font> make_drive_script(<font class="CVariable">int</font> dist, <font class="CVariable">int</font> speed) {   create_write_byte(152);        <font class="Comment">// specifies start of script definition</font>   create_write_byte(13);         <font class="Comment">// specifies number of bytes to follow,(defining the script)</font>   create_write_byte(137);        <font class="Comment">// drive command (speed and turn radius in next 4 bytes)</font>   create_write_byte(speed >> 8); <font class="Comment">// send speed high byte (bits 8-15 shifted to 0-7)</font>   create_write_byte(speed);      <font class="Comment">// send speed low byte</font>   create_write_byte(128);        <font class="Comment">// send hex 80</font>   create_write_byte(0);          <font class="Comment">// send hex 00 (special case: turn radius hex 8000 or 7FFF is straight)</font>   create_write_byte(156);        <font class="Comment">// wait for distance done (in mm)</font>   create_write_byte(dist >> 8);  <font class="Comment">// send dist high byte</font>   create_write_byte(dist);       <font class="Comment">// send dist low byte</font>   create_write_byte(137);        <font class="Comment">// stop move by changing speed and radius to 0</font>   create_write_byte(0);          <font class="Comment">// send high byte (0 speed)</font>   create_write_byte(0);          <font class="Comment">// send low byte (0 speed)</font>   create_write_byte(0);          <font class="Comment">// null turn radius</font>   create_write_byte(0);          <font class="Comment">// null turn radius</font>   <font class="Comment">// end of script (13 bytes)</font>}<font class="CVariable">int</font> main() { <font class="Comment">// program to load and test the above script</font>   create_connect();   set_create_distance(0);   set_create_total_angle(0);   make_drive_script(500, 500); <font class="Comment">// script to move 0.5m at 500 mm/sec</font>   msleep(500); <font class="Comment">// give serial connection some time</font>   RUN_SCRIPT;   msleep(2000); <font class="Comment">// allow time for the script to finish (+ some extra)</font>   printf(<font class="Quote">"  distance traveled = %d mm\n"</font>, get_create_distance());   printf(<font class="Quote">"  angle turned = %d degrees\n"</font>, get_create_total_angle());   create_disconnect();}</code></pre></div><!--Functions Categorized--><a name="FunctionsCategorized"></a><h3>Categorized Function List (cross-linked)</h3>Each function listed is provided with a cross link to its library description.<div class="indent"><a name="CategoryBotball"></a><h4>Botball</h4><table>  <tbody>    <tr><td>    <ul><code>      <li><font class="CVariable">void</font> run_for(<font class="CVariable">double</font> delay, &lt;function_name&gt;);  [<a href="#run_for">&sect;</a>]</li>      <li><font class="CVariable">void</font> shut_down_in(<font class="CVariable">double</font> delay);  [<a href="#Botball">&sect;</a>]</li><!--	  <li><font class="CVariable">int</font> target_cha_in_chb(<font class="CVariable">int</font> cha, <font class="CVariable">int</font> chb, <font class="CVariable">int</font> *x, <font class="CVariable">int</font> *y)</li>-->      <li><font class="CVariable">void</font> wait_for_light(<font class="CVariable">int</font> light_port_);  [<a href="#Botball">&sect;</a>]</li>      </code>    </ul>    </td>    </tr>  </tbody></table><a name="CategoryCreate"></a><h4>Create</h4><table>  <tbody>    <tr><td alignment="top">      <ul><code>        <b></code>Serial Interface<code></b>        <li><font class="CVariable">void</font> create_clear_serial_buffer(); [<a href="#create_clear_serial_buffer">&sect;</a>]</li>        <li><font class="CVariable">int</font> create_connect();  [<a href="#create_connect">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_disconnect();  [<a href="#create_disconnect">&sect;</a>]</li>        <li><font class="CVariable">int</font> create_read_block(<font class="CVariable">char</font> *data, <font class="CVariable">int</font> count);  [<a href="#create_read_block">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_write_byte(<font class="CVariable">char</font> byte);  [<a href="#create_write_byte">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_full();  [<a href="#create_full">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_start();  [<a href="#create_start">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_passive();  [<a href="#create_passive">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_safe();  [<a href="#create_safe">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_mode();  [<a href="#get_create_mode">&sect;</a>]</li>        <b></code>Movement<code></b>        <li><font class="CVariable">void</font> create_drive(<font class="CVariable">int</font> speed, <font class="CVariable">int</font> radius);  [<a href="#create_drive">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_drive_direct(<font class="CVariable">int</font> r_speed, <font class="CVariable">int</font> l_speed);  [<a href="#create_drive_direct">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_drive_straight(<font class="CVariable">int</font> speed);  [<a href="#create_drive_straight">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_spin_CCW(<font class="CVariable">int</font> speed);  [<a href="#create_spin_CCW">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_spin_CW(<font class="CVariable">int</font> speed);  [<a href="#create_spin_CW">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_stop();  [<a href="#create_stop">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_distance();  [<a href="#get_create_distance">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_normalized_angle();  [<a href="#get_create_normalized_angle">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_overcurrents();  [<a href="#get_create_overcurrents">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_requested_left_velocity();  [<a href="#get_create_requested_left_velocity">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_requested_radius();  [<a href="#get_create_requested_radius">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_requested_right_velocity();  [<a href="#get_create_requested_right_velocity">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_requested_velocity();  [<a href="#get_create_requested_velocity">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_total_angle();  [<a href="#get_create_total_angle">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_create_distance(<font class="CVariable">int</font> dist);  [<a href="#set_create_distance">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_create_normalized_angle(<font class="CVariable">int</font> angle);  [<a href="#set_create_normalized_angle">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_create_total_angle(<font class="CVariable">int</font> angle);  [<a href="#set_create_total_angle">&sect;</a>]</li>         <b></code>Battery<code></b>        <li><font class="CVariable">int</font> get_create_battery_capacity();  [<a href="#get_create_battery_capacity">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_battery_charge();  [<a href="#get_create_battery_charge">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_charging_state();  [<a href="#get_create_charging_state">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_battery_current();  [<a href="#get_create_battery_current">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_battery_temp();  [<a href="#get_create_battery_temp">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_battery_voltage();  [<a href="#get_create_battery_voltage">&sect;</a>]</li>      </code></ul></td>      <td><ul><code>        <b></code>Sensors<code></b>        <li><font class="CVariable">int</font> get_create_advance_button();  [<a href="#get_create_advance_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_bay_DI();  [<a href="#get_create_bay_DI">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_bay_AI();  [<a href="#get_create_bay_AI">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_cwdrop();  [<a href="#get_create_cwdrop">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_infrared();  [<a href="#get_create_infrared">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lbump();  [<a href="#get_create_lbump">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lcliff();  [<a href="#get_create_lcliff">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lcliff_amt();  [<a href="#get_create_lcliff_amt">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lfcliff();  [<a href="#get_create_lfcliff">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lfcliff_amt();  [<a href="#get_create_lfcliff_amt">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_lwdrop();  [<a href="#get_create_lwdrop">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_number_of_stream_packets();  [<a href="#get_create_number_of_stream_packets">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_play_button();  [<a href="#get_create_play_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rbump();  [<a href="#get_create_rbump">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rcliff();  [<a href="#get_create_rcliff">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rcliff_amt();  [<a href="#get_create_rcliff_amt">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rfcliff();  [<a href="#get_create_rfcliff">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rfcliff_amt();  [<a href="#get_create_rfcliff_amt">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_rlwdrop();  [<a href="#get_create_rlwdrop">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_vwall();  [<a href="#get_create_vwall">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_wall();  [<a href="#get_create_wall">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_wall_amt();  [<a href="#get_create_wall_amt">&sect;</a>]</li>        <b></code>Built in Scripts<code></b>        <li><font class="CVariable">void </font> create_spot();  [<a href="#create_spot">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_cover();  [<a href="#create_cover">&sect;</a>]</li>        <li><font class="CVariable">void </font> create_demo(<font class="CVariable">int </font> d);  [<a href="#create_demo">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_cover_dock();  [<a href="#create_cover_dock">&sect;</a>]</li>        <b></code>LEDs and Music<code></b>        <li><font class="CVariable">void</font> create_advance_led(<font class="CVariable">int</font> on);  [<a href="#create_advance_led">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_song_number();  [<a href="#get_create_song_number">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_create_song_playing();  [<a href="#get_create_song_playing">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_load_song(<font class="CVariable">int</font> num);  [<a href="#create_load_song">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_play_led(<font class="CVariable">int</font> on);  [<a href="#create_play_led">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_play_song(<font class="CVariable">int</font> num);  [<a href="#create_play_song">&sect;</a>]</li>        <li><font class="CVariable">void</font> create_power_led(<font class="CVariable">int</font> color, int brightness);  [<a href="#create_power_led">&sect;</a>]</li>      </code></ul</td>    </tr></table><a name="CategoryMath"></a><h4>Math</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">double</font> atan(<font class="CVariable">double</font> angle);  [<a href="#atan">&sect;</a>]</li>        <li><font class="CVariable">double</font> cos(<font class="CVariable">double</font> angle);  [<a href="#cos">&sect;</a>]</li>        <li><font class="CVariable">double</font> exp(<font class="CVariable">double</font> num);  [<a href="#exp">&sect;</a>]</li>        <li><font class="CVariable">double</font> exp10(<font class="CVariable">double</font> num);  [<a href="#exp10">&sect;</a>]</li>        <li><font class="CVariable">double</font> log(<font class="CVariable">double</font> num);  [<a href="#log">&sect;</a>]</li>        <li><font class="CVariable">int</font> log10(<font class="CVariable">double</font> num);  [<a href="#log10">&sect;</a>]</li>        <li><font class="CVariable">double</font> pow(<font class="CVariable">double</font> x, <font class="CVariable">double</font> y);  [<a href="#pow">&sect;</a>]</li>        <li><font class="CVariable">int</font> rand(<font class="CVariable">int</font> m);  [<a href="#rand">&sect;</a>]</li>        <li><font class="CVariable">double</font> sin(<font class="CVariable">double</font> angle);  [<a href="#sin">&sect;</a>]</li>        <li><font class="CVariable">double</font> sqrt(<font class="CVariable">double</font> num);  [<a href="#sqrt">&sect;</a>]</li>		<li><font class="CVariable">void</font> srand(<font class="CVariable">int</font> s);  [<a href="#srand">&sect;</a>]</li>        <li><font class="CVariable">double</font> tan(<font class="CVariable">double</font> angle);  [<a href="#tan">&sect;</a>]</li>        </code>      </ul>      </td>    </tr>  </tbody></table><a name="CategoryMotors"></a><h4>Motors</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">void</font> alloff();  [<a href="#alloff">&sect;</a>]</li>        <li><font class="CVariable">void</font> ao();  [<a href="#ao">&sect;</a>]</li>        <li><font class="CVariable">void</font> bk(<font class="CVariable">int</font> m);  [<a href="#bk">&sect;</a>]</li>        <li><font class="CVariable">void</font> block_motor_done(<font class="CVariable">int</font> m);  [<a href="#block_motor_done">&sect;</a>]</li>        <li><font class="CVariable">void</font> bmd(<font class="CVariable">int</font> m);  [<a href="#bmd">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_motor_done(<font class="CVariable">int</font> m);  [<a href="#get_motor_done">&sect;</a>]</li>        <li><font class="CVariable">void</font> clear_motor_position_counter(<font class="CVariable">int</font> motor_nbr);  [<a href="#clear_motor_position_counter">&sect;</a>]</li>        <li><font class="CVariable">void</font> fd(<font class="CVariable">int</font> m);  [<a href="#fd">&sect;</a>]</li>        <li><font class="CVariable">void</font> freeze(<font class="CVariable">int</font> m);  [<a href="#freeze">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_motor_done(<font class="CVariable">int</font> m);  [<a href="#get_motor_done">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_motor_position_counter(<font class="CVariable">int</font> m);  [<a href="#get_motor_position_counter">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_pid_gains(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> p, <font class="CVariable">int</font> i, <font class="CVariable">int</font> d, <font class="CVariable">int</font> pd, <font class="CVariable">int</font> id, <font class="CVariable">int</font> dd);  [<a href="#get_pid_gains">&sect;</a>]</li>        <li><font class="CVariable">void</font> mav(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);  [<a href="#mav">&sect;</a>]</li>        <li><font class="CVariable">void</font> motor(<font class="CVariable">int</font> m, <font class="CVariable">int</font> p);  [<a href="#motor">&sect;</a>]</li>        <li><font class="CVariable">void</font> move_at_velocity(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);  [<a href="#move_at_velocity">&sect;</a>]</li>        <li><font class="CVariable">void</font> move_relative_position(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);  [<a href="#move_relative_position">&sect;</a>]</li>        <li><font class="CVariable">void</font> move_to_position(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);  [<a href="#move_to_position">&sect;</a>]</li>        <li><font class="CVariable">void</font> mrp(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);  [<a href="#mrp">&sect;</a>]</li>        <li><font class="CVariable">void</font> mtp(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);  [<a href="#mtp">&sect;</a>]</li>        <li><font class="CVariable">void</font> off(<font class="CVariable">int</font> m);  [<a href="#off">&sect;</a>]</li>        <li><font class="CVariable">int</font> set_pid_gains(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> p, <font class="CVariable">int</font> i, <font class="CVariable">int</font> d, <font class="CVariable">int</font> pd, <font class="CVariable">int</font> id, <font class="CVariable">int</font> dd);  [<a href="#set_pid_gains">&sect;</a>]</li>        <li><font class="CVariable">int</font> setpwm(<font class="CVariable">int </font>m, <font class="CVariable">int</font> dutycycle);  [<a href="#setpwm">&sect;</a>]</li>        </code>      </ul>    </td>  </tr></tbody></table><a name="CategoryOutput"></a><h4>Output</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">void</font> beep();  [<a href="#beep">&sect;</a>]</li>        <li><font class="CVariable">void</font> console_clear();  [<a href="#console_clear">&sect;</a>]</li>        <li><font class="CVariable">void</font> display_clear();  [<a href="#display_clear">&sect;</a>]</li>        <li><font class="CVariable">void</font> display_printf(<font class="CVariable">int</font> col, <font class="CVariable">int</font> row, <font class="CVariable">char</font> s[], . . .);  [<a href="#display_printf">&sect;</a>]</li>        <li><font class="CVariable">void</font> extra_buttons_show();  [<a href="#extra_buttons_show">&sect;</a>]</li>        <li><font class="CVariable">void</font> extra_buttons_hide();  [<a href="#extra_buttons_hide">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_a_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_a_button_text">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_b_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_b_button_text">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_c_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_c_button_text">&sect;</a>]</li>		<li><font class="CVariable">void</font> set_digital_output(<font class="CVariable">int</font> port, <font class="CVariable">int</font> inout);  [<a href="#set_digital_output">&sect;</a>]</li>		<li><font class="CVariable">void</font> set_digital_value(<font class="CVariable">int</font> port, <font class="CVariable">int</font> value);  [<a href="#set_digital_value">&sect;</a>]</li>		<li><font class="CVariable">void</font> set_x_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_x_button_text">&sect;</a>]</li>		<li><font class="CVariable">void</font> set_y_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_y_button_text">&sect;</a>]</li>		<li><font class="CVariable">void</font> set_z_button_text<font class="CVariable">char</font> txt[]);  [<a href="#set_z_button_text">&sect;</a>]</li>		</code>      </ul>      </td>    </tr>  </tbody></table><a name="CategoryThreads"></a><h4>Threads</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">thread</font> thread_create(&lt;function_name&gt;);  [<a href="#thread_create">&sect;</a>]</li>        <li><font class="CVariable">void</font> thread_destroy(&lt;thread id&gt;);  [<a href="#thread_destroy">&sect;</a>]</li>        <li><font class="CVariable">void</font> thread_start(&lt;thread id&gt;);  [<a href="#thread_start">&sect;</a>]</li>        <li><font class="CVariable">void</font> thread_wait(&lt;thread id&gt;);  [<a href="#thread_wait">&sect;</a>]</li>        <li><font class="CVariable">void</font> run_for(<font class="CVariable">double</font> sec, <font class="CVariable">void</font> &lt;function_name&gt;);  [<a href="#run_for">&sect;</a>]</li>        </code>      </ul>    </td>  </tr></tbody></table><a name="CategorySensors"></a><h4>Sensors</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">int</font> a_button();  [<a href="#a_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> a_button_clicked();  [<a href="#a_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> accel_x();  [<a href="#accel_x">&sect;</a>]</li>        <li><font class="CVariable">int</font> accel_y();  [<a href="#accel_y">&sect;</a>]</li>        <li><font class="CVariable">int</font> accel_z();  [<a href="#accel_z">&sect;</a>]</li>        <li><font class="CVariable">int</font> analog(<font class="CVariable">int</font> p);  [<a href="#analog">&sect;</a>]</li>        <li><font class="CVariable">int</font> analog10(<font class="CVariable">int</font> p);  [<a href="#analog10">&sect;</a>]</li>        <li><font class="CVariable">int</font> any_button();  [<a href="#any_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> b_button();  [<a href="#b_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> b_button_clicked();  [<a href="#b_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> c_button();  [<a href="#c_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> c_button_clicked();  [<a href="#c_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> digital(<font class="CVariable">int</font> p);  [<a href="#digital">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_analog_pullup(<font class="CVariable">int</font> port);  [<a href="#get_analog_pullup">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_digital_pullup(<font class="CVariable">int</font> port);  [<a href="#get_digital_pullup">&sect;</a>]</li>        <li><font class="CVariable">double</font> power_level();  [<a href="#power_level">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_extra_buttons_visible();  [<a href="#get_extra_buttons_visible">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_analog_pullup(<font class="CVariable">int</font> port, <font class="CVariable">int</font> pullupTF);  [<a href="#set_analog_pullup">&sect;</a>]</li>        <li><font class="CVariable">void</font> set_digital_pullup(<font class="CVariable">int</font> port, <font class="CVariable">int</font> pullupTF);  [<a href="#set_digital_pullup">&sect;</a>]</li>        <li><font class="CVariable">int</font> side_button();  [<a href="#side_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> side_button_clicked();  [<a href="#side_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> x_button();  [<a href="#x_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> x_button_clicked();  [<a href="#x_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> y_button();  [<a href="#y_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> y_button_clicked();  [<a href="#y_button_clicked">&sect;</a>]</li>        <li><font class="CVariable">int</font> z_button();  [<a href="#z_button">&sect;</a>]</li>        <li><font class="CVariable">int</font> z_button_clicked();  [<a href="#z_button_clicked">&sect;</a>]</li>        </code>      </ul>      </td>    </tr>  </tbody></table><a name="CategoryServos"></a><h4>Servos</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">void</font> disable_servo(<font class="CVariable">int</font> p);  [<a href="#disable_servo">&sect;</a>]</li>        <li><font class="CVariable">void</font> disable_servos();  [<a href="#disable_servos">&sect;</a>]</li>        <li><font class="CVariable">void</font> enable_servo(<font class="CVariable">int</font> p);  [<a href="#enable_servo">&sect;</a>]</li>        <li><font class="CVariable">void</font> enable_servos();  [<a href="#enable_servos">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_servo_enabled(<font class="CVariable">int</font> srv);  [<a href="#get_servo_enabled">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_servo_position(<font class="CVariable">int</font> srv);  [<a href="#get_servo_position">&sect;</a>]</li>        <li><font class="CVariable">int</font> set_servo_position(<font class="CVariable">int</font> srv, <font class="CVariable">int</font> pos);  [<a href="#set_servo_position">&sect;</a>]</li>        </code>      </ul>      </td>    </tr>  </tbody></table><a name="CategoryTime"></a><h4>Time</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">void</font> msleep(<font class="CVariable">int</font> msec);  [<a href="#msleep">&sect;</a>]</li>        <li><font class="CVariable">double</font> seconds();  [<a href="#seconds">&sect;</a>]</li>        </code>      </ul>      </td>    </tr>  </tbody></table><a name="CategoryVision"></a><h4>Vision</h4><table>  <tbody>    <tr>      <td>      <ul><code>        <li><font class="CVariable">void</font> camera_close();  [<a href="#camera_close">&sect;</a>]</li>        <li><font class="CVariable">int</font> camera_load_config(<font class="CVariable">char</font> name[]);   [<a href="#camera_load_config">&sect;</a>]</li>        <li><font class="CVariable">int</font> camera_open(<font class="CVariable">int</font> res_numb);  [<a href="#camera_open">&sect;</a>]</li>        <li><font class="CVariable">int</font> camera_open_device(<font class="CVariable">int</font> number,<font class="CVariable"> int</font> res_numb);  [<a href="#camera_open_device">&sect;</a>]</li>        <li><font class="CVariable">int</font> camera_update();  [<a href="#camera_update">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_channel_count();  [<a href="#get_channel_count">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_object_area(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_area">&sect;</a>]</li>        <li><font class="CVariable">rectangle</font> get_object_bbox</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_bbox">&sect;</a>]</li>        <li><font class="CVariable">point2</font> get_object_center</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_center">&sect;</a>]</li>        <li><font class="CVariable">point2</font> get_object_centroid</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_centroid">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_code_num(<font class="CVariable">int</font> channel, int</font> object);  [<a href="#get_code_num">&sect;</a>]</li>        <li><font class="CVariable">double</font> get_object_confidence</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_confidence">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_object_count</font>(<font class="CVariable">int</font> channel);  [<a href="#get_object_count">&sect;</a>]</li>        <li><font class="CVariable">char</font> *get_object_data</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_data">&sect;</a>]</li>        <li><font class="CVariable">int</font> get_object_data_length</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object);  [<a href="#get_object_data_length">&sect;</a>]</li>        </code>      </ul>    </td>  </tr></tbody></table></div><!--Botball--><a name="Botball"></a><h3>Botball</h3><p>Several functions have been created to assist programmers in creating programs that meet the basic Botball requirements of having robots wait until the starting lights come on and have their programs shut down after a specified amount of time.  A typical Botball program will call the function</p><div class="Indent"><code>wait_for_light(&lt;</code>port_num<code>&gt;);</code></div><p>following any other set up routines it might be using.  This function walks the robot operator through the light calibration routine, reports if the calibration was sucessful, and if it was, blocks further execution of the function until the light is turned on (if not, the process repeats after a brief pause). Normally this is immediately followed by a call to the Botball function</p><div class="Indent"><code>shut_down_in(&lt;</code>time<code>&gt;);</code></div><p>which will shutdown all motors and the Create once the specified time has expired, then terminate the program.  If instead of completely killing the program you wish to do some activity for a specified time and then move on to other things, the function </p><div class="Indent"><code>run_for(&lt;</code>time<code>&gt;, &lt;</code>func_name<code>&gt;);</code></div><p>will execute the requested function for the specified time and then halt that function if it has not already exited, allowing the statements following the <code>run_for</code> statement to be executed (such having servo motors maintain position).</p><!--<p> The function </p><div class="Indent"><code>target_cha_in_chb(&lt;</code>cha<code>&gt;, &lt;</code>chb<code>&gt;, &lt;*</code>x<code>&gt;, &lt;*</code>y<code>&gt;);</code></div><p>uses the vision system to look for a color target where the color described in the color channel a is completelysurrounded by the color described by the color channel b.  The addresses of to two integer variables, x & y, are also passed.  If a suitable target is found in the current frame (this function does NOT perform a track_update() call) then the function returns 1 and the contents of the two variables x and y are changed to match the image pixel location of the centroid of the color blob associated with the inside of the target.  If no target with the right colors is in view, then 0 is returned and x and y are not modified.  If more than one target is in view, the one with the larger inner blob (as seen by the camera) is the one whose coordinates are returned. An example of use, where the inner color is on channel 3 and the outer on 2, might be:</p><div class="Indent"><code><font class="CVariable">int</font> x, y;<br><font class="CVariable">if</font> (target_cha_in_chb(3,2,&x,&y)==1) printf(<font class="Quote">"Target found at (%d,%d)\n"</font>, x, y);</code></div>--><p>The library functions for Botball are:</p><table style="background-color: #f0f0f0;"><tr><td><br><div class="Indent"><code><a name="run_forx"></a>run_for(&lt;</code>time<code>&gt;, &lt;</code>function_name<code>&gt;);</code>    <dl><dd>Runs the specified function and tracks its execution until either the function finishes or the specified number of seconds has elapsed. If the specified number of seconds has elapsed, <code>run_for</code> terminates execution for the function.    </dd></dl><code><a name="shut_down_inx"></a>shut_down_in(&lt;</code>time<code>&gt;);</code>    <dl><dd>Starts a timing routine that will end program execution, turn off all motors, and issue a stop command to the Create when the specified amount of time has elapsed.</dd></dl> <!-- no longer in code library<code><a name="target_cha_in_chbx"></a>target_cha_in_chb(&lt;cha</code>&gt;, &lt;chb<code>&gt;, &lt;*</code>x<code>&gt;, lt;*</code>y<code>&gt;);</code>    <dl><dd>Looks for a target consisting of a color blob on a color background, where the channel number for the inner color is <code>cha</code> and for the surrounding surrounding background is <code>chb</code>. If the target is found then the function returns 1, otherwise 0.  If a target is found then the contents of the variables pointed to by x and y are changed to the center coordinate of the inner blob.    </dd></dl>--><code><a name="wait_for_lightx"></a>wait_for_light(&lt;</code>port<code>&gt;);</code>    <dl><dd>Steps the user through a calibration procedure to establish on/off light levels for a sensor plugged in the specified port. If calibration does not provide enough discrimination between light off and light on, the program cycles for another try.  If there is enough discrimination, after "light off", the program blocks continued execution of the function until "light on", at which point execution resumes.  <code>wait_for_light</code> is normally placed at the beginning of a program designed to operate a robot, so that after calibration, when the light comes on the robot will start autonomously.    </dd></dl></div></td></tr></table><div class="Indent"><h4>Example program for the KIPR Link using a Botball program format</h4><a name="BotballFormat"></a><pre><code><font class="CVariable">int</font> main(){   <font class="CVariable">double</font> s;   <font class="CVariable">int</font> i;   <font class="Comment">/* Botball calibration: determine if light sensor can discriminate between light and dark */</font>   wait_for_light(3);  <font class="Comment">// light sensor in analog port 3</font>   <font class="Comment">/* Botball timimg: limit is 120 seconds; e.g., shut_down_in(119.5); */</font>   shut_down_in(10.5); <font class="Comment">// stop execution if 10.5 seconds have elapsed</font>   <font class="Comment">/* Botball program logic would be next ... the stuff below is just to keep the program running for awhile */</font>   display_clear(); <font class="Comment">// clear display for display_printf</font>   s=seconds(); <font class="Comment">// system on time at start</font>   <font class="CVariable">for</font>(i=0; i<15; i++) {      display_printf(1,1,<font class="Quote">"%d. time elapsed = %.2f\n   "</font>, i, seconds()-s);      msleep(1000); <font class="Comment">// sleep for a second</font>   }   display_printf(1,3,<font class="Quote">"done"</font>);}</code></pre></div><!--Threads--><a name="Threads"></a><h3>Threads</h3><p>The term thread is short for the phrase "thread of execution", and represents a sequence of instructions to be managed by the system as it schedules processimg time among running processes.  On a single processor machine, like the KIPR Link, the instructions running in separate threads appear to be operating in parallel. Each thread, once started, will continue until its process finishes or until it is forcibly terminated by another process using the <code>thread_destroy</code> function. Each active thread gets a small amount of time in turn until all of its statements have been executed or it is forcibly terminated. If a thread's process cannot complete all of its statements before its turn is over, it is paused temporarily for the next thread to gets its share of time. This continues until all the active threads have gotten their slice of time and then thread processing repeats.  The Link's processor is fast enough so that from the user's viewpoint it appears that all of the active processes are running in parallel.</p><p>Functions running in threads can communicate with one another by reading and modifying global variables. The global variables can be used as semaphores so that one process can signal another when it is not in a section of code that might cause a conflict. Process IDs may also be stored in global variables of type <font class="CVariable">thread</font> so that one process can destroy another one's thread if that is necessary program logic (think in terms of a process that is in an indefinite loop monitoring sensors, so it will never finish otherwise).</p><p>The library functions for controlling threads are:</p><table style="background-color: #f0f0f0;"><tr><td><br><div class="Indent"><code><a name="thread_createx"></a>thread_create(&lt;</code>function_name<code>&gt;);</code>    <dl><dd>Creates a thread for running the specified function and returns a value of type <font class="CVariable">thread</font>, which is the thread ID to be used for running the thread as an independent process.    </dd></dl><code><a name="thread_destroyx"></a>thread_destroy(&lt;</code>thread_id<code>&gt;);</code>    <dl><dd>Deactivates the specified thread if it is active (stopping its associated function) and destroys its thread ID.    </dd></dl><code><a name="thread_startx"></a>thread_start(&lt;</code>thread_id<code>&gt;);</code>    <dl><dd>Activates the specified thread by running its associated process in the thread.    </dd></dl><code><a name="thread_waitx"></a>thread_wait(&lt;</code>thread_id<code>&gt;);</code>    <dl><dd>Suspends execution of the function that calls <code>thread_wait</code> while the specified thread remains active.  It's purpose is to synchronize threads by suspending further execution of a function until the selected active threads have finished.    </dd></dl></div></td></tr></table><div class="Indent"><h4>Example program for the KIPR Link using threads</h4><pre><code><font class="CVariable">int</font> flag=0; <font class="Comment">// global flag to signal when side button pressed</font><font class="CVariable">void</font> chksens() {   <font class="CVariable">while</font> (1) {      <font class="CVariable">if</font> (side_button()) flag = 1;      msleep(100); <font class="Comment">// check side button every 1/10th second</font>   }}<font class="intCVariable"></font> main() {   <font class="CVariable">int</font> cnt = 0;   <font class="CVariable">thread</font> tid; <font class="Comment">// thread variable for holding thread id</font>   tid = thread_create(chksens); <font class="Comment">// create a thread for chksens</font>   thread_start(tid); <font class="Comment">// start chksens running in its thread</font>   <font class="CVariable">while</font> (flag == 0) { <font class="Comment">// button press during sleep is still caught</font>      display_printf(1,2,<font class="Quote">"elapsed time %d   "</font>,++cnt);      msleep(1000);   }   thread_destroy(tid); <font class="Comment">// remove the thread</font>   display_printf(0,4,<font class="Quote">"done"</font>);}</code></pre></div><!--KIPR Link Images--><a name="LinkImages"></a><h2>KIPR Link Images</h2><div class="Indent"><!--sensors--><a name="LinkSensors"></a><h3>Sensor Images</h3><p>The image below is the front of the KIPR Link showing where the analog and digital sensor ports are located.</p><img class="center" src="images/Link_sensor_ports.gif" width="70%"></img><p class="center"><br>Examples of sensors used with the KIPR Link</p><table class="centerTable" border="1" cellpadding="5" cellspacing="0">  <tbody>    <tr>      <td align="center" valign="center"><a href="#light_sensor"><br>      <img border="0" src="images/LightSensor.gif" width=60%><br>      IR light sensor<br>      </a> (analog)      </td>      <td align="center" valign="center"> <a href="#reflectance_sensors"> <img border="0" src="images/Reflectance_sensors.gif" width="60%"><br>      IR reflectance sensors<br>      </a> (analog)</font>      </td>      <td align="center" valign="center"> <a href="#ET_sensor"> <img border="0" src="images/ET.gif" width="60%"><br>      IR "E.T." Distance Sensor<br>      </a> (floating analog)      </td>    </tr>    <tr>      <td align="center" valign="center" colspan="2"><a href="#touch_sensors"><br>      <img border="0" src="images/TouchSensors.gif"><br>      Touch Sensors<br>      </a> (digital)      </td>      <td align="center" valign="center"><a href="#break_beam_sensor"><br>      <img border="0" src="images/BreakBeam.gif"><br>      IR "Break Beam" Sensor<br>      </a> (digital)</font>      </td>    </tr>    <tr>      <td align="center" valign="center"><a href="#analog_slider"><br>      <img border="0" src="images/AnalogSlider.gif"/><br>      Slider sensor<br>      </a> (analog)      </td>      <td align="center" valign="center"><a href="#analog_pot"><br>      <img border="0" src="images/AnalogPot.gif"><br>      Potentiometer (Pot) Sensor<br>      </a> (analog)      </td>      <td align="center" valign="center"><a href="#sensors"><br>      <img border="0" height="120" width="60" src="images/sonar.jpg"><br>      Ultrasonic rangefinder (SONAR)      </a>      </td>    </tr>    </tbody></table></p><!--light_sensor--><div class="Indent"><a name="light_sensor"></a><h4>Infrared light sensor (analog)</h4><img border="0" src="images/LightSensor.gif" width="40%"><br><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <code><a href="#analog">analog10</a>(&lt;port#&gt;) </code></li>  <li>Low values indicate lots of Infrared</li>  <li>High values indicate low Infrared</li>  <li>Sensor is somewhat directional and can be made more so using an opaque tube or lego to block out extraneous light.&nbsp; Sensor can be attenuated by placing paper in front.</li></ul><!--Reflectance Sensors--><a name="reflectance_sensors"></a><h4>Infrared large and small reflectance sensors (analog)</h4><img border="0" src="images/Reflectance_sensors.gif" width="30%"><br><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <code><a href="#analog">analog10</a>(&lt;port#&gt;);</code></li>  <li>Values measure IR reflection from a surface, allowing a robot to detect surface features such as a black tape line</li>  <li>Dark surfaces produce high readings (low IR reflectivity) and light surfaces produce low readings (high IR reflectivity)</i>  <li>Proximity of sensor to surface affects the difference in readings, so can be used to detect drop-offs</li>  <li>Sensor has a reflectance range of about 3 inches</li></ul><!--ET_sensor--><a name="ET_sensor"></a><h4>Infrared "E.T." Distance Sensor (floating analog)</h4><img border="0" src="images/ET.gif"><br><ul>  <li>Floating analog sensor (pullup resistor for port must be disabled for readings to be meaningful)</li>  <li>Connect to port 0-7</li>  <li>Access with function <code><a href="#analog">analog10</a></font>(&lt;port#&gt;)</code>;</li>  <li>Low values indicate large distance</li>  <li>High values indicate distance approaching ~4 inches</li>  <li>Range is 4-30 inches.&nbsp; Result is approximately 1/(d)^2. Objects closer than 4 inches will have the same readings as those far away.</li>  <li>Sharp Electronics part number GP2D12</li>  <li>Sensor shines a narrow infrared beam, and measures the angle of the beam return using a&nbsp; position-sensitive detector (PSD):</li></ul><!--touch_sensor--><a name="touch_sensors"></a><h4>Touch sensors (digital)</h4><img border="0" src="images/TouchSensors.gif"><br><ul>  <li>Digital switch sensors</li>  <li>Connect to ports 8-15</li>  <li>Access with function <code><a href="#digital">digital</a>(&lt;port#&gt;);</code></li>  <li>1 indicates switch is closed</li>  <li>0 indicates switch is open</li>  <li>These make good bumpers and can be used for limit switches on an actuator</li></ul><!--break_beam_sensor--><a name="break_beam_sensor"></a><h4>Infrared "Break Beam" Sensor (digital)</h4><img border="0" src="images/image010.gif"><br><ul>  <li>Digital sensor</li>  <li>Connect to ports 8-15</li>  <li>Access with function <font class="CFunction"><a href="#digital">digital</a></font>(&lt;port#&gt;) </li>  <li>1 indicates slot is empty</li>  <li>0 indicates slot is blocked</li>  <li>Can be used for alignment; e.g., a winch with a pin which when blocking the slot indicates alignment is reached</li>  <li>Can also be used for encoders, where the edge of a wheel with holes around its perimeter passes through the slot, alternately breaking the beam</li></ul><!--sonar_sensor--><!--<a name="sonar_sensor"></a><h4>Sonar (Ultrasonic Rangefinder)</h4><img border="0" height="180" width="90" src="images/sonar.jpg"><br><ul>  <li>Timed analog sensor.&nbsp; Sends a "ping" of high-pitched sound and listens for an echo</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog</a></font>(&lt;port#&gt;) </li>  <li>Returned value is distance in inches to closest object in field of view</li>  <li>Range is approximately 10-250 inches</li>  <li>When first powered up, make sure there is nothing within 24  inches (60cm) so sonar can self calibrate. <li>The sonar field of view is an approximately 30 degree teardrop:</li></ul>--><a name="analog_slider"></a><h4>Analog slider</h4><img border="0" height="66" width="200" src="images/AnalogSlider.gif"><br><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <code><a href="#analog">analog10</a>(&lt;port#&gt;);</code></li>  <li>Values range from 0 to 2047</li></ul><a name="analog_pot"></a><h4>Analog pot (potentiometer)</h4><img border="0" height="128" width="100" src="images/AnalogPot.gif"><br><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <code><a href="#analog">analog10</a>(&lt;port#&gt;);</code></li>  <li>Values range from 0 to 2047</li></ul></div><!--DC Motors--><br><a name="DC_motor"></a><h3>DC Motor Images</h3><p>The image below is the front of the KIPR Link showing where the DC motor ports ports are located.</p><img class="center" src="images/Link_motor_ports.gif" width="80%"></img><table class="centerTable">   <tbody>     <tr><td><img class="center" src="images/DC_motor.gif" width="30%"></img><br>         <p class="center">Example DC motor used with the KIPR Link<br>         (modified servo - potentiometer removed and wiring with two prong plug installed).<br><br>         DC motors are controlled using the KIPR Link <a href="#CategoryMotors">motor functions.</a></p>       </td>     </tr>   </tbody></table><!-- Servos --><br><br><a name="Servos"></a><h3>Servo Images</h3><p>The image below is the front of the KIPR Link showing where the servo ports ports are located.</p><img class="center" src="images/Link_servo_ports.gif" width="80%"></img><p class="center"><br>Example servo motors used with the KIPR Link<br>(hobbyist servo - used as packaged by manufacturer)</p><table class="centerTable">   <tbody>     <tr><td><img class="center" src="images/ServoMotors.gif" width=75%></img>             <p class="center">Servo motors</p>         </td>         <td><img class="center" src="images/ServoMotorPlug.gif" width=50%></img>             <p class="center">Servo motor plug</p>         </td>     </tr>   </tbody></table><table class="centerTable">   <tbody>     <tr><td colspan=2><br>Servos are controlled by using the KIPR Link <a href="#CategoryServos">servo functions</a>.</td>     </tr>   </tbody></table></div><!--Simulator--><a name="Simulator"></a><h3>KIPR Link Simulator</h3><p>When the KISS IDE is installed, a separate graphical simulator is installed as well, which when launched can be selected as a target for a program being edited using the KISS IDE.  The simulator provides a simulated robot and a stylized operating environment for the robot, including a simulated (Botball style) starting light.  For motors and sensors incorporated into the simulated robot, side panels show motor and sensor response values.  A representation of the KIPR Link console screen is also provided for display output.  The simulated robot can be arbitrarily positioned in its environment using keyboard entry and mouse functions, including turning the simulated light on/off.</p><p>The simulator provides an effective means for trying out functions in the KIPR Link Library and for testing small examples when learning how to use them.  More fundamentally, it providea a user friendly means for obtaining visual feedback for those who are learning to program in C.</p><p>Perhaps most importantly, the simulator provides means for testing KIPR Link program code before downloading it to a KIPR Link, speeding up the process of obtaining a working program for a KIPR Link controlled robot.  No simulator can anticipate every variation a real robot might encounter in performing its mission, but in general, simulation serves to limit the amount of program tweaking required to attain acceptable performance on the actual robot.</p><br></body></html>