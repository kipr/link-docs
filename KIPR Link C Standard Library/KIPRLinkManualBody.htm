<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"<html><head><link rel="icon" href="images/botball.ico" type="image/x-icon"/><link rel="shortcut icon" href="images/botball.ico" type="image/x-icon"/><style type="text/css">    @import "LinkCSS.css";</style><title>KISS User Manual for C</title><!-- 9-03-2009 --><!-- 1-05-2010- Modified content, added css sheet formating, split index into it's own html document, reformated and relocated content.-----------------></head><body><!-- revision date --><font size=0>Rev. 1/20/2013</font><h1>KISS User Manual for <b><font color=blue>C</font></b></h1><br/><!--Introduction--><a name="Introduction"></a><h2>Introduction</h2><p>KIPR's Instructional Software System (KISS for short) is an integrated development environment providing an editor, compilers for multiple programming languages, and a set of libraries and simulator for the LINK Botball Controller. KISS implements the full ANSI C specification. For information about the C programing language, including history and basic syntax, see the Wikipedia article <a href="http://en.wikipedia.org/wiki/C_(programming_language)" target="_blank">C (programming language)</a>. For a more complete tutorial and guide for C Programming visit <a href="http://www.cprogramming.com/" target="_blank">CPrograming</a>. The <a href="http://community.botball.org" target="_blank">Botball community website</a> also has several articles about programming and a user forum where questions can be posted to the botball community. For specific information on Motors and Sensors, see the <a href="../Sensor_and_Motor_Manual_BB2011.pdf">Sensors and Motors Manual</a></p><p>The primary purpose of this manual is to describe the KIPR Link Botball Controller libraries and simulator, which are extensions to the C programming language. This manual also provides a basic introduction to programming in C. To learn more about programming in C, consult one of the many books or websites that provide C references and tutorials. </p><!--KISS Interface--><a name="KISS_Interface"></a><h2>KISS Interface</h2><p>Both new (unsaved) and saved files can be opened for editing in KISS. A row of tabs lists the files that have been opened. Clicking a file's tab activatesit for editing.</p><p>The File menu has standard entries for New, Open, Save, Save As, Print, Close and Exit.</p><p>To use the simulator, simply select <i>Simulator</i> as the target for KISS to use with your active file. Clicking <i>Run</i> will compile and run your program in the simulator.  The active file must contain (or #include) a main function in order to run in the simulator.</p><p>When your Link is cabled to your computer, it will appear as one of the available targets.  If you select it as the target, clicking <i>Compile</i> will compile and download your program to your Link, where it can be run from the Link's <i>Programs</i> tab.</p><p>For any target, compiling will cause your active file to be saved in place of the existing version unless it is new, in which case you will be prompted for a &quot;save as&quot; file name. .</p><p>The interface provides additional capabilities for program entry/edit, minor adjustment to the display (font size), auto-completion and auto-indentation. If there is a syntax error in the program, an error window will appear at the bottom of the KISS screen with the error message and the file and line number where the error was detected. If the error occurred in the active file, then clicking on the error message will move to that line. The edit menu provides a Go To line option.</p><p>C programs are automatically formatted and indented. Keywords, comments, and text strings are highlighted with color unless this feature is turned off.Most Link-specific library functions will have pop-help when they are entered into the input window.</p><p>KISS does parenthesis-balance-highlighting when the cursor is placed to the right of any right parenthesis, bracket, or brace.</p><!--A_Quick_C_Tutorial--><a name="A_Quick_C_Tutorial"></a><h2>A Quick C Tutorial</h2><p>Most C programs consist of function definitions and data structures.Here is a simple C program that defines a single function, called <b>main</b>.</p><pre><code><font class="Comment">/* Simple example: C Programmer's Manual */</font><font class="CVariable">int</font> main(){    <font class="CFunction">printf</font>(<font class="Quote">&quot;Hello, world!/n&quot;</font>);<font class="Comment">// simple example</font>}</code></pre><br/><p>For a C program to be executable, one of its functions must be named <b>main</b>.<p><p>The Expression <br/><br/> <font face="Courier">/* &lt;text&gt; */</font><br/><br/> forms a multi-line or bracketed comment. In contrast, text that starts with <br/><br/><font face="Courier">//</font><br/><br/> forms a single line comment, which continues only to the end of the line. Comments are ignored by C when theprogram is compiled.  </p><p>All functions must have a return type. While <b>main</b> does not return a value to another function, it does return an integer to the operating system, and so is of type <font class="CVariable">int</font>. Other types include no return value (<font class="CVariable">void</font>) and floating point numbers are best specified by using (<font class="CVariable">double</font>). This function declaration information must precede each function definition. </p><p>Immediately following the function declaration is the function's name (in this case, <b>main</b>). Next, in parentheses, are any arguments (or inputs) to the function. <b>main</b> has none, but an empty set of parentheses is still required. </p><p>After the function arguments is an open curly-brace {. This signifies the start of the actual function code. Curly-braces signify program blocks, or chunks of code. </p><p>Next comes a series of C statements. Statements demand that some action be taken. Our demonstration program has a single statement, a <font class="CFunction">printf</font> ("Hello, world!/n"). This will print the message <b>"Hello, world!"</b> to the KIPR Link display. The <b>\n</b> indicates start-of-a-new-line (in effect ending the current line and positioning for the next print to start on the next line). When the bottom of the display is reached, additional lines cause the display to scroll up. The <font class="CFunction">printf</font> statement ends with a semicolon (;). All C statements must be ended by a semicolon. Beginning Cprogrammers commonly make the error of omitting the semicolon that is required to end each statement. </p><p>The <b>main</b> function is ended by the close curly-brace }.</p><p>Let's look at another example to learn some more features of C. The following code defines the function square, which returns the mathematical square of a number.</p><pre><code><font class="CVariable">int</font> square(<font class="CVariable">int</font> n){    <font class="CVariable">return</font>(n * n);}</code></pre><br/><p>The function is declared as type <font class="CVariable">int</font>, which means that it will return an integer value.</p><p>Next comes the function named <b>square</b>, followed by its argument list in parentheses. Square has one argument, <b>n</b>, which is an integer. Notice howdeclaring the type of the argument is done similarly to declaring the type of the function.</p><p>When a function has arguments declared, those argument variables are valid within the "scope" of the function (i.e., they only have meaning within the function's own code). Other functions may use the same variable names independently.</p><p>The code, or &quot;scope&quot;, for <b>square</b> is contained within the set of curly braces. In fact, it consists of a single statement: the <font class="CVariable">return</font> statement. The <font class="CVariable">return</font> statement exits the function and returns the value of the C expression that follows it (in this case "<b>n * n</b>").</p><p>Except where grouped by parentheses, expressions are evaluated according to a set of precedence rules associated with the various operations within the expression. In this case, there is only one operation (multiplication), signified by the "<b>*</b>", so precedence is not an issue.</p><p>Let's look at an example of a function that performs a function call to the square program.</p><pre><code><font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b){    <font class="CVariable">double</font> h;    h = <font class="CFunction">sqrt</font>((<font class="CVariable">double</font>)(square(a) + square(b)));    <font class="CVariable">return</font>(h);}</code></pre><br/><p>This code demonstrates several more features of C. First, notice that the floating point variable <b>h</b> is defined at the beginning of the <b>hypotenuse</b>function. In general, whenever a new program block (indicated by a set of curly braces) is begun, new local variables may be defined.</p><p>The value of <b>h</b> is set to the result of a call to the <font class="CFunction">sqrt</font> function, which is included from the C math library by KISS.  <font class="Cfunction">sqrt</font> is a built-in C function that takes a floating point number as its argument.</p><p>We want to use the <font class="CFunction">square</font> function we defined earlier, which returns its result as an integer. But the sqrt function requires a floating point argument. We get around this type incompatibility by coercing the integer sum (<font class="CFunction">square</font>(a) + <font class="CFunction">square</font>(b)) into a float by preceding it with the desired type, in parentheses. Thus, the integer sum is made into a floating point number and passed along to <font class="CFunction">sqrt</font>.  If the way to coerce the argument is not specified, C will supply an automatic coersion, which may or may not be what is intended (it would be in this case).</p><p>The <b>hypotenuse</b> function finishes by returning the value of <b>h</b>. </p><p>Note that the functions square and hypotenuse are functions, not a program. If they are in the same file as the main function written above, they will neverbe called. If <b>main</b> was modified to be:</p><pre><code><font class="Comment">/* Simple example: C Programmer's Manual */</font><font class="CVariable">int</font> main(){    <font class="CFunction">printf</font>(<font class="Quote">"Hypotenuse of 3,4 is %d\n"</font>,hypotenuse(3,4)); <font class="Comment">// call a function</font>}</code></pre><br/><p>then the program (which always starts execution with <strong>main</strong>) would calculate and print out the hypotenuse of a triangle with side lengthsof 3 &amp; 4. However, C requires that functions either be defined or specified before they are first called. Since hypotenuse is called in <b>main</b>, either itneeds to be defined earlier in the file, or it can be prototyped at the begining of the file. A <em>prototype</em> of a C function is simply a C statement specifying the characteristics of the function, including the return type, function name and types of the parameters. For example the prototypes of the functions<strong>square</strong> and <strong>hypotenuse</strong> would be:</p><pre><code><font class="CVariable">int</font> square(<font class="CVariable">int</font> n);<font class="CVariable">double</font> hypotenuse(<font class="CVariable">int</font> a, <font class="CVariable">int</font> b);</code></pre><br/><p>The order in which function protypes appear does not matter as long as they come before any statements that call them.</p><p>This concludes the brief C tutorial. </p><!--Data_Objects--><a name="Data_Objects"></a><h2>Data Objects</h2><p>Variables and constants are the basic data objects in a C program.  Declarations list the variables to be used, state what type they are, and may set theirinitial value.</p><!--Variables--><a name="Variables"></a><h3>Variables</h3><p>Variable names are case-sensitive. The underscore character is allowed and is often used to enhance the readability of long variable names. C keywords like <font class="CVariable">if</font>, <font class="CVariable">while</font>, etc. may not be used as variable names.  By convention, programmers only use all caps for names of preprocessor macros (see below).</p><p>Functions and global variables may not have the same name. In addition, if a local variable is named the same as a function or a global variable, the local use takes precedence; ie., use of the function or global variable is prevented within the scope of the local variable.</p><!--Declaration--><a name="Declaration"></a><div class="Indent"><h4>Declaration</h4><p>In C, variables can be declared at the top level (outside of any curly braces) or at the start of each block (a functional unit of code surrounded by curly braces). In general, a variable declaration is of the form:</p><div class="indent"><table>    <tr>    <td><font face="Courier">&lt;</font>type<font face="Courier">&gt;&nbsp;&nbsp;&lt;</font>variable-name<font face="Courier">&gt;; </font>or </td>    </tr>    <tr>    <td><font face="Courier">&lt;</font>type<font face="Courier">&gt;&nbsp;&nbsp;&lt;</font>variable-name&gt;=&lt;initialization-data<font face="Courier">&gt;;</font></td>    </tr></table> <br/></div>In C, the most common &lt;<a href="KIPRLinkManualBody.htm#Data_Types" target="ManualFrame">type</a>&gt; specifications are <font class="CVariable">int</font>, <font class="CVariable">double</font>, <font class="CVariable">char</font>, and <font class="CVariable">struct</font> &lt;struct-name&gt;, reflecting the different ways data is formatted for use [for example, a <font class="CVariable">char</font> (character) is stored in an 8-bit ASCII code, an <font class="CVariable">int</font> (integer) is stored in a 32-bit 2's complement binary representation, and a <font class="CVariable">double</font> (for double precision floating point number) is stored in accord with the 64-bit IEEE specification for base 2 exponent and mantissa]  The form of a type declaration changes somewhat when dealing with pointer and array declarations, which are explained in a later section.<!--Local_and_Global_Scopes--><a name="Local_and_Global_Scopes"></a><h4>Local and Global Scopes</h4><p>If a variable is declared within a function or block, or as an argument to a function, its binding is local, meaning that the variable has existence only within that function definition or block. If a variable is declared outside of a function, it is a global variable. It is defined for all functions, including functions which are defined in files other than the one in which the global variable was declared.</p><!--Variable_Initialization--><a name="Variable_Initialization"></a><h4>Variable Initialization</h4><p>Local and global variables can be initialized to a value when they are declared. If no initialization value is given, their value is indeterminate.</p><p>Global variables can only be intialized to constants.  Local variable initialization may also employ most things already defined, including operations, global variables, function calls, and other local variables, including function paramenter names.</p><p>Here is a small example of how initialized declarations are used.</p><pre><code><font class="CVariable">int</font> i=50; <font class="Comment">/* declare i as global integer; initial value 50 */</font><font class="CVariable">double</font> j=100.123; <font class="Comment">/* declare j as global double; initial value 100.123 */</font><font class="CVariable">int</font> foo(){    <font class="CVariable">int</font> x; <font class="Comment">/* declare x as local integer; initial value 0 */</font>    <font class="CVariable">double</font> y=j; <font class="Comment">/* declare y as local double; initial value j */</font>}</code></pre><br/><p>Local variables are initialized whenever the function containing them is executed. Global variables are initialized whenever a reset condition occurs.Reset conditions occur when:</p><ol>    <li>Code is downloaded</li>    <li>The <b>main()</b> procedure is run</li>    <li>System hardware reset occurs</li></ol></div><!--Constants--><a name="Constants"></a><h3>Constants</h3><div class="indent"><a name="Integer_Constants"></a><h4>Integer Constants</h4><p>Integers constants may be defined in (signed) decimal integer format (e.g., 4053 or -13) or hexadecimal format using the "<b>0x</b>" prefix (e.g., for the same two numbers, 0xfd5 or 0xfffffff3).</p><!--Floating_Point_Constants--><a name="Floating_Point_Constants"></a><h4>Floating Point</font> constants</h4><p>Floating point constatns can be specified by using exponential notation (e.g., "10e3" or "10E3") or by including a decimal period. For example, the floating point zero can be given as "0.", "0.0", or "0E1", in contrast to "0", which is a 32 bit integer. Integer operations are built into the Link circuit hardware, but ithas no floating point hardware.  Floating point operations are performed in software, making them much slower than integer operations. Hence,floating point should only be used for data that is inherently fractional.  If different data types are present in an arithmetic expression, C will automatically "cast" them to a common type to perform the computation (not necessarily what you would prefer, so C provides means to specify how it is to cast values in this situation.  See below).</p><!--Characters_and_String_Constants--><a name="Characters_and_String_Constants"></a><h4>Characters and String Constants</h4><p>Quoted characters return their ASCII value (e.g., '<b>x</b>').</p><p>Character string constants are defined with quotation marks, e.g., <font class="Quote">"This is a character string."</font>.</p><!--NULL--><a name="NULL"></a><h4>NULL</h4><p>The special constant given by the system macro <b>NULL</b> can be assigned to and compared to pointer or array variables (which will be described in later sections). In general, a pointer represents a memory location.  A <b>NULL</b> pointer represents the case the pointer doesn't point to anything (NULL defines what is a "null" pointer for the system).</p><p>To check if a pointer variable has been been assigned you compare its value to <b>NULL</b>. As an example, if you have defined a linked list type consisting of a value and a pointer to the next element, the end of the list occurs when the list element's pointer variable is <b>NULL</b> rather than pointing to the next item in the list.</p></div><!--Data_Types--><a name="Data_Types"></a><h3>Data Types</h3><p>C supports the following data types among others:</p><!--32-bit_Integers--><div class="indent"><a name="32-bit_Integers"></a><h4>32-bit Integers</h4><p>32-bit integers are signified by the type indicator <font class="CVariable">int</font>. They are signed integers, and may be valued from -2,147,483,648 to +2,147,483,647 decimal.</p><!--32-bit_Floating_Point_Numbers--><a name="64-bit_Floating_Point_Numbers"></a><h4>64-bit Floating Point Numbers</h4><p>Floating point numbers are best specif by the type indicator <font class="CVariable">double</font>. 64-bit floating point numbers have at least 15 decimal digits of precision and are valued from about 10^-308 to 10^308.</p><!--8-bit_Characters--><a name="8-bit_Characters"></a><h4>8-bit Characters</h4><p>Characters are an 8-bit (unsigned) number signified by the type indicator <font class="CVariable">char</font>. A character's value normally represents a standard ASCII character code, most of which are printable.</p><!--Pointers--><a name="Pointers"></a><h4>Pointers</h4><p>C pointers are 32-bit numbers which represent locations in memory. Values in memory can be manipulated by calculating, passing and dereferencing pointers representing the location where the information is stored (derefence means to obtain the value stored at the location).</p><a name="Arrays1"></a><h4>Arrays</h4><p>Arrays are used to store homogenous lists of data (meaning that all the elements of an array have the same type). Every array has a length which is determinedat the time the array is declared. Numeric indices are used to access or store data in the elements of an array.</p><a name="Structures1"></a><h4>Structures</h4><p>Structures are used to store non-homogenous but related sets of data. Elements of a structure are referenced by name instead of number and may be of anysupported type.</p><p>Structures are useful for organizing related data into a coherent format, reducing the number of arguments passed to functions, allowing functions to return compound data, and creating complex data representations such as directed graphs and linked lists.</p></div><!--Pointers--><a name="PointersM"></a><h3>Pointers</h3><p>The address where a value is stored in memory is known as the pointer to that value. It is often useful to deal with pointers to objects, but great care must betaken to insure that the pointers used at any point in your code really do point to valid objects in memory.</p><p>For additional information on programming with C pointers, please refer to a C programming book or website.</p><!--Arrays--><a name="Arrays"></a><h3>Arrays</h3><p>C supports arrays of characters, integers, floating-point numbers, structures, pointers, and array pointers (multi-dimensional arrays). The main reasonsthat arrays are useful are that they allow you to allocate space for many instances of a given type, send an arbitrary number of values to functions, andprovide the means for iterating over a set of values.</p><!--Declaring_and_Initializing_Arrays--><a name="Declaring_and_Initializing_Arrays"></a><div class="Indent"><h4>Declaring and Initializing Arrays</h4><p>Arrays are declared using square brackets. The following statement declares an array of ten integers:</p><pre><code><font class="CVariable">int</font> foo[10];</code></pre><p> this array, elements are numbered from 0 to 9. Elements are accessed by enclosing the index number within square brackets: foo[4] denotes the fifthelement of the array foo (since counting begins at zero).</p><p>Arrays not initialized at declaration contain indeterminate values. Arrays may be initialized at declaration by specifying the array elements, separated by commas, within curly braces. If no size value is specified within the square brackets when the array is declared but initialization information is given, the size of the array is determined by the number of elements given in the declaration. For example,</p><pre><code><font class="CVariable">int</font> foo[]= {0, 4, 5, -8,  17, 301};</code></pre></br><p>creates an array of six integers, with foo[0] equaling 0, foo[1] equaling 4, etc.</p><p>If a size is specified and initialization data is given, the length of the initialization data may not exceed the specified length of the array or an error results. If, on the other hand, you specify the size and provide fewer initialization elements than the total length of the array, the remaining elements contain indeterminate values.</p><p>Text strings are implemented as arrays of characters. C provides a syntax for initializing arrays of characters. The character values of the string are enclosed in quotation marks as given in the following example:</p><pre><code><font class="CVariable">char</font> ex_string[]= <font class="Quote">"Hello there"</font>;</code></pre><br/><p>This initializes the character array <b>ex_string</b> with the ASCII values of the specified characters. The length of the array is the number of characters in the string plus 1, since strings are automatically terminated by the (unprintable) ASCII character '\0'. The terminator is the means C uses to view the array as a string.  C has a library of string functions included by KISS for determining string length, combining strings, and the like (look for string functions in your C reference).</p><p>A character array can be initialized using the curly braces syntax, but unless '\0' is included, there is nothing to mark the end of the string, and printing the array as a string will produce indeterminate results.  In declaring a character array intended to hold strings, the array size needs to be 1 larger than thesize of the maximum string to allow for '\0'.  For example, given<pre><code><font class="CVariable">char</font> pg_string[81]</font>;</code></pre><br/>strings of length up to 80 can be stored in the variable <b>pg_string</b>.</p><!--Passing_Arrays_as_Arguments--><a name="Passing_Arrays_as_Arguments"></a><h4>Passing Arrays as Arguments</h4><p>When an array is passed to a function as an argument, the array's pointer is actually passed, rather than the elements of the array. If the function modifies the array values, the array will be modified, since there is only one copy of the array in memory.</p><p>There are two ways of declaring an array argument: as an array or as a pointer to the type of the array's elements.</p><p>As an example, the following function takes an index and an array, and returns the array element specified by the index:</p><pre><code><font class="CVariable">int</font> retrieve_element(<font class="CVariable">int</font> index, <font class="CVariable">int</font> array[]){    <font class="CVariable">return</font> array[index];}</code></pre><br/><p>Notice the use of the square brackets to declare the argument array as a pointer to an array of integers.</p><p>When passing an array variable to a function, you are actually passing the value of the array pointer itself and not one of its elements, so no square bracketsare used.</p><pre><code><font class="CVariable">void</font> foo(){    <font class="CVariable">int</font> array[10];    retrieve_element(3, array);}</code></pre><br/><!--Multi-dimensional_Arrays--><a name="Multi-dimensional_Arrays"></a><h4>Multi-dimensional Arrays</h4><p>A two-dimensional array is just like a single dimensional array whose elements are one-dimensional arrays. Declaration of a two-dimensional array is asfollows:</p><pre><code><font class="CVariable">int</font> k[2][3];</code></pre><br/><p>The number in the first set of brackets is the number of 1-D arrays of <font class="CVariable">int</font>. The number in the second set of brackets is the length of each of the 1-D arrays of <font class="CVariable">int</font>. In this example, <b>k</b> is an array containing two 1-D arrays; each of k[0] and k[1] is a 1-D array of length 3 consisting of values of type <font face="Courier" color=blue>int</font>. k[0][1] is the value in position 1 of k[0].Arrays of with any number of dimensions can be generalized from this example by adding more brackets in the declaration.</p></div><!--Structures--><a name="Structures"></a><h3>Structures</h3><p>Structures are used to store non-homogenous but related sets of data. Elements of a structure are referenced by name instead of number and may be of anysupported type. Structures are useful for organizing related data into a coherent format, reducing the number of arguments passed to functions, increasing the effective number of values which can be returned by functions, and creating complex data representations such as directed graphs and linked lists.</p><p>The following example shows how to define a structure, declare a variable of structure type, and access its elements.</p><pre><code><font class="CVariable">struct</font> foo{    <font class="CVariable">int</font> i;    <font class="CVariable">int</font> j;};<font class="CVariable">struct</font> foo f1;<font class="CVariable">void</font> set_f1(<font class="CVariable">int</font> i,<font class="CVariable">int</font> j){    f1.i=i;    f1.j=j;}<font class="CVariable">void</font> get_f1(<font class="CVariable">int</font> *i,<font class="CVariable">int</font> *j){    *i=f1.i;    *j=f1.j;}</code></pre><br/><p>The first part is the structure definition. It consists of the keyword <font class="CVariable">struct</font>, followed by the name of the structure (which can be any valid identifier), followed by a list of named elements in curly braces. This definition specifies the structure of the type <font class="CVariable">struct</font> <b>foo</b>. Once there is a definition of this form, you can use the type <font class="CVariable">struct</font> <b>foo</b> just like any other type. The line</p><pre><code><font class="CVariable">struct</font> foo f1;</code></pre><p>is a global variable declaration which declares the variable <b>f1</b> to be of type <font class="CVariable">struct</font> <b>foo</b>.</p><p>The dot operator is used to access the elements of a variable of structure type. In this case, f1.i and f1.j refer to the two elements of the struct variable <b>f1</b>. You can treat the quantities f1.i and f1.j just as you would treat any variables of type <font class="CVariable">int</font> (the type of the elements specified in the struct declaration of <b>foo</b> is <font class="CVariable">int</font>).</p><p>Pointers to structure types can also be used, just like pointers to any other type. However, with structures, there is a special short-cut for referring to theelements of the structure pointed to.</p><pre><code><font class="CVariable">struct</font> foo *fptr;<font class="CVariable">void</font> main(){    fptr=&amp;f1;    fptr-&gt;i=10;    fptr-&gt;j=20;}</code></pre><br/><p> this example, <b>fptr</b> is declared to be a pointer to type <font class="CVariable">struct</font> <b>foo</b>. In main, it is set to point to the global <b>f1</b> defined above. Then the elements of the structure pointed to by <b>fptr</b> (in this case these are the same as the elements of <b>f1</b>), areset. The arrow operator is used instead of the dot operator because <b>fptr</b> is a pointer to a variable of type <font class="CVariable">struct</font> <b>foo</b>. Notethat <font class="CFunction">(*fptr).i</font> would have worked just as well as <font class="CFunction">fptr-&gt;i</font>, but it would have been clumsier.</p><p>Note that just as for arrays, only pointers to structures, not the structures themselves, can be passed to or returned from functions.</p><!--Complex_Initialization_examples--><a name="Complex_Initialization_examples"></a><h3>Complex Initialization examples</h3><p>Complex types -- arrays and structures -- may be initialized upon declaration with a sequence of constant values contained within curly braces and separatedby commas.</p><p>Arrays of character may also be initialized as a string using a quoted string of characters.</p><p>For initialized declarations of single dimensional arrays, the length can be left blank and a suitable length based on the initialization data will be assigned to it. Multi-dimensional arrays must have the size of all dimensions specified when the array is declared. If a length is specified, the initialization data may not overflow that length in any dimension or an error will result. However, the initialization data may be shorter than the specified size and the remaining entries will be initialized to 0.</p><p>Following is an example of legal global and local variable initializations:</p><pre><code><font class="Comment">/* declare many globals of various types */</font><font class="CVariable">int</font> i=50;<font class="CVariable">int</font> *ptr=NULL;<font class="CVariable">double</font> farr[3]={ 1.2, 3.6, 7.4 };<font class="CVariable">int</font> tarr[2][4]={ { 1, 2, 3, 4 }, { 2, 4, 6, 8} };<font class="CVariable">char</font> c[]=<font class="Quote">"Hi there how are you?"</font>;<font class="CVariable">char</font> carr[5][10]={<font class="Quote">"Hi"</font>,<font class="Quote">"there"</font>,<font class="Quote">"how"</font>,<font class="Quote">"are"</font>,<font class="Quote">"you"</font>};<font class="CVariable">struct</font> bar{    <font class="CVariable">int</font> i;    <font class="CVariable">int</font> *p;    <font class="CVariable">double</font> j;} b={5, NULL, 10.5};<font class="CVariable">struct</font> bar barr[2] = { { 1, NULL, 2.5 }, { 3 } };<font class="Comment">/* declare locals of various types */</font><font class="CVariable">int</font> foo(){    <font class="CVariable">int</font> x; <font class="Comment">/* local variable x with initial value 0 */</font>    <font class="CVariable">int</font> y= tarr[0][2]; <font class="Comment">/* local variable y with initial value 3 */</font>    <font class="CVariable">int</font> *iptr=&amp;i; <font class="Comment">/* local pointer to integer                                which points to the global i */</font>    <font class="CVariable">int</font> larr[2]={10,20};  <font class="Comment">/* local array larr                                   with elements 10 and 20 */</font>    <font class="CVariable">struct</font> bar lb={5,NULL,10.5}; <font class="Comment">/* local variable of type                                          struct bar with i=5 and j=10.5 */</font>    <font class="CVariable">char</font> lc[]=carr[2];    <font class="Comment">/* local string lc with                                   initial value "how" */</font>    ...}</code></pre><br/><!--Statements_and_Expressions--><a name="Statements_and_Expressions"></a><h2>Statements and Expressions</h2><p>Operators act upon objects of a certain type or types and specify what is to be done to them. Expressions combine variables and constants to create new values.Statements are expressions, assignments, function calls, or control flow statements which make up C programs.</p><!--Operators--><a name="Operators"></a><h3>Operators</h3><p>Each of the data types has its own set of operators that determine which operations may be performed on them.</p><!--Integer_Operations--><a name="Integer_Operations"></a><div class="indent"><h4>Integer Operations</h4><p>The following operations are supported on integers:</p><ul>  <li><b>Arithmetic</b>. addition <font class="CFunction">+</font>, subtraction <font class="CFunction">-</font>, multiplication <font class="CFunction">*</font>, division <font class="CFunction">/</font>. </li>  <li><b>Comparison</b>. greater-than <font class="CFunction">&gt;</font>, less-than <font class="CFunction">&lt;</font>, equality <font class="CFunction">==</font>, greater-than-equal <font class="CFunction">&gt;=</font>, less-than-equal <font class="CFunction">&lt;=</font>. </li>  <li><b>Bitwise Arithmetic</b>. bitwise-OR <font class="CFunction">|</font>, bitwise-AND <font class="CFunction">&amp;</font>, bitwise-exclusive-OR <font class="CFunction">^</font>, bitwise-NOT <font class="CFunction">~</font>. </li>  <li><b>Boolean Arithmetic</b>. logical-OR <font class="CFunction">||</font>, logical-AND <font class="CFunction">&amp;&amp;</font>, logical-NOT <font class="CFunction">!</font>. <br/>When a C construction uses a Boolean value (as is the case for example, with <font class="CVariable">if</font>), it takes the integer zero as meaning false, and any integer other than zero as meaning true. The Boolean operators return zero for false and one for true. Boolean operators <font class="CFunction">&amp;&amp;</font> and <font class="CFunction">||</font> will stop executing as soon as the truth of the final expression is determined. For example, in the expression <font class="CFunction">a &amp;&amp; b</font>, if <font class="CFunction">a</font> is false, then <font class="CFunction">b</font> does not need to be evaluated because the result must be false. The <font class="CFunction">&amp;&amp;</font> operator therefore will not evaluate <font class="CFunction">b</font>.</li></ul><!--Floating_Point_Numbers--><a name="Floating_Point_Numbers"></a><h4>Floating Point Numbers</h4><p>KISS provides the standard C library of floating point routines. This package includes arithmetic, trigonometric, and logarithmic functions.Since floating point operations are implemented in software, they are much slower than the integer operations and so should be avoided where possible if your programming objective could be affected by overall processing speed.</p><p>The following operations are supported on floating point numbers:</p><table>  <tbody>    <tr>      <td>      <ul>        <li><b>Arithmetic</b>. addition <font class="CFunction">+</font>, subtraction <font class="CFunction">-</font>, multiplication <font class="CFunction">*</font>, division <font class="CFunction">/</font>. </li>        <li><b>Comparison</b>. greater-than <font class="CFunction">&gt;</font>, less-than <font class="CFunction">&lt;</font>, equality <font class="CFunction">==</font>, greater-than-equal <font class="CFunction">&gt;=</font>,less-than-equal <font class="CFunction">&lt;=</font>. </li>        <li><b>Built-in Math Functions</b>. A set of trigonometric, logarithmic, and exponential functions is supported. For details, go to the <a href="#Library%20Function%20Descriptions">Library Function Descriptions</a>. These functions are included among those itemized as "Math" functions.</li>      </ul>      </font></td>    </tr>  </tbody></table><!--Characters--><a name="Characters"></a><h4>Characters</h4><p>Character variables hold 8-bit unsigned integers whose values reference standard ASCII codes. If a character variable is referenced in an integer operation, it is automatically coerced into an integer representation for use by the integer operation. When a value is stored into a character variable, it is coerced into an 8-bit character (by truncating the upper bits).</p></div><!--Assignment_Operators_and_Expressions--><a name="Assignment_Operators_and_Expressions"></a><h2>Assignment Operators and Expressions</h2><p>The basic assignment operator is =</font>. The following statement adds 2 to the value of a</font>.</p><pre><code>a = a + 2;</code></pre><br/><p>The abbreviated form</p><pre><code>a += 2;</code></pre><br/><p>could also be used to perform the same operation. All of the following binary operators can be used in this fashion:</p><pre><code>+   -   *   /   %   &lt;&lt;   &gt;&gt;   &amp;   ^   |</code></pre><br/><!--Increment_and_Decrement_Operators--><a name="Increment_and_Decrement_Operators"></a><h2>Increment and Decrement Operators</h2><p>The increment operator "++</font>" increments the named variable. For example, the construction "a++</font>" is equivalent to "a= a+1</font>" or "a+= 1</font>".A statement that uses an increment operator has a value. For example, the statement</p><pre><code>a = 3; <font class="CFunction">printf</font>(<font class="Quote">"a=%d a+1=%d\n"</font>, a, ++a);</code></pre><br/><p>will display the text "a=3 a+1=4</font>". If the increment operator comes after the named variable, then the value of the statement is calculated after the increment occurs. So the statement</p><pre><code>a = 3; <font class="CFunction">printf</font>(<font class="Quote">"a=%d a+1=%d\n"</font>, a, a++);</code></pre><br/><p>would display "a=3 a+1=3</font>" but would finish with a set to 4. The decrement operator "--</font>" is used in the same fashion as the increment operator.</p><!--Data_Access_Operators--><a name="Data_Access_Operators"></a><h2>Data Access Operators</h2><b><font class="CFunction">&amp;</font></b><table>  <tbody>    <tr>      <td>&nbsp;</font>      <dl>        <dd>A single ampersand preceding a variable, an array reference, or a structure element reference returns a pointer to the location in memory where thatinformation is being stored. This should not be used on arbitrary expressions as they do not have a stable place in memory where they are being stored.</font></dd>      </dl>      </td>    </tr>  </tbody></table><b><font class="CFunction">*</font></b><table>  <tbody>    <tr>      <td>&nbsp;</font>      <dl>        <dd>A single * preceeding an expression which evaluates to a pointer returns the value which is stored at that address. This process of accessing the valuestored within a pointer is known as dereferencing.</font></dd>      </dl>      </td>    </tr>  </tbody></table><b><font class="CFunction">[</b>&lt;</font>expr<font class="CFunction">&gt;<b>]</b></font><table>  <tbody>    <tr>      <td>&nbsp;</font>      <dl>        <dd>An expression in square braces following an expression which evaluates to an array (an array variable, the result of a function which returns an arraypointer, etc.) checks that the value of the expression falls within the bounds of the array and references that element.</font></dd>      </dl>      </td>    </tr>  </tbody></table><b><font class="CFunction">.</font></b><table>  <tbody>    <tr>      <td>&nbsp;</font>      <dl>        <dd>A dot between a structure variable and the name of one of its fields returns the value stored in that field.</font></dd>      </dl>      </td>    </tr>  </tbody></table><b><font class="CFunction">-&gt;</font></b><table>  <tbody>    <tr>      <td>&nbsp;</font>      <dl>        <dd>An arrow between a pointer to a structure and the name of one of its fields in that structure acts the same as a dot does, except it acts on the structure pointed at by its left hand side. Where <b>f</b> is a structure of a type with <b>i</b> as an element name, the two expressions f.i</font> and (&amp;f)-&gt;i</font> are equivalent.</font></dd>      </dl>      </td>    </tr>  </tbody></table><!--Precedence_and_Order_of_Evaluation--><a name="Precedence_and_Order_of_Evaluation"></a><h2>Precedence and Order of Evaluation</h2></font><p>The following table summarizes the rules for precedence and associativity for the C operators. Operators listed earlier in the table have higher precedence; operators on the same line of the table have equal precedence.</p><table>  <tbody>    <tr>      <td>      <dl>        <dd>          <table border="1">            <tbody>              <tr>                <td align="center"><b>Operator</b></font></td>                <td>&nbsp; <b>Associativity</font></b><font face="Times"> &nbsp;</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> () []</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> ! ~ ++ -- - (&lt;</font><i>type</i><font face="Courier">&gt;) &nbsp;</font></td>                <td align="center">right to left</font></td>              </tr>              <tr>                <td>&nbsp; <font face="Courier">* / %</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> + -</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> &lt;&lt; &gt;&gt;</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> &lt; &lt;= &gt; &gt;=</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> == !=</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> &amp;</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> ^</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> |</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> &amp;&amp;</font></td>                <td align="center">left to right</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> ||</font></td>                <td align="center">right to left</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> = += -=</font> etc.</td>                <td align="center">right to left</font></td>              </tr>              <tr>                <td>&nbsp;<font face="Courier"> ,</font></td>                <td align="center">left to right</font></td>              </tr>            </tbody>          </table>        </dd>      </dl>      </td>      <td><br/>      </td>    </tr>  </tbody></table><!--Control_Flow--><a name="Control_Flow"></a><h2>Control Flow</h2><p>All standard C control structures are available under KISS.</p><!--Statements_and_Blocks--><a name="Statements_and_Blocks"></a><h2>Statements and Blocks</h2><p>A single C statement is ended by a semicolon. A series of statements may be grouped together into a block using curly braces. Inside a block, localvariables may be defined. Blocks may be used in place of statements in the control flow constructs.</p><p>For the following, keep in mind a &lt;block&gt; can be used instead of the &lt;statement&gt;.</p><!--If-Else--><a name="If-Else"></a><h3>If-Else</h3><p>The <font class="CVariable">if else</font> statement is used to make decisions. The syntax is:</p><pre><code><font class="CVariable">if</font> (&lt;expression</font>&gt;)    &lt;statement-1</font>&gt;<font class="CVariable">else</font>    &lt;statement-1</font>&gt;</code></pre><br/><p>&lt;expression&gt; is evaluated; if it is not equal to zero (e.g., logic true), then &lt;statement-1&gt; is executed.</p><p>The <font class="CVariable">else</font> clause is optional. If the <font class="CVariable">if</font> part of the statement did not execute, and the <font class="CVariable">else</font> is present, then &lt;statement-2&gt; executes.</p><!--While--><a name="While"></a><h3>While</h3><p>The syntax of a <font class="CVariable">while</font> loop is the following:</p><pre><code><font class="CVariable">while</font> (&lt;expression</font>&gt;)    &lt;statement</font>&gt;</code></pre><br/><p><font class="CVariable">while</font> begins by evaluating &lt;expression&gt;. If it is false, then &lt;statement&gt; is skipped. If it is true, then &lt;statement&gt; is evaluated. Then the expression is evaluated again, and the same check is performed. The loop exits when &lt;expression&gt; becomes zero.</p><p>One can easily create an infinite loop in C using the <font face="Courier" class="CVariable">while</font> statement:</p><pre><code><font class="CVariable">while</font> (1)    &lt;statement</font>&gt;</code></pre><br/><!--Do-While--><a name="Do-While"></a><h3>Do-While</h3><p>The syntax of a <font class="CVariable">do</font>-<font class="CVariable">while</font> loop is the following:</p><pre><code><font class="CVariable">do</font>    &lt;statement</font>&gt;<font class="CVariable">while</font> (&lt;expression</font>&gt;);</code></pre><br/><p>The equivalent <font class="CVariable">while</font> loop would be the following:</p><pre><code>&lt;statement</font>&gt;<font class="CVariable">while</font> (&lt;expression</font>&gt;)    &lt;statement</font>&gt;</code></pre><br/><!--For--><a name="For"></a><h3>For</h3><p>The syntax of a <font class="CVariable">for</font> loop is the following:</p><pre><code><font class="CVariable">for</font> (&lt;expr-1</font>&gt;;&lt;expr-2</font>&gt;;&lt;expr-3</font>&gt;)    &lt;statement</font>&gt;</code></pre><p>The <font class="CVariable">for</font> construct is equivalent to the following construct using <font class="CVariable">while</font>:</p><pre><code>&lt;expr-1</font>&gt;;<font class="CVariable">while</font> (&lt;expr-2</font>&gt;){    &lt;statement</font>&gt;    &lt;expr-3</font>&gt;;}</code></pre><br/><p>Typically, &lt;expr-1&gt; is an assignment, &lt;expr-2&gt; is a relational expression, and &lt;expr-3&gt; is an increment or decrement of some manner. For example, the following code counts from 0 to 99, printing each number along the way:</p><pre><code><font class="CVariable">int</font> i;<font class="CVariable">for</font> (i = 0; i &lt; 100; i++)    <font class="CFunction">printf</font>("%d\n", i);</code></pre><br/><!--Switch--><a name="Switch"></a><h3>Switch</h3><p>The syntax of a <font class="CVariable">switch</font> block is as follows:</p><pre><code><font class="CVariable">switch</font> (<font class="CVariable">int</font>){    <font class="CVariable">case</font> const1</font>:        &lt;statement list1</font>&gt;    <font class="CVariable">break</font>;    <font class="CVariable">case</font> const2</font>:        &lt;statement list2</font>&gt;    <font class="CVariable">break</font>;    <font class="CVariable">default</font>:        &lt;statement list3</font>&gt;}</code></pre><br/><p>The <font class="CVariable">switch</font> construct takes an integer variable as input, and compares it to each <font class="CVariable">case</font> listed.  The first matching <font color="Times">const</font> is selected, and execution begins there.  The <font class="CVariable">break</font> is optional, and if no break is found then execution continues through each following statement.  Also note that each <font class="CVariable">case</font> has a list of single statements, as opposed to a block enclosed in curly braces.</p><p>Here's an example of how a <font class="CVariable">switch</font> might be used:</p><pre><code><font class="CVariable">int</font> i = 1;<font class="CVariable">switch</font>(i){    <font class="CVariable">case</font> 0:        <font class="CFunction">printf</font>(<font class="Quote">"Case 0\n"</font>);        <font class="CVariable">break</font>;    <font class="CVariable">case</font> 1:        <font class="CFunction">printf</font>(<font class="Quote">"Case 1\n"</font>);        <font class="CVariable">break</font>;    <font class="CVariable">default</font>:        <font class="CFunction">printf</font>(<font class="Quote">"Default\n"</font>);}</code></pre><br/><p>Since i</font> is equal to 1, the text "Case 1" will be printed to the screen.  If i</font> were equal to 0, "Case 0" would be printed.  If i</font> were any number besides 0 or 1, "Default" would be printed.</p><!--Break--><a name="Break"></a><h3>Break</h3><p>Use of the <font class="CVariable">break</font> statement provides an early exit from a <font class="CVariable">while</font>, <font class="CVariable">do</font>-<font class="CVariable">while</font> or <font class="CVariable">for</font> loop.  The break statement can also provide an exit from a <font class="CVariable">switch</font> block.</p><!--Display_Screen_Printing--><a name="Display_Screen_Printing"></a><h2>Display Screen Printing</h2><p>The C function <font class="CFunction">printf</font> provides formatted printing to the KIPR Link display screen. KISS also provides a Link specific print</font> command, <font class="CFunction">display_printf</font>, for controlled screen printing to at a specified (row,column) coordinate on the 10 line by 42 character display (3 button mode only).</p><p>The syntax of <font class="CFunction">printf</font> is the following:</p><pre><code><font class="CFunction">printf</font>(&lt;format-string</font>&gt;, &lt;arg-1</font>&gt; , ... , &lt;arg-N</font>&gt;);</code></pre><br/>This is best illustrated by some examples.<!--Printing_Examples--><a name="Printing_Examples"></a><h3>Printing Examples</h3><!--Printing_a_message--><div class="indent"><a name="Printing_a_message"></a><h4>Example 1: Printing a message</h4><p>The following statement prints a text string to the screen.</p><pre><code><font class="CFunction">printf</font>(<font class="Quote">"Hello, world!\n"</font>);</code></pre><br/><p>In this example, the format string is simply printed to the screen. The character <b>\n</b> at the end of the string signifies an advance to the next (or new) line for subsequent printing. When the bottom of the display is reached, the display is scrolled (up) for each line subsequently printed. </p><!--Printing_a_number--><a name="Printing_a_number"></a><h4>Example 2: Printing a number</h4><p>The following example prints the value of the integer variable x with a brief message.</p><pre><code><font class="CFunction">printf</font>(<font class="Quote">"Value is %d\n"</font>, x);</code></pre><br/><p>The format <b>%d</b> phrase signals that the first variable in the list is to be formatted as and integer, replacing <b>%d</b> in the printed output.</p><!--Printing_a_number_in_hexadecimal--><a name="Printing_a_number_in_hexadecimal"></a><h4>Example 3: Printing a number in hexadecimal</h4><p>The following example prints the value of the integer variable x as a hexadecimal number (in caps).</p><pre><code><font class="CFunction">printf</font>(<font class="Quote">"Value is %X\n"</font>, x);</code></pre><br/><p>The format <b>%X</b> phrase signals that the first variable in the list is to be formatted as hexadecimal value (using uppercase), replacing <b>%X</b> in the printed output.</p><!--Printing_a_floating_point_number--><a name="Printing_a_floating_point_number"></a><h4>Example 4: Printing a floating point number</h4><p>The following statement prints the value of the floating point variable n</font> as a floating point number.</p><pre><code><font class="CFunction">printf</font>(<font class="Quote">"Value is %f\n"</font>, n);</code></pre><br/><p>The format <b>%f</b> phrase signals that the first variable in the list is to be formatted as a decimal floating point value (with decimal point), replacing <b>%f</b> in the printed output.</p><!--Printing_two_numbers_in_hexadecimal_format--><a name="Printing_two_numbers_in_hexadecimal_format"></a><h4>Example 5: Printing two numbers in hexadecimal format (lower case)</h4><pre><code><font class="CFunction">printf</font>(<font class="Quote">"A=%x  B=%x\n"</font>, a, b);</code></pre><br/>The first <b>%x</b> applies to variable <b>a</b> and the second to variable <b>b</b>.<!--Printing_using_display_printf--><a name="Printing_using_cbc_printf"></a><h4>Example 6: Printing using display_printf</h4><pre><code><font class="CFunction">display_printf</font>(0,2,<font class="Quote">"A=%d  B=%d"</font>, a, b);</code></pre><br/><p>The function <font class="CFunction"><b>display_printf</b></font> is like the standard <font class="CFunction"><b>printf</b></font> function except the first two arguments specify the column and row (zero indexed) to start printing, so for this example, the result is printed on the 3rd row of the display starting from column 0.</p><p>Row numbers are 0 to 9, column 0 to 41.  Note that <font class="CFunction"><b>display_printf</b></font> does not wrap, and truncates strings that go beyond the end of the line on the display.</p></div><!--Formatting_Command_Summary--><a name="Formatting_Command_Summary"></a><h3>Formatting Command Summary</h3><table>  <tbody>    <tr>      <td>      <dl>        <dd>          <table border="1">            <tbody>              <tr>                <td align="center"><b>&nbsp;Format Command&nbsp;</b></font></td>                <td align="center"><b>Data Type</b></font></td>                <td align="center"><b>Description</b></td>              </tr>              <tr>                <td><font face="Courier">&nbsp; %d </font></td>                <td><font class="CVariable">&nbsp; int </font></td>                <td>&nbsp; decimal number </font></td>              </tr>              <tr>                <td><font face="Courier">&nbsp; %x</font> or <font face="Courier">%X </font></td>                <td><font class="CVariable">&nbsp; int </font></td>                <td>&nbsp; hexadecimal number </font></td>              </tr>              <tr>                <td><font face="Courier">&nbsp; %c </font></td>                <td><font class="CVariable">&nbsp; int </font></td>                <td>&nbsp; low byte as ASCII character &nbsp;</font></td>              </tr>              <tr>                <td><font face="Courier">&nbsp; %f </font></td>                <td><font class="CVariable">&nbsp; double </font></td>                <td>&nbsp; floating point number </font></td>              </tr>              <tr>                <td><font face="Courier">&nbsp; %s </font></td>                <td><font class="CVariable">&nbsp; char</font> array &nbsp;</td>                <td>&nbsp; char array (string) </font></td>              </tr>            </tbody>          </table>        </dd>      </dl>      </td>    </tr>  </tbody></table><!--Preprocessor--><a name="Preprocessor"></a><h2>Preprocessor</h2><p>The preprocessor processes a file before it is sent to the compiler.The C preprocessor allows definition of macros, and conditional compilation of sections ofcode. Using preprocessor macros for constants and function macros can make C code more efficient as well as easier to read. Using <font class="CVariable">#if</font>to conditionally compile code can be very useful, for instance, for debugging purposes.</p><p>The preprocessor command <font class="CVariable">#include</font> causes the specified file to be included in the code sent to the C compiler at the position the include statement appears in the program. For example, suppose you have a set of stored programs in a file named "mylib.c</font>", some of which you need for your current program to work.</p><pre><code><font class="Comment">// load my library </font><font class="CVariable">#include</font> <font class="Quote">"mylib.c"</font><font class="CVariable">void</font> main(){    <font class="CVariable">char</font> s[32] = <font class="Quote">"text string wrapping badly\n"</font>;    fix(s);<font class="Comment">// apply my fix function to s and print it </font>    <font class="CFunction">printf</font>(s);}</code></pre><br/><!--Preprocessor_Macros--><a name="Preprocessor_Macros"></a><h3>Preprocessor Macros</h3><p>Preprocessor macros are defined by using the <font class="CVariable">#define</font> preprocessor directive at the beginning of a line. The macro will apply to any other files subsequently included in the program.  The following example shows how to define preprocessor macros.</p><pre><code><font class="CVariable">#define</font> RIGHT_MOTOR 0<font class="CVariable">#define</font> LEFT_MOTOR  1<font class="CVariable">#define</font> GO_RIGHT(power) (<font class="CFunction">motor</font>(RIGHT_MOTOR,(power)))<font class="CVariable">#define</font> GO_LEFT(power)  (<font class="CFunction">motor</font>(LEFT_MOTOR,(power)))<font class="CVariable">#define</font> GO(left,right) {GO_LEFT(left); GO_RIGHT(right);}<font class="CVariable">void</font> main(){    GO(0,0);}</code></pre><br/><p>Preprocessor macro definitions start with the <font class="CVariable">#define</font> directive at the beginning of a line, and continue to the end of the line. The name of the macro follows <font class="CVariable">#define</font>, such as <b>RIGHT_MOTOR</b> (a C programming convention is to use all caps for macro names to make them easy to identify later). If there is a parenthesis directly after the name of the macro, such as the <b>GO_RIGHT</b> macro has above, then the macro has arguments. The <b>GO_RIGHT</b> and <b>GO_LEFT</b> macros each take one argument. The GO macro takes two arguments. The body of the macro follows the name and the optional argument list.</p><p>Each time a macro is invoked, any variables are resolved in the body of the macro and the code produced is placed in the program in place of the macro. </p><p>Superficially, invocations of macros without arguments look like global variable references and invocations of macros with arguments look like calls to functions. However, macro replacement is occurs as the preprocessor passes through the program before sending it on to the compiler.  Global references and function calls happen after compilation at run time. Also, function calls actually evaluate their arguments before they are called, whereas macros simply perform textreplacement. </p><p>Appropriate use of macros can make C programs easier to read. In particular, constants can be given symbolic names rather than using global variables to provide storage for them. It also allows macros with arguments to be used in cases when a series of function calls is used at multiple points in the program.</p><!--Conditional_compilation--><a name="Conditional_compilation"></a><h3>Conditional compilation</h3><p>It is sometimes desirable to conditionally compile code. The primary example of this is that you may want to have easily supressed debugging output. The C preprocessor provides a convenient way of doing this by using the <font class="CVariable">#ifdef</font> directive.</p><pre><code><font class="CVariable">void</font> go_left(<font class="CVariable">int</font> power){    GO_LEFT(power);    <font class="CVariable">#ifdef</font> DEBUG    <font class="CFunction">printf</font>(<font class="Quote">"Going Left\n"</font>);    <font class="CFunction">beep</font>();    <font class="CVariable">#endif</font>}</code></pre><br/><p>In this example, when the macro <b>DEBUG</b> is defined, the debugging message "Going Left" will be printed and the board will beep each time the code inserted by <b>GO_LEFT</b> is executed. If the macro is not defined, the preprocessor will not insert the code producing the message and beep. Each <font class="CVariable">#ifdef</font> must be follwed by an <font class="CVariable">#endif</font> at the end of the code which is to be conditionally compiled. The macro name to bechecked can be any valid macro name, and <font class="CVariable">#ifdef</font> blocks may be nested.</p><p>The counterpart to <font class="CVariable">#ifdef</font> is <font class="CVariable">#ifndef</font>, which causes the program to test to see if the macro has not been defined.  It is needed in case the macro definition might or might not already be in a file that has been included.  It is an error to try to define amacro that is already defined.</p><p>Macros can be conditionally defined.</p><p>The <font class="CVariable">#if</font>, <font class="CVariable">#else</font>, and <font class="CVariable">#elif</font> directives are also available, but areoutside the scope of this document. Refer to a C reference manual for how to use them.</p><!--Math_Functions--><a name="C_Math_Library"></a><h2>The C Math Library</h2><p>One of the standard C libraries included by KISS is the math library, which contains an extensive collection of math routines.  The ones below are commonly used for robotics.  For more information about what math functions are available, consult your C reference.</p><table class="CFunctions">  <tbody>    <tr>       <td><a name="atan"></a> </td>       <td><font class="CFunction">atan</font> &nbsp;&nbsp;&nbsp;[Category: Math]         <dl>       		<dd>Format: <font class="CVariable">double</font> <font class="CFunction">atan</font>(<font class="CVariable">double</font> angle);<br/>				Returns the arc tangent of the angle. Angle is specified in radians; the result is in radians.</dd>         </dl>       </td>    </tr>    <tr>       <td><a name="cos"></a> </td>       <td><font class="CFunction">cos</font>&nbsp;&nbsp;&nbsp;[Category: Math]<br/>          <dl>             <dd>Format: <font class="CVariable">double</font> <font class="CFunction">cos</font>(<font class="CVariable">double</font> angle);<br/>				Returns cosine of angle. Angle is specified in radians; result is in radians.</dd>          </dl>      </td>    </tr>    <tr>       <td><a name="exp"></a> </td>       <td><font class="CFunction">exp</font>&nbsp;&nbsp;&nbsp;[Category: Math]<br/>      		<dl>        		<dd>Format: <font class="CVariable">double</font> <font class="CFunction">exp</font>(<font class="CVariable">double</font> num);<br/>					Returns e to the num power.</dd>      		</dl>       </td>    </tr>    <tr>       <td><a name="exp10"></a> </td>       <td><font class="CFunction">exp10</font>&nbsp;&nbsp;&nbsp;[Category: Math]<br/>       	 <dl>        	<dd>Format: <font class="CVariable">double</font> <font class="CFunction">exp10</font>(<font class="CVariable">double</font> num);<br/>				Returns 10 to the num power.</dd>      	 </dl>       </td>    </tr>    <tr>       <td><a name="log"></a> </td>       <td><font class="CFunction">log</font>&nbsp;&nbsp;&nbsp;[Category: Math]<br/>      		<dl>        		<dd>Format: <font class="CVariable">double</font> <font class="CFunction">log</font>(<fontclass="CVariable">double</font> num);<br/>					Returns the natural logarithm of num.</dd>      		</dl>       </td>    </tr>    <tr>       <td><a name="log10"></a> </td>       <td><font class="CFunction">log10</font>&nbsp;&nbsp;&nbsp;[Category: Math]<br/>      		<dl>        		<dd>Format: <font class="CVariable">double</font> <font class="CFunction">log10</font>(<font class="CVariable">double</font> num);<br/>					Returns the logarithm of num to the base10.</dd>		  	</dl>      </td>    </tr>    <tr>       	<td><a name="random"></a> </td>      	<td><font class="CFunction">random</font>&nbsp;&nbsp;&nbsp;[Category: Math]      	<dl>        	<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">random</font>(<font class="CVariable">int</font> m);<br/>				Returns a random integer between 0 and some very large number.</dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="sin"></a> </td>       <td><font class="CFunction">sin</font>&nbsp;&nbsp;&nbsp;[Category: Math]       		<dl>        		<dd>Format:  <font class="CVariable">double</font> <font class="CFunction">sin</font>(<font class="CVariable">double</font> angle);<br/>					Returns the sine of angle. angle is specified in radians; result is in radians.</dd>      		</dl>      </td>    </tr>    <tr>	    <td><a name="sqrt"></a> </td>	    <td><font class="CFunction">sqrt</font> &nbsp;&nbsp;&nbsp;[Category: Math]	      <dl>	        <dd>Format:  <font class="CVariable">double</font> <font class="CFunction">sqrt</font>(<font class="CVariable">double</font> num);<br/>				Returns the square root of num.</dd>	      </dl>	      </td>    </tr>    <tr>       <td><a name="tan"></a> </td>       <td><font class="CFunction">tan</font>&nbsp;&nbsp;&nbsp;[Category: Math]       		<dl>        		<dd>Format: <font class="CVariable">double</font> <font class="CFunction">tan</font>(<font class="CVariable">double</font> angle);<br/>					Returns the tangent of angle</font>. angle is specified in radians; result is in radians.</dd>      		</dl>      </td>    </tr>   <tr>    </tbody></table><!--The_Link_Library_File--><a name="The_Link_Library_File"></a><h2>The KIPR Link Library File</h2><p>Library files provide standard C functions for interfacing with hardware on the robot controller board. These functions are written either in C or as assembly language drivers. Library files provide functions to do things like control motors and input sensors values.</p><p>KISS automatically has a selection of library files included every time it invokes the C compiler.</p><p>For convenience, a description of some of the more commonly used KIPR Link specific library functions follows.</p><!--Commonly_Used_Link_Library_Functions--><a name="Commonly_Used_Link_Library_Functions"></a><h3>Commonly Used KIPR Link Library Functions</h3><pre><code><a name="digitalx"></a><font class="CFunction">digital</font>(&lt;port#&gt);    <font class="Comment">/* returns 0 if the switch attached to the port is open and       returns 1 if the switch is closed.  Digital ports are numbered       8-15.  Typically used for bumpers or limit switches. */</font><a name="analogx"></a><font class="CFunction">analog</font>(&lt;port#&gt);    <font class="Comment">/* returns the analog value of the port (a value in the range 0-255).       Analog ports are numbered 0-7. Light sensors and range sensors are       examples of sensors you would use in analog ports. */</font><a name="msleepx"></a><font class="CFunction">msleep</font>(&lt;int_msecs&gt;);    <font class="Comment">  /* waits specified number of milliseconds */</font><a name="beepx"></a><font class="CFunction">beep</font>();    <font class="Comment">/* causes a beep sound */</font><a name="printfx"></a><font class="CFunction">printf</font>(&lt;string&gt;, &lt;arg1&gt;, &lt;arg2&gt;, ... );    <font class="Comment">/* prints &lt;string&gt;.  If the string contains % codes then the &lt;args&gt;       after the string will be printed in place of the % codes in the       format specified by the code. %d prints a decimal number. %f       prints a floating point number. %c prints a character, %x or       %X prints an integer in hexadecimal. */</font><a name="mavx"></a><font class="CFunction">mav</font>(&lt;motor_#&gt;, &lt;vel&gt;)    <font class="Comment">/* controls the motors. &lt;motor_#&gt; is an integer between 0 and 3.       &lt;vel&gt; is an integer between -1000 and 1000 where 0       means the motor is off and negative numbers run the motor in the       reverse direction */</font><a name="fdx"></a><font class="CFunction">fd</font>(&lt;motor_#&gt;);    <font class="Comment">/* turns on the motor specified (direction is determined by plug       orientation */</font><a name="bkx"></a><font class="CFunction">bk</font>(&lt;motor_#&gt;);    <font class="Comment">/* turns on the motor specified in the opposite direction from fd */</font><a name="motorx"></a><font class="CFunction">motor</font>(&lt;motor_#&gt, &lt;motor_power&gt;);    <font class="Comment">/* turns on the motor specified at the power level specified */</font><a name="offx"></a><font class="CFunction">off</font>(&lt;motor_#&gt;);    <font class="Comment">/* turns off the motor specified */</font><a name="aox"></a><font class="CFunction">ao</font>();    <font class="Comment">/* turns all motor ports off */</font></code></pre><br/><!--Functions--><a name="Functions"></a><h3>KIPR Link Library Functions</h3><p>(alphabetic order)</p><table class="CFunctions">  <tbody>    <tr>      <td><a name="a_button"></a></td>      <td><font class="CFunction">a_button</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">a_button</font>();<br/>            Reads the value (0 or 1) of the A button.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="a_button_clicked"></a></td>      <td><font class="CFunction">a_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">a_button_clicked</font>();<br/>            Gets the A button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (a_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (a_button()==1); ...}</font>            <font class="Comment"> //debounce A button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (a_button_clicked()==0) {...}</font><br>            </dd></dl>         </dd>      </dl>      </td>    </tr>    <tr>      <td><a name="accel_x"></a></td>      <td><font class="CFunction">accel_x</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">accel_x</font>();<br/>            Returns the value of the accelerometer in its x direction relative to the horizontal plane of the Link.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="accel_y"></a></td>      <td><font class="CFunction">accel_y</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">accel_y</font>();<br/>            Returns the value of the accelerometer in its y direction relative to the horizontal plane of the Link.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="accel_z"></a></td>      <td><font class="CFunction">accel_z</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">accel_z</font>();<br/>            Returns the value of the accelerometer for its vertical, or z direction, relative to the horizontal plane of the KIPR Link.  When the Link is horizontal it is calibrated to have a value corresponding to the gravitational constant G (your acceleration to towards the center of the Earth to keep you from flying off of the planet).</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="alloff"></a> </td>      <td><font class="CFunction">alloff</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font>&nbsp;&nbsp;<font class="CFunction">alloff</font>();<br/>Turns off all motors. <font class="CFunction">ao</font> isa short form for <font class="CFunction">alloff</font>.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>       <td><a name="analog"></a> </td>      <td><font class="CFunction">analog</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">analog</font>(<font class="CVariable">int</font> p);<br/>Returns the value of the sensor installed at the port numbered p. Theresult is an integer between 0 and 255. The function can be used withanalog ports 0 through 7. <!--Ports 13 through 15 arefloating (used for sensors such as an optical range finder). Since ports 13-15 arefloating, the value cannot be predicted without a sensor inserted.--></dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>       <td><a name="analog10"></a> </td>      <td><font class="CFunction">analog10</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">analog10</font>(<font class="CVariable">int</font> p);<br/>10-bit version of the <font class="CFunction">analog</font>function. The returned value is in the range 0 to 1023 rather than 0 to255.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="any_button"></a> </td>      <td><font class="CFunction">any_button</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font>&nbsp;&nbsp;<font class="CFunction">any_button()</font>();<br/>			Returns 1 if any button (A,B,C,X,Y,Z,Side) is pressed.        </dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>       <td><a name="ao"></a> </td>      <td><font class="CFunction">ao</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">ao</font>();<br/>Turns off all motors.</dd>                        <dt></dt>      </dl>      </td>    </tr>    <tr>       <td><a name="b_button"></a> </td>      <td><font class="CFunction">b_button</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">b_button</font>();<br/>Reads the value (0 or 1) of the B button.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="b_button_clicked"></a></td>      <td><font class="CFunction">b_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">b_button_clicked</font>();<br/>            Gets the B button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (b_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (b_button()==1); ...}</font>            <font class="Comment"> //debounce B button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (b_button_clicked()==0) {...}</font><br>            </dd></dl>         </dd>      </dl>      </td>    <tr>       <td><a name="beep"></a> </td>      <td><font class="CFunction">beep</font>&nbsp;&nbsp;&nbsp;[Category: Output]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">beep</font>();<br/>Produces a tone. Returns whenthe tone is finished.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>       <td><a name="bk"></a> </td>      <td><font class="CFunction">bk</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">bk</font>(<font class="CVariable">int</font> m);<br/>Turns motor m on full speed in thebackward direction.<br/>Example: <br/>         <pre><code><font class="CFunction">bk</font>(1);</code></pre>          </dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><br/>      </td>      <td><font class="CFunction">block_motor_done</font>&nbsp; [Category: Motors]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">block_motor_done</font>(<font class="CVariable">int</font> m);<br/>			Function does not return until specified motor completes any executing speed or position control moves.<br/>			Example: <br/><pre><code><font class="CFunction">mrp</font>(0,500,20000L);<font class="CFunction">block_motor_done</font>(1);</code></pre>		</dd>      </dl></td>    </tr>    <tr>      <td><br/>      </td>      <td><font class="CFunction">bmd</font> &nbsp;[Category: Motors]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">bmd</font>(<font class="CVariable">int</font> m);<br/>			Function does not return until specified motor completes any executing			speed or position control moves.<br/>			Example: <br/><pre><code><font class="CFunction">mrp</font>(0,500,20000L);<font class="CFunction">bmd</font>(1);</code></pre></dd>      </dl>      </td>    </tr>    <tr>      <td><a name="c_button"></a></td>      <td><font class="CFunction">c_button</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">c_button</font>();<br/>            Reads the value (0 or 1) of the C button.</dd>          <dt></dt>      </dl>      </td>    </tr>    <tr>      <td><a name="c_button_clicked"></a></td>      <td><font class="CFunction">c_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">c_button_clicked</font>();<br/>            Gets the C button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (c_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (c_button()==1); ...}</font>            <font class="Comment"> //debounce C button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (c_button_clicked()==0) {...}</font><br>            </dd></dl>         </dd>      </dl>      </td>    </tr>    <tr>       <td><a name="console_clear"></a> </td>       <td><font class="CFunction">console_clear</font>&nbsp;&nbsp;&nbsp;[Category: Output]<br/>      		<dl><dd>Format: <font class="CVariable">void</font> <font class="CFunction">console_clear</font>();<br/>				Clear the Link print buffer.  See also <font class="CFunction">display_clear</font>.</dd>      		</dl>      	</td>    </tr>    <tr>       <td><a name="display_clear"></a> </td>       <td><font class="CFunction">display_clear</font>&nbsp;&nbsp;&nbsp;[Category: Output]<br/>      		<dl><dd>Format: <font class="CVariable">void</font> <font class="CFunction">display_clear</font>();<br/>				Clear the Link display for display_printf.  See also <font class="CFunction">console_clear</font>.</dd>      		</dl>      	</td>    </tr>    <tr>       <td><a name="display_printf"></a> </td>      <td><font class="CFunction">display_printf</font>&nbsp;&nbsp;&nbsp;[Category: Output]<br/>      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">display_printf</font>(<font class="CVariable">int</font> col, <font class="CVariable">int</font> row, <font class="CVariable">char</font> s[], . . .);<br/>			Perform a standard printf starting at screen location col, row. (col 0 to 41, row 0 to 9)</dd>      </dl>      </td>    </tr>    <tr>       <td><a name="clear_motor_position_counter"></a> </td>       <td><font class="CFunction">clear_motor_position_counter</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">clear_motor_position_counter</font>(<font class="CVariable">int</font> motor_nbr);<br/>        			Reset the position counter for the motor specified to 0.</dd>      		</dl>       </td>    </tr>    <tr>       <td><a name="digital"></a> </td>      <td><font class="CFunction">digital</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">digital</font>(<font class="CVariable">int</font> p);<br/>			Returns the value of the sensor in sensor port p, as a true/false value			(1 for true and 0 for false). Sensors are expected to be active low,			meaning that they are valued at zero volts in the active, or true,			state. Thus the library function returns the inverse of the actual			reading from the digital hardware: if the reading is zero volts or			logic zero, the <font class="CFunction">digital</font>()			function will return true. Valid for digital ports 8-15.</dd>      </dl>      </td>    </tr>    <tr>       <td><a name="disable_servo"></a> </td>      	<td><font class="CFunction">disable_servo</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">disable_servo</font>(<font class="CVariable">int</font> p);<br/>				Disables specified servo port.</dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="disable_servos"></a> </td>       <td><font class="CFunction">disable_servos</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	 <dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">disable_servos</font>();<br/>				Disables the servo motor ports (powers down all servo motors).</dd>     	 </dl>      </td>    </tr>    <tr>       <td><a name="enable_servo"></a> </td>      	<td><font class="CFunction">enable_servo</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">enable_servo</font>(<font class="CVariable">int</font> p);<br/>				Enables specified servo port.</dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="enable_servos"></a> </td>      	<td><font class="CFunction">enable_servos</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">enable_servos</font>();<br/>				Enables all servo motor ports.</dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="extra_buttons_show"></a> </td>      	<td><font class="CFunction">extra_buttons_show</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">extra_buttons_show</font>(<font class="CVariable">int</font> p);<br/>				Shows the X, Y, and Z buttons on the Link display.  Note: this reduces the display area for printf.				See also <font class="CFunction">extra_buttons_hide, get_extra_buttons_visible</font></dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="extra_buttons_hide"></a> </td>      	<td><font class="CFunction">extra_buttons_hide</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">extra_buttons_hide</font>(<font class="CVariable">int</font> p);<br/>				Hides the X, Y, and Z buttons on the Link display.  Note: this is the default display configuration.				See also <font class="CFunction">extra_buttons_show, get_extra_buttons_visible</font></dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="fd"></a> </td>      	<td><font class="CFunction">fd</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">fd</font>(<font class="CVariable">int</font> m);<br/>					Turns motor m on full in the forward direction.<br/>					Example:<br/><pre><code><font class="CFunction">fd</font>(3);</code></pre>          		</dd>	     	</dl>      	</td>    </tr>    <tr>       	<td><a name="freeze"></a> </td>     	<td><font class="CFunction">freeze</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">freeze</font>(<font class="CVariable">int</font> m);<br/>					Freezes motor m (prevents continued motor rotation, in contrast to <font class="CFunction">off</font>, which allows the motor to "coast").</dd>          		<dd><br/></dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="get_analog_pullup"></a> </td>      	<td><font class="CFunction">get_analog_pullup</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_analog_pullup(</font><font class="CVariable">int</font>port<font class="CFunction">);</font><br/>					Returns 1 if the port's pullup resistor is set (the default), and 0 otherwise.  See also					<font class="CFunction">set_analog_pullup</font></dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="get_extra_buttons_visible"></a> </td>      	<td><font class="CFunction">get_extra_buttons_visible</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_extra_buttons_visible</font>();<br/>					Returns 1 if the X, Y, and Z buttons are visible, 0 if not.  See also,					<font class="CFunction">extra_buttons_show, extra_buttons_hide</font></dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="get_motor_done"></a> </td>      	<td><font class="CFunction">get_motor_done</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_motor_done</font>(<font class="CVariable">int</font> m);<br/>					Returns whether the motor has finished a move with specified position.</dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="get_motor_position_counter"></a> </td>      	<td><font class="CFunction">get_motor_position_counter</font>&nbsp;&nbsp;&nbsp;[Category: Motors]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_motor_position_counter</font>(<font class="CVariable">int</font> m);<br/>					Returns the current motor position value for motor m					(a value which is continually being updated for each motor using back					EMF; a typical discrimination for a given motor is on the order of 1100					position "ticks" per rotation)</dd>      		</dl>     	</td>    </tr>    <tr>void get_pid_gains(int motor, short *p, short *i, short *d, short *pd, short *id, short *dd);       	<td><a name="get_pid_gains"></a> </td>      	<td><font class="CFunction">get_pid_gains</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">get_pid_gains</font>(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> *p, <font class="CVariable">int</font> *i, <font class="CVariable">int</font> *d, <font class="CVariable">int</font> *pd, <font class="CVariable">int</font> *id, <font class="CVariable">int</font> *dd<font class="CFunction">);</font><br/>					This function is used to obtain the weights of the PID control currently set for the motors (Proportional Integral Derivative control using back EMF feedback). The p, i and d parameters are the numerators for the p, i and d coefficients.  The pd, id and dd parameters are their respective denominators.  Thus all of the parameters are integers, but the actual coefficients can be floats.  If a motor is jerky, the p and d terms should be reduced in size.  If a motor lags far behind, they should be increased. The default values are set at firmware install.					See also <font class="CFunction">get_pid_gains</font></dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="get_servo_enabled"></a> </td>      	<td><font class="CFunction">get_servo_enabled</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_servo_enabled</font>(<font class="CVariable">int</font> srv<font class="CFunction">);</font><br/>					Returns 1 if the specified servo port is enabled and 0 otherwise.					See also <font class="CFunction">enable_servo, disable_servo</font>.</dd>      		</dl>      </td>    </tr>    <tr>       	<td><a name="get_servo_position"></a> </td>      	<td><font class="CFunction">get_servo_position</font>&nbsp;&nbsp;&nbsp;[Category: Servos]<br/>      		<dl>        		<dd>Format: <font class="CVariable">int</font> <font class="CFunction">get_servo_position</font>(<font class="CVariable">int</font> srv);<br/>					Returns the last position value set for the servo in port srv.					The value is in the range 0 to 1023. There are 4 servo ports (0, 1, 2,3).					See also <font class="CFunction">set_servo_position</font>.</dd>      		</dl>      </td>    </tr>    <tr>      <td><br/>      </td>      <td><font class="CFunction">mav</font>&nbsp;&nbsp; [Category: Motors]      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">mav</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel)</font>;<br/>				This function is the same as move_at_velocity </dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="motor"></a> </td>      <td><font class="CFunction">motor</font>&nbsp;&nbsp;&nbsp;[Category: Motors] &nbsp;&nbsp;      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">motor</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> p);<br/>				Turns on motor m at scaled PWM duty cycle				percentage&nbsp; p. Power levels range				from 100 for full on forward to -100 for full on backward.</dd>            <dd> <br/></dd>      	</dl>      </td>    </tr>    <tr>      <td valign="top" class="style1"><a name="move_at_velocity"></a> </td>      <td class="style1"><font class="CFunction">move_at_velocity</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      <dl>        <dd>Format: <font class="CVariable">void</font> <font class="CFunction">move_at_velocity</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);<br/>			Moves motor m at velocity vel indefinitely. The velocity range is -1000 to			1000 ticks per second.         </dd>      </dl>      </td>    </tr>    <tr>       	<td><a name="move_relative_position"></a> </td>     	<td><font class="CFunction">move_relative_position</font>&nbsp;&nbsp;&nbsp;[Category: Motors]     	<dl>        	<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">move_relative_position</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);<br/>				Moves motor m at velocity vel from its current position curr_pos to curr_pos + pos.				The speed range is 0 to 1000 ticks per second.</dd>          	<dd>Example: <br/>          <pre><code><font class="CFunction">move_relative_position</font>(1,275,-1100L);</code></pre>            </dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="move_to_position"></a> </td>      <td><font class="CFunction">move_to_position</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      	<dl>        	<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">move_to_position</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);<br/>				Moves motor m at velocity vel from its current position curr_pos to pos.				The speed range is 0 to 1000. Note that if the motor is already at pos, the motor doesn't move.</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="mrp"></a> </td>      <td><font class="CFunction">mrp</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      	<dl>        	<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">mrp</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);<br/>				This function is the same as move_relative_position.</dd>      	</dl>      </td>    </tr>    <tr>      <td><br/></td>      <td><font class="CFunction">mtp</font>&nbsp; [Category: Motors] &nbsp;&nbsp;      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">mtp</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);<br/>				This function is the same as move_to_position.</dd>      	</dl>      </td>    </tr>    <tr>       <td><a name="msleep"></a> </td>      <td><font class="CFunction">msleep</font>&nbsp;&nbsp;&nbsp;[Category: Time]      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">msleep</font>(<font class="CVariable">int</font> msec);<br/>				Waits for an amount of time equal to or greater than msec milliseconds. <br/>				Example:<br/>          <pre><code><font class="Comment">/*wait for 1.5 seconds */</font><font class="CFunction"> msleep</font>(1500);</code></pre>             </dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="off"></a> </td>      	<td><font class="CFunction">off</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      	<dl>        	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">off</font>(<font class="CVariable">int</font> m);<br/>				Turns off motor m. <br/>				Example: <br/>        <pre><code><font class="CFunction">off</font>(1);</code></pre>            </dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="power_level"></a> </td>      	<td><font class="CFunction">power_level</font>&nbsp;&nbsp;&nbsp;[Category: Sensor]      	<dl>        	<dd>Format: <font class="CVariable">double</font> <font class="CFunction">power_level</font>();<br/>				Returns the current power level in volts.</dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="printf"></a> </td>      	<td><font class="CFunction">printf</font>&nbsp;&nbsp;&nbsp;[Category: Output]      		<dl>        		<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">printf</font>(<font class="CVariable">char</font> s[], . . .);<br/>					Prints the contents of the string referenced by s to the cursor position on the screen.<br/>					See the <A href="#Display_Screen_Printing">manual</A> above for more details.</dd>      		</dl>      	</td>    </tr>    <tr>    <td><a name="run_for"></a> </td>    <td><font class="CFunction">run_for</font>&nbsp;&nbsp;&nbsp;[Category: Processes]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">run_for</font>(<font class="CVariable">double</font> sec, <font class="CVariable">void</font> &lt;function_name&gt;);<br/>            This function takes a function and runs it for a certain amount of time in seconds.            <font class="CFunction">run_for</font> will return within 1 second of your function exiting, if it exits before the specified time.            The variable sec denotes how many seconds to run the given function.            </dd>        </dl>    </td>    </tr>    <tr>       	<td><a name="seconds"></a> </td>      	<td><font class="CFunction">seconds</font>&nbsp;&nbsp;&nbsp;[Category: Time]      		<dl>        		<dd>Format:  <font class="CVariable">double</font> <font class="CFunction">seconds</font>();<br/>					Returns the count of system time in seconds, as a floating point					number. Resolution is one millisecond.</dd>      		</dl>      	</td>    </tr>    <tr>    <td><a name="set_a_button_text"></a> </td>    <td><font class="CFunction">set_a_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_a_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the A button to be the text string specified rather than 'A'.            </dd>        </dl>    </td>    </tr>    <tr>    	<td><a name="set_analog_pullup"></a></td>void set_analog_pullup(int port, int pullup);    	<td><font class="CFunction">set_analog_pullup</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        	<dl>            	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_analog_pullup</font>(<font class="CVariable">int</font> port,<font class="CVariable">int</font> pullupTF);<br/>            		Analog ports provides a pullup resistor for sensors that don't have an integrated pullup resistor which can be turned off for sensors that set their own pullup value (the "ET" optical range finder is such a sensor).  For example, <font class="CFunction">set_analog_pullup(3,0);</font> configures analog port 3 to be "floating" (no pullup resistor) whereas <font class="CFunction">set_analog_pullup(3,1);</font> configures port 3 as pullup (enables the pullup resistor)</dd>        	</dl>    	</td>    </tr>    <tr>    <td><a name="set_b_button_text"></a> </td>    <td><font class="CFunction">set_b_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_b_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the B button to be the text string specified rather than 'B'.            </dd>        </dl>    </td>    </tr>    <tr>    <td><a name="set_c_button_text"></a> </td>    <td><font class="CFunction">set_c_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_c_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the C button to be the text string specified rather than 'C'.            </dd>        </dl>    </td>    </tr>    <tr>    	<td><a name="set_digital_output"></a></td>    	<td><font class="CFunction">set_digital_output</font>&nbsp;&nbsp;&nbsp;[Category: Output]    		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_digital_output</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> inout);<br/>        			Digital ports on the KIPR Link can be configured for either input or output. By default digital ports are        			set for input.  The statement <font class="CFunction">set_digital_output(9,1)</font> will configure digital port 9        			for output</font>. The <b>port</b> parameter must be in the range of values 8-15.</dd>    		</dl>    	</td>    </tr>    <tr>    	<td><a name="set_analog_pullup"></a></td>void set_digital_pullup(int port, int pullup);    	<td><font class="CFunction">set_digital_pullup</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        	<dl>            	<dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_digital_pullup</font>(<font class="CVariable">int</font> port,<font class="CVariable">int</font> pullupTF);<br/>            		Digital ports provides a pullup resistor for sensors that don't have an integrated pullup resistor which can be turned off for sensors that set their own pullup value (there aren't any digital sensors of this type used for Botball).  For example, <font class="CFunction">set_digital_pullup(9,0);</font> configures digital port 9 to be "floating" (no pullup resistor) whereas <font class="CFunction">set_digital_pullup(9,1);</font> configures port 9 as pullup (enables the pullup resistor)</dd>        	</dl>    	</td>    </tr>    <tr>    	<td><a name="set_digital_value"></a></td>    	<td><font class="CFunction">set_digital_value</font>&nbsp;&nbsp;&nbsp;[Category: Output]    		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_digital_value</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> value);<br/>        			Digital ports on the KIPR Link can be configured for either input or output. For a port        			configured for output, this function is used to set its value to either 0 (low) or 1 (high).    				The <b>port</b> parameter must be in the range of values 8-15.</dd>    		</dl>    	</td>    </tr>    <tr>       	<td><a name="set_pid_gains"></a> </td>      	<td><font class="CFunction">set_pid_gains</font>&nbsp;&nbsp;&nbsp;[Category: Motors]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">set_pid_gains</font>(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> p, <font class="CVariable">int</font> i, <font class="CVariable">int</font> d, <font class="CVariable">int</font> pd, <font class="CVariable">int</font> id, <font class="CVariable">int</font> dd);<br/>					This function is used to adjust the weights of the PID control for the motors ((Proportional Integral Derivative control using back EMF feedback). The p, i and d parameters are the numerators for the p, i and d coefficients.  The pd, id and dd parameters are their respective denominators.  Thus all of the parameters are integers, but the actual coefficients can be floats.  If a motor is jerky, the p and d terms should be reduced in size.  If a motor lags far behind, they should be increased. The default values are set at firmware install.</dd>      		</dl>      	</td>    </tr>    <tr>       	<td><a name="set_servo_position"></a> </td>      	<td><font class="CFunction">set_servo_position</font>&nbsp;&nbsp;&nbsp;[Category: Servos]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">set_servo_position</font>(<font class="CVariable">int</font> srv, <font class="CVariable">int</font> pos);<br/>					Sets the position value of the servo in port srv.					The value of pos must be in the range 0 to 2047. There are 4 servo ports (0, 1, 2, 3).</dd>      		</dl>      	</td>    </tr>    <tr>    <td><a name="set_x_button_text"></a> </td>    <td><font class="CFunction">set_x_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_x_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the X button to be the text string specified rather than 'X'.            See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>        </dl>    </td>    </tr>    <tr>    <td><a name="set_y_button_text"></a> </td>    <td><font class="CFunction">set_y_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_y_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the Y button to be the text string specified rather than 'Y'.            See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>        </dl>    </td>    </tr>    <tr>    <td><a name="set_z_button_text"></a> </td>    <td><font class="CFunction">set_z_button_text</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]        <dl>            <dd>Format: <font class="CVariable">void</font> <font class="CFunction">set_z_button_text(</font><font class="CVariable">char</font> <font class="CFunction">txt[]);</font><br/>            This function sets the text displayed on the Z button to be the text string specified rather than 'Z'.            See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>        </dl>    </td>    </tr>    <tr>      <td><br/></td>      <td><font class="CFunction">setpwm</font>&nbsp;&nbsp; [Category: Motors]      	<dl>        	<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">setpwm</font>(<font class="CVariable">int </font>m, <font class="CVariable">int</font> dutycycle);<br/>          	Runs motor m at duty cycle dutycycle (values-100 to 100)</dd>      	</dl>      </td>    </tr>    <tr>      <td><a name="side_button"></a></td>      <td><font class="CFunction">side_button</font> (or <font class="CFunction">black_button</font>)&nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">side_button</font>();<br/>			Reads the value (0 or 1) of the (physical) side button on the KIPR Link.</dd>      </dl>      </td>    </tr>    <tr>      <td><a name="side_button_clicked"></a></td>      <td><font class="CFunction">side_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">side_button_clicked</font>();<br/>            Gets the Side button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (side_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (side_button()==1); ...}</font>            <font class="Comment"> //debounce Side button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (side_button_clicked()==0) {...}</font><br>            </dd></dl>         </dd>      </dl>      </td>    </tr>    <tr>       	<td><a name="thread_create"></a> </td>      	<td><font class="CFunction">thread_create</font>&nbsp;&nbsp;&nbsp;[Category: Threads]<br/>      		<dl>        		<dd>Format:  <font class="CVariable">thread</font> <font class="CFunction">thread_create</font>(&lt;function name&gt;);<br/>					The <font class="CFunction">thread_create</font> function is used to create a thread for running a function					in parallel to <b>main</b>.  Note that the return value of <font class="CFunction">thread_create</font> has the special data type <font class="CVariable">thread</font>, which should be assigned to a variable of type					<font class="CVariable">thread</font> so it remains available for running the function in the thread (via					<font class="CFunction">thread_start</font>).  The the thread will remain active until the function					finishes or the thread is destroyed (via <font class="CFunction">thread_destroy</font>). If the thread					hasn't been destroyed, it can be started again; otherwise, a new thread has to be created for the					function.</dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="thread_destroy"></a> </td>      	<td><font class="CFunction">thread_destroy</font>&nbsp;&nbsp;&nbsp;[Category: Threads]<br/>      		<dl>        		<dd>Format: <font class="CVariable">void</font> <font class="CFunction">thread_destroy</font>(<font class="CVariable">thread</font> id);<br/>					The <font class="CFunction">thread_destroy</font> function					is used to destroy threads running functions in parallel to main. A thread is destroyed by passing its					thread ID number to <font class="CFunction">thread_destroy</font>.					The following code shows the main process creating a check_sensor					thread, and then destroying it one second later:				<br/><pre><code><font class="CVariable">int</font> main(){    <font class="CVariable">thread</font> tid;    tid = <font class="CFunction">thread_create</font>(check_sensor);    <font class="CFunction">thread_start</font>(tid);    <font class="CFunction">msleep</font>(1000);    <font class="CFunction">thread_destroy</font>(tpid);}</code></pre><br/>          		</dd>      		</dl>      </td>    </tr>    <tr>       	<td><a name="thread_start"></a> </td>      	<td><font class="CFunction">thread_start</font>&nbsp;&nbsp;&nbsp;[Category: Threads]<br/>      		<dl>        		<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">thread_start(&lt;</font>thread id        			<font class="CFunction">&gt;)</font>;<br/>					The <font class="CFunction">thread_start</font> function is used to start a thread created for a function, which then runs in parallel with other active threads. The system keeps track of each thread by assigning a thread ID value to it. <font class="CFunction">thread_create</font> returns the thread ID value when the thread for running a function is created. The thread is active until the function finishes or until it is terminated by <font class="CFunction"><a href="#thread_destroy">thread_destroy</a></font>. </dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="thread_wait"></a> </td>      	<td><font class="CFunction">thread_wait</font>&nbsp;&nbsp;&nbsp;[Category: Threads]<br/>      		<dl>        		<dd>Format:  <font class="CVariable">void</font> <font class="CFunction">thread_wait</font>(&lt;thread id&gt;);<br/>					The <font class="CFunction">thread_wait</font> function is used to wait for a thread that has been started by					<font class="CFunction">thread_start</font> to finish  where <b>thread id</b> is the thread ID returned by					<font class="CFunction">thread_create</font> when the thread was first created. </dd>      	</dl>      </td>    </tr>    <tr>       	<td><a name="x_button"></a> </td>      	<td><font class="CFunction">x_button</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">x_button</font>();<br/>					Reads the value (0 or 1) of the X button.  This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons. See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>      		</dl>      	</td>    </tr>    <tr>      <td><a name="x_button_clicked"></a></td>      <td><font class="CFunction">x_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">x_button_clicked</font>();<br/>            Gets the X button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (x_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (x_button()==1); ...}</font>            <font class="Comment"> //debounce X button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (x_button_clicked()==0) {...}</font><br>            </dd></dl>            This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons. See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>         </dd>      </dl>      </td>    </tr>    <tr>       	<td><a name="y_button"></a> </td>      	<td><font class="CFunction">y_button</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">y_button</font>();<br/>					Reads the value (0 or 1) of the move Y button. This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons. See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd></dd>      		</dl>      	</td>    </tr>    <tr>      <td><a name="y_button_clicked"></a></td>      <td><font class="CFunction">y_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">y_button_clicked</font>();<br/>            Gets the Y button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (y_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (y_button()==1); ...}</font>            <font class="Comment"> //debounce Y button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (y_button_clicked()==0) {...}</font><br>            </dd></dl>            This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons. See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>         </dd>      </dl>      </td>    </tr>    <tr>       	<td><a name="z_button"></a> </td>      	<td><font class="CFunction">z_button</font>&nbsp;&nbsp;&nbsp;[Category: Sensors]      		<dl>        		<dd>Format:  <font class="CVariable">int</font> <font class="CFunction">z_button</font>();<br/>					Reads the value (0 or 1) of the move up button. This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons. See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd></dd>      		</dl>      	</td>    </tr>    <tr>      <td><a name="z_button_clicked"></a></td>      <td><font class="CFunction">z_button_clicked</font> &nbsp;&nbsp;&nbsp;[Category: Sensors]<br/>      <dl>        <dd>Format: <font class="CVariable">int</font> <font class="CFunction">z_button_clicked</font>();<br/>            Gets the Z button's state (pressed or not pressed).  If pressed, blocks until released.            Returns 1 for pressed, 0 for not pressed.  The construction            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (z_button()==0) {</font><br>            <font class="CVariable">while</font><font class="CFunction"> (z_button()==1); ...}</font>            <font class="Comment"> //debounce Z button</font></dd></dl><br>            is equivalent to<br>            <dl><dd><font class="CVariable">while</font><font class="CFunction"> (z_button_clicked()==0) {...}</font><br>            </dd></dl>         This button is an extra button.  Use <font class="CFunction">extra_buttons_show()</font> to show the X, Y, and Z buttons.  See also <font class="CFunction">extra_buttons_hide(), get_extra_buttons_visible();</font></dd>         </dd>      </dl>      </td>  </tbody></table><!--Create Function Library--><a name="Create"></a><h3>Create Library Functions</h3><p>The Create library is automatically loaded whenever the KIPR Link is chosen as the target. The functions which update sensor data, and the connection functions return the requested information if they are successful and return a number greater than 100,000 if there is some error. If an error is returned the error message is 100,000 + the Create Serial Interface Packet Number. For example a code of 100,007 indicates an error when requesting bumper or wheel drop sensor status. </p><p>The movement function, with the exception of the script and block functions   are all non-blocking. Movement functions (with the exception of create_stop()) only are sent to the Create if they represent a change from the previous movement command. For this reason, movement commands may be placed in tight loops without concern of overwhelming the serial connection. The Create's trajectory will continue until a different movement command is given. The script commands will execute without blocking and will finish when the goal is reached. The blocking spin function will not return until the goal has been reached.</p><p>The Create may also be used to play MIDI music. Up to sixteen 16 note songs may be loaded into the Create from the global variable matrix gc_song_array. See the Create Open Interface manual for details on note and duration codes.</p><table class="CFunctions"><tbody><tr>  <td><font class="CFunction">create_connect </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">create_connect</font>();<br/>          First step for connecting KIPR Link to Create. Returns          1 if sucessful and 0 if not. This function also puts the Create in the create_safe mode.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_disconnect </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_disconnect</font>();<br/>          restores the Create to power on configuration (which will also shut off any running motors).</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_start </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_start</font>();<br/>          Puts Create into active mode (with motors)</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_passive </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_passive</font>();<br/>          Puts Create into passive mode (no motors)</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_safe </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_safe</font>();<br/>           Create will execute all commands, but will disconnect and stop if drop or cliff sensors fire.</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_full </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_full</font>();<br/>           Create will move however you tell it -- even if that is a bad thing. In particular, the Create will not stop and disconnect, even if it is picked up or the cliff sensors fire.</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_spot </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_spot</font>();<br/>           Simulates a Roomba doing a spot clean</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_cover </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_cover</font>(); <br/>           Simulates a Roomba covering a room</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_demo </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void </font> <font class="CFunction">create_demo</font>(<font class="CVariable">int </font> d);<br/>          Runs built in demos (see Create Open Interface on the web)</p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_cover_dock </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_cover_dock</font>();<br/>          Create roams around until it sees an IR dock and then attmpts to dock</p>      </dd>    </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_mode </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_mode</font>();<br/>              Returns the Create's mode (0 off; 1 passive; 2 safe; 3 full). </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lbump</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lbump</font>();<br/>              returns 1 if left bumper is pressed, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_rbump</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rbump</font>();<br/>              returns 1 if right bumper is pressed, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lwdrop</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lwdrop</font>();<br/>              returns 1 if left wheel has dropped, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_cwdrop</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_cwdrop</font>();<br/>              returns 1 if caster wheel has dropped, 0 otherwise. </p>          </dd>        </dl></td></tr><tr>      <td><font class="CFunction">get_create_rwdrop</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rlwdrop</font>();<br/>              returns 1 if right wheel has dropped, 0 otherwise. </p>          </dd>        </dl></td></tr><tr>      <td><font class="CFunction">get_create_wall</font> &nbsp;&nbsp;&nbsp;[Category:  Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_wall</font>();<br/>              returns 1 if wall is detected by right facing sensor, 0 otherwise.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lcliff</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lcliff</font>();<br/>              returns 1 if left cliff sensor is over black or a cliff, 0 otherwise.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lfcliff</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lfcliff</font>();<br/>              returns 1 if left front cliff sensor is over black or a cliff, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_rfcliff</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rfcliff</font>();<br/>              returns 1 if right frontcliff sensor is over black or a cliff, 0 otherwise..</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_rcliff</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rcliff</font>();<br/>              returns 1 if right cliff sensor is over black or a cliff, 0 otherwise.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_vwall</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_vwall</font>(<);<br/>              returns 1 if a virtual wall beacon is detected, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_overcurrents</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_overcurrents</font>();<br/>              returns the overcurrent status byte  where 16's bit indicates overcurrent in left wheel; 8's bit in right wheel, 4's bit is LD2, 2's bit is LD0    and 1's bit is LD1. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_infrared</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_infrared</font>();<br/>              returns the byte detected from the remote control, 255 if no byte has been detected. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_advance_button</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_advance_button</font>();<br/>              returns 1 if advance button is being pressed, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_play_button</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_play_button</font>();<br/>              returns 1 if play button is being pressed, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_distance</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_distance</font>();<br/>              returns the accumulated distance the Create has traveled since it was turned on or the distance was set.  Moving backwards reduces this value.  The distance is in millimeters.  The value is truncated to the nearest millimeter every time this function is updated which if too rapid will cause an artificially small value.  Suggested update rate no smaller than 5/speed where speed is the Create's speed in mm/sec.  </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">set_create_distance</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">void</font> <font class="CFunction">set_create_distance</font>(<font class="CVariable">int</font>              dist);<br/>              Sets the current value that will be returned by get_create_distance to the value dist.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_normalized_angle</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_normalized_angle</font>();<br/>              returns the accumulated angle the Create has turned since it was turned on or the distance was set -- normalized to the range 0 to 359 degrees.  Turning CCW increases this value and CW decreases the value.   The value is truncated to the nearest degree every time this function is updated which if too rapid will cause an artificially small value.  Suggested update rate no smaller than 10/(difference between left and right wheel speeds).  </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_total_angle</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_total_angle</font>();<br/>              returns the accumulated angle the Create has turned since it was turned on or the distance was set.  Turning CCW increases this value and CW decreases the value.   The value is truncated to the nearest degree every time this function is updated so if too rapid will cause an artificially small value.  Suggested update rate no smaller than 10/(difference between left and right wheel speeds).  </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">set_create_normalized_angle</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">void</font> <font class="CFunction">set_create_normalized_angle</font>(<font class="CVariable">int</font>              angle);<br/>              Sets the current value that will be returned by get_create_normalized_angle to the value angle.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">set_create_total_angle</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">void</font> <font class="CFunction">set_create_total_angle</font>(<font class="CVariable">int</font>              angle);<br/>              Sets the current value that will be returned by get_create_total_angle to the value angle.</p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_charging_state</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_charging_state</font>();<br/>              0-not charging; 1-recondition charging; 2-full charging; 3-trickle charging; 4-waiting; 5-charge fault. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_voltage</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_battery_voltage</font>();<br/>              returns the battery voltage in mV. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_current</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_battery_current</font>();<br/>              returns the current flow in mA. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_temp</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_battery_temp</font>();<br/>              returns the battery temperature in degrees C. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_charge</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_battery_charge</font>();<br/>              returns the battery charge in mAh. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_battery_capacity</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_battery_capacity</font>();<br/>              returns the battery capacity in mAh. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_wall_amt</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_wall_amt</font>();<br/>              returns 12 bit analog value from wall sensor. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lcliff_amt</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lcliff_amt</font>();<br/>              returns 12 bit analog value from left cliff sensor. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_lfcliff_amt</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_lfcliff_amt</font>();<br/>              returns 12 bit analog value from left front cliff sensor. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_rfcliff_amt</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rfcliff_amt</font>();<br/>              returns 12 bit analog value from right frontcliff sensor. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_rcliff_amt</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_rcliff_amt</font>();<br/>              returns 12 bit analog value from right cliff sensor. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_bay_DI</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_bay_DI</font>();<br/>              returns byte containing all digital sensors from the cargo bay: 16's bit for pin 15, 8's bit for pin 6, 4's bit for pin 18, 2's bit for pin 5 and 1's bit for pin 17. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_bay_AI</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_bay_AI</font>();<br/>              returns 10 bit analog value on pin 4 from the cargo bay. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_song_number</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_song_number</font>();<br/>              returns currently selected song 0-15. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_song_playing</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_song_playing</font>();<br/>              returns 1 if song is playing, 0 otherwise. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_number_of_stream_packets</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_number_of_stream_packets</font>();<br/>              if data streaming is being used, it returns the size of the stream. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_requested_velocity</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_requested_velocity</font>();<br/>              asks Create how fast it was told to be moving -500 to 500mm/s and returns that value. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_requested_radius</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_requested_radius</font>();<br/>              asks Create the size of its turning radius and returns that value. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_requested_right_velocity</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_requested_right_velocity</font>();<br/>              asks Create how fast it was told to be moving right wheel and returns that value. </p>          </dd>        </dl>  </td></tr><tr>      <td><font class="CFunction">get_create_requested_left_velocity</font> &nbsp;&nbsp;&nbsp;[Category: Create Sensor Function]<br/>        <dl>          <dd>            <p>Format: <font class="CVariable">int</font> <font class="CFunction">get_create_requested_left_velocity</font>();<br/>              asks Create how fast it was told to be moving left wheel and returns that value. </p>          </dd>        </dl>  </td></tr><tr>  <td><font class="CFunction">create_stop </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_stop</font>();<br/>          Stops the drive wheels          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_drive </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_drive</font>(<font class="CVariable">int</font> speed, <font class="CVariable">int</font> radius);<br/>          Drives in an arc (see below for point turns and straight). Speed range for all commands is 20-500mm/s          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_drive_straight </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_drive_straight</font>(<font class="CVariable">int</font> speed);<br/>          Drives straight at speed in mm/s          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_spin_CW </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_spin_CW</font>(<font class="CVariable">int</font> speed);<br/>          spins Clockwise with edge speed of speed in mm/s          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_spin_CCW </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_spin_CCW</font>(<font class="CVariable">int</font> speed);<br/>          spins Counterclockwise with edge speed of speed in mm/s          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_drive_direct </font> &nbsp;&nbsp;&nbsp;[Category: Create Movement Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_drive_direct</font>(<font class="CVariable">int</font> r_speed, <font class="CVariable">int</font> l_speed);<br/>          Specifies individual left and right speeds in mm/s          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_advance_led </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_advance_led</font>(<font class="CVariable">int</font> on);<br/>          Pass 1 to turn on light and 0 to turn it off          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_play_led </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_play_led</font>(<font class="CVariable">int</font> on);<br/>          Pass 1 to turn on light and 0 to turn it off          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_power_led </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_power_led</font>(<font class="CVariable">int</font> color, int brightness);<br/>          color 0 is red and 255 green; brightness 0 is off and 255 is full brightness          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_load_song </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_load_song</font>(<font class="CVariable">int</font> num);<br/>          Picks a song from gc_song_array[16][33]. Each row is a song. First column of each song is number of notes (max is 16). Remaining columns alternate between pitch and duration. See Create Open Interface on the web for details.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">create_play_song </font> &nbsp;&nbsp;&nbsp;[Category: Create Function]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">create_play_song</font>(<font class="CVariable">int</font> num);<br/>          Plays any of the songs that have been loaded          </p>      </dd>    </dl>  </td></tr></tbody></table><!--Vision API--><a name="vision"></A><h3>KIPR Link Vision Library Functions</h3><table class="CFunctions"><tbody><tr>  <td><font class="CFunction">camera_close </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">void</font> <font class="CFunction">camera_close();</font>      <br/>          Cleanup the current camera instance.		  See also <font class="CFunction">camera_open, camera_open_device</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">camera_load_config </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">camera_load_config</font>(<font class="CVariable">char</font> name[]<font class="CFunction">);</font>      <br/>          Causes the camera_load functions to load a config file on the KIPR Link other than the          default config file.  You <b>must</b> append .config to the name for this function to locate it.          Returns 1 on success, 0 on failure.          See also <font class="CFunction">camera_open, camera_open_device</font>.          </p>      </dd>    </dl>  </td></tr><tr><tr>  <td><font class="CFunction">camera_open </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">camera_open</font>(<font class="CVariable">int</font> res_numb<font class="CFunction">);</font>      <br/>          Opens the KIPR Link's default channel configuration.  The default configuration is selected		  from among the channel configurations defined on the KIPR Link using its <i>settings >> channels</i> menu.		  A resolution of one of LOW_RES, MED_RES, HIGH_RES needs to be specified.		  Returns 1 on success, 0 on failure.		  See also <font class="CFunction">camera_open_device, camera_close</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">camera_open_device </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">camera_open_device</font>(<font class="CVariable">int</font> number<font class="CFunction">, int</font> res_numb<font class="CFunction">);</font>      <br/>          If more than 1 camera is plugged in, 0 is the first camera, 1 is the second camera, etc.		  Only 1 camera at a time can be used, and the default configuration is selected.		  A resolution of one of LOW_RES, MED_RES, HIGH_RES needs to be specified.		  Returns 1 on success, 0 on failure.		  See also <font class="CFunction">camera_open, camera_close</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">camera_update </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">camera_update();</font>      <br/>          Pulls a new image from the camera for processing.          Returns 1 on success, 0 on failure.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_channel_count </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_channel_count()</font>();      <br/>          Returns the number of channels in the current configuration.  See also <font class="CFunction">get_object_count</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_code_num </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_code_num</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the data associated with the given channel and object as an integer. If the given channel or object doesn't exist, -1 is returned.          See also <font class="CFunction">get_object_data</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_area </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_object_area</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the object's bounding box area. -1 is returned if the channel or object doesn't exist.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_bbox </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">rectangle</font> <font class="CFunction">get_object_bbox</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the bounding box of the given object on the given channel as a rectangle data type.          For example,<br><dl><dd>          <font class="CVariable">rectangle</font> <font class="CFunction">mybox;<br>          mybox = get_object_bbox(0,2);<br>          printf("x coord %d  y coord %d\n", mybox.x, mybox.y);</font><br></dd></dl><br>          displays the x and y coordinates of bounding box 2 for channel 0.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_center </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">point2</font> <font class="CFunction">get_object_center</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns The (x, y) center of the given object on the given channel as a point2 data type.          For example,<br><dl><dd>          <font class="CVariable">point2</font> <font class="CFunction">mcenter;<br>          mcenter = get_object_center(0,2);<br>          printf("x center coord %d  y center coord %d\n", mcenter.x, mcenter.y);</font><br></dd></dl><br>          displays the x and y coordinates of center point of box 2 for channel 0.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_centroid </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_object_centroid</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns The (x, y) coordinates of the <b>centroid</b> of the given object on the given color channel as a point2 data type (the centroid is the center of mass for the pixels of the specified color).          For example,<br><dl><dd>          <font class="CVariable">point2</font> <font class="CFunction">mcenter;<br>          mcentroid = get_object_centroid(0,2);<br>          printf("x centroid coord %d  y centroid coord %d\n", mcentroid.x, mcentroid.y);</font><br></dd></dl><br>          displays the x and y coordinates of centroid of box 2 for color channel 0.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_confidence </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">double</font> <font class="CFunction">get_object_confidence</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the confidence, between 0.0 and 1.0, that the given object on the given channel is significant.          If the channel or object doesn't exist, 0.0 is returned.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_count </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_object_count</font>(<font class="CVariable">int</font> channel<font class="CFunction">);</font>      <br/>          Returns the number of objects being "seen" by the specified channel.		  Objects are sorted by area, largest first.		  Returns -1 if channel doesn't exist.		  See also <font class="CFunction">get_channel_count</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_data </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">char</font> <font class="CFunction">*get_object_data</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the sequence of character data associated with a given object on a QR channel.		  If there is no data associated, 0 is returned.		  The data is not guaranteed to be null terminated, but can be accessed using array notation; for example,<br><dl><dd>		  <font class="CFunction">get_object_data(0,0)[0], get_object_data(0,0)[1]</font>, etc.</dl><br>		  <font class="CFunction">camera_update();</font> will invalidate the pointer returned by <font class="CFunction">get_object_data</font>.		  See also <font class="CFunction">get_object_data_length</font>.          </p>      </dd>    </dl>  </td></tr><tr>  <td><font class="CFunction">get_object_data_length </font> &nbsp;&nbsp;&nbsp;[Category: Vision]<br/>    <dl>      <dd><p>Format: <font class="CVariable">int</font> <font class="CFunction">get_object_data_length</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font>      <br/>          Returns the number of characters associated with the QR code on a QR channel.		  If there is no data associated, 0 is returned. If the channel or object is invalid, 0 is returned.		  See also <font class="CFunction">get_object_data</font>.          </p>      </dd>    </dl>  </td></tr></tbody></table><!--Functions Categorized--><a name="FunctionsCategorized"></a><h3>Categorized Function List</h3><div class="indent"><a name="CategoryBotball"></a><h4>Botball</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">void</font> <font      class="CFunction">run_for</font>(<font      class="CVariable">double</font> delay, <font      class="CVariable">void</font> (*funcname))</li>        <li><font class="CVariable">void</font> <font class="CFunction">shut_down_in</font>(<font class="CVariable">double</font> delay)</li>	<li><font class="CVariable">int</font> <font	class="CFunction">target_cha_in_chb</font>(<font	class="CVariable">int</font> cha, <font	class="CVariable">int</font> chb, <font	class="CVariable">int</font> *x, <font class="CVariable">int</font> *y)</li>       <li><font class="CVariable">void</font> <font	class="CFunction">wait_for_light</font>(<font	class="CVariable">int</font> light_port_)</li>   </ul>    </td>    </tr></tbody></table><a name="CategoryCreate"></a><h4>Create</h4><table><tbody>    <tr>    <td>        <ul>        <li><font class="CVariable">int</font> <font class="CFunction">create_connect</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_disconnect</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_start</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_passive</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_safe</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_full</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_spot</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_cover</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_demo</font>(<font class="CVariable">int </font> d);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_cover_dock</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_mode</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_lbump</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_rbump</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_lwdrop</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_cwdrop</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_rwdrop</font>();</li>        <li><font class="CVariable">int</font> <font	class="CFunction">get_create_wall</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_lcliff</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_lfcliff</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_rfcliff</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_rcliff</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_vwall</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_overcurrents</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_infrared</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_advance_button</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_play_button</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_normalized_angle</font>();</li>	<li><font class="CVariable">void</font> <font        class="CFunction">set_create_normalized_angle</font>(<font        class="CVariable">int</font> angle);</li>	<li><font class="CVariable">int</font> <font        class="CFunction">get_create_total_angle</font>();</li>	<li><font class="CVariable">void</font> <font class="CFunction">set_create_total_angle</font>(<font class="CVariable">int</font> angle);</li>	<li><font class="CVariable">int</font> <font        class="CFunction">get_create_distance</font>();</li>       </ul>    </td>    <td>        <ul>	<li><font class="CVariable">void</font> <font class="CFunction">set_create_distance</font>(<font class="CVariable">int</font> dist);</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_charging_state</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_voltage</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_current</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_temp</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_charge</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_create_battery_capacity</font>();</li>        <li><font class="CVariable">int</font> <font	class="CFunction">get_create_wall_amt</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_lcliff_amt</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_lfcliff_amt</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_rfcliff_amt</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_rcliff_amt</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_bay_DI</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_bay_AI</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_song_number</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_song_playing</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_number_of_stream_packets</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_requested_velocity</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_requested_radius</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_requested__right_velocity</font>();</li>        <li><font class="CVariable">int</font> <font        class="CFunction">get_create_requested_left_velocity</font>();</li>       <li><font class="CVariable">void</font> <font class="CFunction">create_stop</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_drive</font>(<font class="CVariable">int</font> speed, <font class="CVariable">int</font> radius);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_drive_straight</font>(<font class="CVariable">int</font> speed);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_spin_CW</font>(<font class="CVariable">int</font> speed);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_spin_CCW</font>(<font class="CVariable">int</font> speed);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_drive_direct</font>(<font class="CVariable">int</font> r_speed, <font class="CVariable">int</font> l_speed);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_advance_led</font>(<font class="CVariable">int</font> on);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_play_led</font>(<font class="CVariable">int</font> on);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_power_led</font>(<font class="CVariable">int</font> color, int brightness);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_load_song</font>(<font class="CVariable">int</font> num);</li>        <li><font class="CVariable">void</font> <font class="CFunction">create_play_song</font>(<font class="CVariable">int</font> num);</li>        </ul>    </td>    </tr></tbody></table><a name="CategoryMath"></a><h4>Math</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">double</font> <font class="CFunction">atan</font>(<font class="CVariable">double</font> angle);</li>        <li><font class="CVariable">double</font> <font class="CFunction">cos</font>(<font class="CVariable">double</font> angle);</li>        <li><font class="CVariable">double</font> <font class="CFunction">exp10</font>(<font class="CVariable">double</font> num);</li>        <li><font class="CVariable">double</font> <font class="CFunction">exp</font>(<font class="CVariable">double</font> num);</li>        <li><font class="CVariable">int</font> <font class="CFunction">log10</font>(<font class="CVariable">double</font> num);</li>        <li><font class="CVariable">double</font> <font class="CFunction">log</font>(<font class="CVariable">double</font> num);</li>        <li><font class="CVariable">int</font> <font class="CFunction">random</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">double</font> <font class="CFunction">sin</font>(<font class="CVariable">double</font> angle);</li>        <li><font class="CVariable">double</font> <font class="CFunction">sqrt</font>(<font class="CVariable">double</font> num);</li>        <li><font class="CVariable">double</font> <font class="CFunction">tan</font>(<font class="CVariable">double</font> angle);</li>    </ul>    </td>    </tr></tbody></table><a name="CategoryMotors"></a><h4>Motors</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">void</font> <font class="CFunction">alloff</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">ao</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">bk</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">void</font> <font class="CFunction">block_motor_done</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">void</font> <font class="CFunction">bmd</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">void</font> <font class="CFunction">clear_motor_position_counter</font>(<font class="CVariable">int</font> motor_nbr);</li>        <li><font class="CVariable">void</font> <font class="CFunction">fd</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">void</font> <font class="CFunction">freeze</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_motor_done</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_motor_position_counter</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">void</font> <font class="CFunction">mav</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);</li>        <li><font class="CVariable">void</font> <font class="CFunction">motor</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> p);</li>        <li><font class="CVariable">void</font> <font class="CFunction">move_at_velocity</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel);</li>        <li><font class="CVariable">void</font> <font class="CFunction">move_relative_position</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);</li>        <li><font class="CVariable">void</font> <font class="CFunction">move_to_position</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> speed, <font class="CVariable">int</font> pos);</li>        <li><font class="CVariable">void</font> <font class="CFunction">mrp</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);</li>        <li><font class="CVariable">void</font> <font class="CFunction">mtp</font>(<font class="CVariable">int</font> m, <font class="CVariable">int</font> vel, <font class="CVariable">int</font> pos);</li>        <li><font class="CVariable">void</font> <font class="CFunction">off</font>(<font class="CVariable">int</font> m);</li>        <li><font class="CVariable">int</font> <font class="CFunction">set_pid_gains</font>(<font class="CVariable">int</font> motor, <font class="CVariable">int</font> p, <font class="CVariable">int</font> i, <font class="CVariable">int</font> d, <font class="CVariable">int</font> pd, <font class="CVariable">int</font> id, <font class="CVariable">int</font> dd);</li>        <li><font class="CVariable">int</font> <font class="CFunction">setpwm</font>(<font class="CVariable">int </font>m, <font class="CVariable">int</font> dutycycle);</li>    </ul>    </td>    </tr></tbody></table><a name="CategoryOutput"></a><h4>Output</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">void</font> <font class="CFunction">beep</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">display_clear</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">display_printf</font>(<font class="CVariable">int</font> col, <font class="CVariable">int</font> row, <font class="CVariable">char</font> s[], . . .);</li>        <li><font class="CVariable">void</font> <font	class="CFunction">printf</font>(<font	class="CVariable">char</font> s[], . . .);</li>	<li><font class="CVariable">void</font> <font class="CFunction">set_digital_output</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> inout);</li>	<li><font class="CVariable">void</font> <font class="CFunction">set_digital_value</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> value);</li>   </ul>    </td>    </tr></tbody></table><a name="CategoryProcesses"></a><h4>Processes</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">thread</font> <font class="CFunction">thread_create</font></font>(&lt;function_name&gt;);</li>        <li><font class="CVariable">void</font> <font class="CFunction">thread_destroy</font></font>(&lt;thread id&gt;);</li>        <li><font class="CVariable">void</font> <font class="CFunction">thread_start</font>(&lt;thread id&gt;);</li>        <li><font class="CVariable">void</font> <font class="CFunction">thread_join</font>(&lt;thread id&gt;);</li>        <li><font class="CVariable">void</font> <font class="CFunction">run_for</font>(<font class="CVariable">double</font> sec, <font class="CVariable">void</font> &lt;function_name&gt;);</li>    </ul>    </td>    </tr></tbody></table><a name="CategorySensors"></a><h4>Sensors</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">int</font> <font class="CFunction">a_button</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">analog</font>(<font class="CVariable">int</font> p);</li>        <li><font class="CVariable">int</font> <font class="CFunction">analog10</font>(<font class="CVariable">int</font> p);</li>        <li><font class="CVariable">int</font> <font class="CFunction">b_button</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">side_button</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">digital</font>(<font class="CVariable">int</font> p);</li>        <li><font class="CVariable">double</font> <font class="CFunction">power_level</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">set_each_analog_state</font>(<font class="CVariable">int</font> a0, <font class="CVariable">int</font> a1, <font class="CVariable">int</font> a2, <font class="CVariable">int</font> a3, <font class="CVariable">int</font> a4, <font class="CVariable">int</font> a5, <font class="CVariable">int</font> a6, <font class="CVariable">int</font> a7);</li>        <li><font class="CVariable">void</font> <font class="CFunction">set_analog_pullup</font>(<font class="CVariable">int</font> port, <font class="CVariable">int</font> pullupTF);</li>    </ul>    </td>    </tr></tbody></table><a name="CategoryServos"></a><h4>Servos</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">void</font> <font class="CFunction">disable_servos</font>();</li>        <li><font class="CVariable">void</font> <font class="CFunction">enable_servos</font>();</li>        <li><font class="CVariable">int</font> <font class="CFunction">get_servo_position</font>(<font class="CVariable">int</font> srv);</li>        <li><font class="CVariable">int</font> <font class="CFunction">set_servo_position</font>(<font class="CVariable">int</font> srv, <font class="CVariable">int</font> pos);</li>    </ul>    </td>    </tr></tbody></table><a name="CategoryTime"></a><h4>Time</h4><table><tbody>    <tr>    <td>    <ul>        <li><font class="CVariable">void</font> <font class="CFunction">msleep</font>(<font class="CVariable">int</font> msec);</li>        <li><font class="CVariable">double</font> <font class="CFunction">seconds</font>();</li>    </ul>    </td>    </tr></tbody></table><a name="CategoryVision"></a><h4>Vision</h4><table><tbody>    <tr>    <td>    <ul>       <li><font class="CVariable">void</font> <font class="CFunction">camera_close();</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">camera_load_config</font>(<font class="CVariable">char</font> name[]<font class="CFunction">);</font> <i>[name is config name from the Link with .config appended]</i></li>       <li><font class="CVariable">int</font> <font class="CFunction">camera_open</font>(<font class="CVariable">int</font> res_numb<font class="CFunction">);</font> <i>[res_numb is 1 of LOW_RES, MED_RES, HIGH_RES]</i></li>       <li><font class="CVariable">int</font> <font class="CFunction">camera_open_device</font>(<font class="CVariable">int</font> number,<font class="CVariable"> int</font> res_numb<font class="CFunction">);</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">camera_update();</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">get_channel_count();</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">get_code_num</font>(<font class="CVariable">int</font> channel<font class="CFunction">, int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">get_object_area</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">rectangle</font> <font class="CFunction">get_object_bbox</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">point2</font> <font class="CFunction">get_object_center</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">point2</font> <font class="CFunction">get_object_centroid</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">double</font> <font class="CFunction">get_object_confidence</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">get_object_count</font>(<font class="CVariable">int</font> channel<font class="CFunction">);</font></li>       <li><font class="CVariable">char</font> <font class="CFunction">*get_object_data</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>       <li><font class="CVariable">int</font> <font class="CFunction">get_object_data_length</font>(<font class="CVariable">int</font> channel,<font class="CVariable"> int</font> object<font class="CFunction">);</font></li>    </ul>    </td>    </tr></tbody></table></div><!--Botball--><a name="Botball"></a><h3>Botball</h3><p>Several functions have been created to assist programmers increating programs that meet the basic Botball requirements of havingrobots wait until the starting lights come on and have their programsshut down after a specified amount of time.  A typical Botball programwill call the function</p>	<p><dl><dd><fontclass="CFunction">wait_for_light(&lt;</font>port_num&gt;<fontclass="CFunction">);</font></dl></p><p>following any other set up routines it might be using.  This function walks the robot operator throughthe light calibration routine, reports if the calibration wassucessful, and if it was, blocks until the light is turned on (if not, the process repeats after a brief pause).Normally this is immediately followed by a call to the Botball function</p><p><dl><dd><font class="CFunction">shut_down_in(&lt;</font>time&gt;<fontclass="CFunction">);</font></dl></p><p>which will shutdown all motors and the Create once thespecified time has expired, then terminate the program.  If instead of completely killing theprogram you wish to do some activity for a specified time and thenmove on to other things, the function </p><p><dl><dd><font class="CFunction">run_for(&lt;</font>time<font class="CFunction">, &lt;</font>func_name<font class="CFunction">&gt;); </font></dl></p><p>will execute the requested function for the specified time and then haltthat function if it has not already exited, allowing the statementsfollowing the run_for statement to be executed (such having servo motors maintain position).  </p><p> The function </p><p><dl><dd><font class="CFunction">target_cha_in_chb(&lt;</font>cha<font class="CFunction">&gt;, &lt;</font>chb<font class="CFunction">&gt;, &lt;</font>*x<font class="CFunction">&gt;, &lt;</font>*y<font class="CFunction">&gt;);</font></dl></p><p>uses the vision system to look for a colortarget where the color described in the color channel a is completelysurrounded by the color described by the color channel b.  Theaddresses of to two integer variables, x & y, are also passed.  If a suitabletarget is found in the current frame (this function does NOT perform atrack_update() call) then the function returns 1 and the contents ofthe two variables x and y are changed to match the image pixellocation of the centroid of thecolor blob associated with the inside of the target.  If no targetwith the right colors is in view, then 0 is returned and x and y arenot modified.  If more than one target is in view, the one with thelarger inner blob (as seen by the camera) is the one whose coordinates are returned.An example of use, where the inner color is on channel 3 and the outeron 2, might be: </p><p><dl><dd></font><font class="CFunction">{<font class="CVariable">int</font> x,y;    <font class="CVariable">if</font> (target_cha_in_chb(3,2,&x,&y)==1)printf(<font class="Quote">"Target found at (%d,%d)\n"</font>,x,y);}</font></dl></font><p>The library functions for Botball are:</p><pre><code><a name="run_forx"></a><font    class="CFunction">run_for</font>(&lt;time</font>&gt;, &lt;function_name</font>&gt;);    <font class="Comment">/* Executes the function &lt;function_name&gt;       until it completes or the time &lt;time&gt; has expired. */</font><a name="shut_down_inx"></a><font class="CFunction">shut_down_in</font>(&lt;time</font>&gt;);    <font class="Comment">/* Returns immediately but starts a process    that at the end of &lt;time&gt; will kill the program and    turn off all motors and issue a stop command to the Create. */</font><a name="target_cha_in_chbx"></a><font    class="CFunction">target_cha_in_chb</font>(&lt;cha</font>&gt;, &lt;chb</font>&gt;, &lt;*x</font>&gt;, &lt;*y</font>&gt;);    <font class="Comment">/* Looks for a target: a color surrounded by    another color where the channel number (0-3) for the inner color    is cha and the surrounding color channel is chb.  If the target is    found then the function returns 1, otherwise 0.  If a target is    found then the contents of the variables pointed to by x and y are    changed. */</font><a name="wait_for_lightx"></a><font class="CFunction">wait_for_light</font>(&lt;port</font>&gt;);    <font class="Comment">/* Will run the operator through a    calibration procedure sampling light levels on a sensor plugged    into port number &lt;port&gt; when the starting light is on    and off and then blocks until it senses the starting light has    turned on. */</font></code></pre><br/><!--Threads--><a name="Threads"></a><h3>Threads</h3><p>The term thread is short for the phrase "thread of execution", and represents a sequence of instructionsto be managed by the system as it schedules processimg time among running processes.  On a single processor machine, like the KIPR Link, the instructions running in separate threads appear to be operating in parallel. Each thread, once started, will continue until its process finishes or until it is forcibly terminated by another process using the <font class="CFunction">thread_destroy</font>(&lt;thread_id&gt;); statement. Each active thread gets a small amount of time in turn until all of its statements have been executed or it is forcibly terminated.If a thread's process cannot complete all of its statements before its turn is over, it is paused temporarily for the next thread to gets its share of time. This continues until all the active threads have gotten their slice of time and then it all repeats.  The Link's processor is fast enough that from the user's viewpoint it appears that all of the active processes are running in parallel.</p><p>Functions running in threads can communicate with one another by reading and modifying global variables.The globals can be used as semaphores so that one process can signal another. Process IDs may also be stored in globals so that one process can destroy another one's thread if that is necessary program logic (think in terms of a process that is in an indefinite loop monitoring sensors, so it will never finish).</p><p>The library functions for controlling threads are:</p><pre><code><a name="thread_createx"></a><font class="CFunction">thread_create</font>(&lt;function_name</font>&gt;);    <font class="Comment">/* <font class="CFunction">thread_create</font> creates a thread for running the specified function &lt;function_name&gt; and returns a value       of type <font class="CVariable">thread</font> that is the thread ID to be used for running the thread as an independent process */</font><a name="thread_destroyx"></a><font class="CFunction">thread_destroy</font>(&lt;thread_id</font>&gt;);    <font class="Comment">/* this will terminate (and remove) the thread specified by &lt;thread_id&gt;       (and stop its associated process)  */</font><a name="thread_startx"></a><font class="CFunction">thread_start</font>(&lt;thread_id</font>&gt;);    <font class="Comment">/* this will activate the thread specified by &lt;thread_id&gt;       and run its associated process  */</font><a name="thread_waitx"></a><font class="CFunction">thread_wait</font>(&lt;thread_id</font>&gt;);    <font class="Comment">/* this will cause the program to wait until the specified &lt;thread_id&gt;       has finished - this can be used to sychronize two threads */</font></code></pre><br/><!--sensors--><a name="sensors"></a><h3>Sensors</h3><p>The image below is the front of the KIPR Link where all the sensor, motor, and servo ports can be found.</p><img src="images/Link_front_ports.jpg" width="100%"><table border="1" cellpadding="5" cellspacing="0">  <tbody>    <tr>      <td align="center" valign="center"> <a href="#light_sensor"> <br/>      <img border="0" src="images/image002.gif"/><br/>      <br/>      <br/>      <b>Light Sensor</b><br/>      </a> (analog) </td>      <td align="center" valign="center"> <a href="#top_hat_sensor"> <img border="0" src="images/image003.gif"><br/>      <b>Infrared "Top Hat" Reflectance Sensor</b><br/>      </a> (analog)</font> </td>      <td align="center" valign="center"> <a href="#et_sensor"> <img border="0" src="images/image004.gif"><br/>      <b> Infrared "E.T." Distance Sensor</b><br/>      </a> (floating analog) </td>    </tr>    <tr>      <td align="center" valign="center" colspan="2">      <a href="#touch_sensors"> <img border="0" src="images/image005.gif"><br/>      <b>Touch Sensors</b><br/>      </a> (digital) </td>      <td align="center" valign="center"> <a href="#break_beam_sensor"> <img border="0" src="images/image006.gif"><br/>      <b> Infrared "Break Beam" Sensor</b><br/>      </a> (digital)</font> </td>    </tr><!--    <tr>      <td align="center" valign="center"> <a href="#sonar_sensor"> <img border="0" height="120" width="60" src="images/sonar.jpg"><br/>      <b>Sonar<br/>(Ultrasonic Rangefinder)</b> </a> </font></td>      <td>&nbsp;</td>    </tr>-->    <tr>      <td align="center" valign="center"> <a href="#analog_slider"> <br/>      <img border="0" src="images/AnalogSlider.gif"/><br/>      <br/>      <br/>      <b>Analog Slider Sensor</b><br/>      </a> (analog) </td>      <td align="center" valign="center"> <a href="#analog_pot"> <img border="0" src="images/AnalogPot.gif"><br/>      <b>Analog Pot Sensor</b><br/>      </a> (analog)</font> </td>      <td align="center" valign="center"> <a href="#top_hat_sensor"> <img border="0" src="images/SmallReflectance.gif"><br/>      <b> Small Reflectance Sensor</b><br/>      </a> (analog)</font> </td>    </tr>    </tbody></table><!--light_sensor--><div class="Indent"><a name="light_sensor"></a><h4>Light Sensor (analog)</h4><img border="0" src="images/image002.gif"><br/><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog</a></font>(&lt;port#&gt;) </li>  <li>Low values indicate bright light</li>  <li>High values indicate low light</li>  <li>Sensor is somewhat directional and can be made more so using    black paper or tape or an opaque straw or lego to shade extraneous    light.&nbsp; Sensor can be attenuated by placing paper in front.</li></ul><!--top_hat_sensor--><a name="top_hat_sensor"></a><h4>Infrared "Top Hat" Reflectance Sensor, Small Reflectance Sensor (analog)</h4><img border="0" src="images/image003.gif"><img border="0" src="images/SmallReflectance.gif"><br/><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog</a></font>(&lt;port#&gt;);</li>  <li>Low values indicate bright light, light color, or close proximity</li>  <li>High values indicate low light, dark color, or distance of several inches</li>  <li>Sensor has a reflectance range of about 3 inches</li></ul><!--ET_sensor--><a name="ET_sensor"></a><h4>Infrared "E.T." Distance Sensor (floating analog)</h4><img border="0" src="images/image004.gif"><br/><ul>  <li>Floating analog sensor</li>  <li>Connect to port 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog</a></font>(&lt;port#&gt;);</li>  <li>Low values indicate large distance</li>  <li>High values indicate distance approaching ~4 inches</li>  <li>Range is 4-30 inches.&nbsp; Result is approximately 1/(d)^2. Objects    closer than 4 inches will appear to be far away.</li>  <li>Sharp Electronics part number GP2D12</li>  <li>Sensor shines a narrow infrared beam, and measures the angle of    the beam return using a&nbsp; position-sensitive detector (PSD):</li>  <!--img border="0" src="images/image009.gif"--></ul><!--touch_sensor--><a name="touch_sensors"></a><h4>Touch Sensors (digital)</h4><img border="0" src="images/image005.gif"><br/><ul>  <li>Digital sensors</li>  <li>Connect to ports 8-15</li>  <li>Access with function <font class="CFunction"><a href="#digital">digital</a></font>(&lt;port#&gt;);</li>  <li>1 indicates switch is closed</li>  <li>0 indicates switch is open</li>  <li>These make good bumpers and can be used for limit switches on an    actuator</li></ul><!--break_beam_sensor--><a name="break_beam_sensor"></a><h4>Infrared "Break Beam" Sensor (digital)</h4><img border="0" src="images/image010.gif"><br/><ul>  <li>Digital sensor</li>  <li>Connect to ports 8-15</li>  <li>Access with function <font class="CFunction"><a href="#digital">digital</a></font>(&lt;port#&gt;) </li>  <li>1 indicates slot is empty</li>  <li>0 indicates slot is blocked</li>  <li>These can be used much like touch sensors (if the object being    touched fits in the slot);</li>  <li>Special abilities when used as encoders -    This can be useful for the slot sensor in conjunction    with a wheel, which allows measuring rotational rate and total angle.</li></ul><!--sonar_sensor--><!--<a name="sonar_sensor"></a><h4>Sonar (Ultrasonic Rangefinder)</h4><img border="0" height="180" width="90" src="images/sonar.jpg"><br/><ul>  <li>Timed analog sensor.&nbsp; Sends a "ping" of high-pitched sound and listens for an echo</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog</a></font>(&lt;port#&gt;) </li>  <li>Returned value is distance in inches to closest object in field of view</li>  <li>Range is approximately 10-250 inches</li>  <li>When first powered up, make sure there is nothing within 24  inches (60cm) so sonar can self calibrate. <li>The sonar field of view is an approximately 30 degree teardrop:</li></ul>--><a name="analog_slider"></a><h4>Analog Slider</h4><img border="0" height="66" width="200" src="images/AnalogSlider.gif"><br/><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog10</a></font>(&lt;port#&gt;);</li>  <li>Values range from 0 to 2047</li></ul><a name="analog_pot"></a><h4>Analog Pot (potentiometer)</h4><img border="0" height="128" width="100" src="images/AnalogPot.gif"><br/><ul><ul>  <li>Analog sensor</li>  <li>Connect to ports 0-7</li>  <li>Access with function <font class="CFunction"><a href="#analog">analog10</a></font>(&lt;port#&gt;);</li>  <li>Values range from 0 to 2047</li></ul></div></body></html>